
Uzay_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009888  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08009994  08009994  00019994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b04  08009b04  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  08009b04  08009b04  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b04  08009b04  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b04  08009b04  00019b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b08  08009b08  00019b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08009b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d0  200001cc  08009cd8  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000159c  08009cd8  0002159c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fc38  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f8d  00000000  00000000  0002fe70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc0  00000000  00000000  00032e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a5a  00000000  00000000  00033bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019755  00000000  00000000  0003461a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013090  00000000  00000000  0004dd6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086fcd  00000000  00000000  00060dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003930  00000000  00000000  000e7dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000eb6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001cc 	.word	0x200001cc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800997c 	.word	0x0800997c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d0 	.word	0x200001d0
 8000148:	0800997c 	.word	0x0800997c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08c      	sub	sp, #48	; 0x30
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fac3 	bl	80006dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f8df 	bl	8000318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f965 	bl	8000428 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f935 	bl	80003cc <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000162:	f008 fe53 	bl	8008e0c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	uint8_t slave1[10] = {0};
 8000166:	2300      	movs	r3, #0
 8000168:	627b      	str	r3, [r7, #36]	; 0x24
 800016a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800016e:	2200      	movs	r2, #0
 8000170:	601a      	str	r2, [r3, #0]
 8000172:	809a      	strh	r2, [r3, #4]
	uint8_t slave2[10] = {0};
 8000174:	2300      	movs	r3, #0
 8000176:	61bb      	str	r3, [r7, #24]
 8000178:	f107 031c 	add.w	r3, r7, #28
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
 8000180:	809a      	strh	r2, [r3, #4]
	uint8_t slave3[10] = {0};
 8000182:	2300      	movs	r3, #0
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	f107 0310 	add.w	r3, r7, #16
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	809a      	strh	r2, [r3, #4]
	uint8_t slave4[10] = {0};
 8000190:	2300      	movs	r3, #0
 8000192:	603b      	str	r3, [r7, #0]
 8000194:	1d3b      	adds	r3, r7, #4
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
 800019a:	809a      	strh	r2, [r3, #4]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		CDC_Transmit_FS(buffer, 64);
 800019c:	2140      	movs	r1, #64	; 0x40
 800019e:	485b      	ldr	r0, [pc, #364]	; (800030c <main+0x1c0>)
 80001a0:	f008 ff42 	bl	8009028 <CDC_Transmit_FS>
		//	  HAL_I2C_Master_Transmit_IT(&hi2c1, I2C_SLAVE1_ADD << 1, rx_data, sizeof(rx_data));
		//	  HAL_I2C_Master_Transmit_IT(&hi2c1, I2C_SLAVE2_ADD << 1, rx_data, sizeof(rx_data));
		//	  HAL_I2C_Master_Transmit_IT(&hi2c1, I2C_SLAVE3_ADD << 1, rx_data, sizeof(rx_data));
		//	  HAL_I2C_Master_Transmit_IT(&hi2c1, I2C_SLAVE4_ADD << 1, rx_data, sizeof(rx_data));

		for(uint8_t i = 0; i < 10; i++)
 80001a4:	2300      	movs	r3, #0
 80001a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80001aa:	e082      	b.n	80002b2 <main+0x166>
		{


			if((rx_data[i]>0) && rx_data[i]<=28)
 80001ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80001b0:	4a57      	ldr	r2, [pc, #348]	; (8000310 <main+0x1c4>)
 80001b2:	5cd3      	ldrb	r3, [r2, r3]
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d010      	beq.n	80001da <main+0x8e>
 80001b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80001bc:	4a54      	ldr	r2, [pc, #336]	; (8000310 <main+0x1c4>)
 80001be:	5cd3      	ldrb	r3, [r2, r3]
 80001c0:	2b1c      	cmp	r3, #28
 80001c2:	d80a      	bhi.n	80001da <main+0x8e>
			{
				slave1[i] = rx_data[i];
 80001c4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80001c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80001cc:	4950      	ldr	r1, [pc, #320]	; (8000310 <main+0x1c4>)
 80001ce:	5c8a      	ldrb	r2, [r1, r2]
 80001d0:	3330      	adds	r3, #48	; 0x30
 80001d2:	443b      	add	r3, r7
 80001d4:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80001d8:	e006      	b.n	80001e8 <main+0x9c>
			}
			else	slave1[i] = 0;
 80001da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80001de:	3330      	adds	r3, #48	; 0x30
 80001e0:	443b      	add	r3, r7
 80001e2:	2200      	movs	r2, #0
 80001e4:	f803 2c0c 	strb.w	r2, [r3, #-12]


			if((rx_data[i]>28) && rx_data[i]<=56)
 80001e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80001ec:	4a48      	ldr	r2, [pc, #288]	; (8000310 <main+0x1c4>)
 80001ee:	5cd3      	ldrb	r3, [r2, r3]
 80001f0:	2b1c      	cmp	r3, #28
 80001f2:	d912      	bls.n	800021a <main+0xce>
 80001f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80001f8:	4a45      	ldr	r2, [pc, #276]	; (8000310 <main+0x1c4>)
 80001fa:	5cd3      	ldrb	r3, [r2, r3]
 80001fc:	2b38      	cmp	r3, #56	; 0x38
 80001fe:	d80c      	bhi.n	800021a <main+0xce>
			{
				slave2[i] = rx_data[i] - 28;
 8000200:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000204:	4a42      	ldr	r2, [pc, #264]	; (8000310 <main+0x1c4>)
 8000206:	5cd2      	ldrb	r2, [r2, r3]
 8000208:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800020c:	3a1c      	subs	r2, #28
 800020e:	b2d2      	uxtb	r2, r2
 8000210:	3330      	adds	r3, #48	; 0x30
 8000212:	443b      	add	r3, r7
 8000214:	f803 2c18 	strb.w	r2, [r3, #-24]
 8000218:	e006      	b.n	8000228 <main+0xdc>
			}
			else	slave2[i] = 0;
 800021a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800021e:	3330      	adds	r3, #48	; 0x30
 8000220:	443b      	add	r3, r7
 8000222:	2200      	movs	r2, #0
 8000224:	f803 2c18 	strb.w	r2, [r3, #-24]


			if((rx_data[i]>56) && rx_data[i]<=84)
 8000228:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800022c:	4a38      	ldr	r2, [pc, #224]	; (8000310 <main+0x1c4>)
 800022e:	5cd3      	ldrb	r3, [r2, r3]
 8000230:	2b38      	cmp	r3, #56	; 0x38
 8000232:	d912      	bls.n	800025a <main+0x10e>
 8000234:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000238:	4a35      	ldr	r2, [pc, #212]	; (8000310 <main+0x1c4>)
 800023a:	5cd3      	ldrb	r3, [r2, r3]
 800023c:	2b54      	cmp	r3, #84	; 0x54
 800023e:	d80c      	bhi.n	800025a <main+0x10e>
			{
				slave3[i] = rx_data[i] - 56;
 8000240:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000244:	4a32      	ldr	r2, [pc, #200]	; (8000310 <main+0x1c4>)
 8000246:	5cd2      	ldrb	r2, [r2, r3]
 8000248:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800024c:	3a38      	subs	r2, #56	; 0x38
 800024e:	b2d2      	uxtb	r2, r2
 8000250:	3330      	adds	r3, #48	; 0x30
 8000252:	443b      	add	r3, r7
 8000254:	f803 2c24 	strb.w	r2, [r3, #-36]
 8000258:	e006      	b.n	8000268 <main+0x11c>
			}
			else	slave3[i] = 0;
 800025a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800025e:	3330      	adds	r3, #48	; 0x30
 8000260:	443b      	add	r3, r7
 8000262:	2200      	movs	r2, #0
 8000264:	f803 2c24 	strb.w	r2, [r3, #-36]


			if((rx_data[i]>84) && rx_data[i]<=112)
 8000268:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800026c:	4a28      	ldr	r2, [pc, #160]	; (8000310 <main+0x1c4>)
 800026e:	5cd3      	ldrb	r3, [r2, r3]
 8000270:	2b54      	cmp	r3, #84	; 0x54
 8000272:	d912      	bls.n	800029a <main+0x14e>
 8000274:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000278:	4a25      	ldr	r2, [pc, #148]	; (8000310 <main+0x1c4>)
 800027a:	5cd3      	ldrb	r3, [r2, r3]
 800027c:	2b70      	cmp	r3, #112	; 0x70
 800027e:	d80c      	bhi.n	800029a <main+0x14e>
			{
				slave4[i] = rx_data[i] - 84;
 8000280:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000284:	4a22      	ldr	r2, [pc, #136]	; (8000310 <main+0x1c4>)
 8000286:	5cd2      	ldrb	r2, [r2, r3]
 8000288:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800028c:	3a54      	subs	r2, #84	; 0x54
 800028e:	b2d2      	uxtb	r2, r2
 8000290:	3330      	adds	r3, #48	; 0x30
 8000292:	443b      	add	r3, r7
 8000294:	f803 2c30 	strb.w	r2, [r3, #-48]
 8000298:	e006      	b.n	80002a8 <main+0x15c>
			}
			else	slave4[i] = 0;
 800029a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800029e:	3330      	adds	r3, #48	; 0x30
 80002a0:	443b      	add	r3, r7
 80002a2:	2200      	movs	r2, #0
 80002a4:	f803 2c30 	strb.w	r2, [r3, #-48]
		for(uint8_t i = 0; i < 10; i++)
 80002a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80002ac:	3301      	adds	r3, #1
 80002ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80002b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80002b6:	2b09      	cmp	r3, #9
 80002b8:	f67f af78 	bls.w	80001ac <main+0x60>


		}
		HAL_I2C_Master_Transmit_IT(&hi2c1, I2C_SLAVE1_ADD << 1, slave1, sizeof(slave1));
 80002bc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80002c0:	230a      	movs	r3, #10
 80002c2:	21a0      	movs	r1, #160	; 0xa0
 80002c4:	4813      	ldr	r0, [pc, #76]	; (8000314 <main+0x1c8>)
 80002c6:	f000 ff17 	bl	80010f8 <HAL_I2C_Master_Transmit_IT>
		HAL_Delay(5);
 80002ca:	2005      	movs	r0, #5
 80002cc:	f000 fa68 	bl	80007a0 <HAL_Delay>
		HAL_I2C_Master_Transmit_IT(&hi2c1, I2C_SLAVE2_ADD << 1, slave2, sizeof(slave2));
 80002d0:	f107 0218 	add.w	r2, r7, #24
 80002d4:	230a      	movs	r3, #10
 80002d6:	21a2      	movs	r1, #162	; 0xa2
 80002d8:	480e      	ldr	r0, [pc, #56]	; (8000314 <main+0x1c8>)
 80002da:	f000 ff0d 	bl	80010f8 <HAL_I2C_Master_Transmit_IT>
		HAL_Delay(5);
 80002de:	2005      	movs	r0, #5
 80002e0:	f000 fa5e 	bl	80007a0 <HAL_Delay>
		HAL_I2C_Master_Transmit_IT(&hi2c1, I2C_SLAVE3_ADD << 1, slave3, sizeof(slave3));
 80002e4:	f107 020c 	add.w	r2, r7, #12
 80002e8:	230a      	movs	r3, #10
 80002ea:	21a4      	movs	r1, #164	; 0xa4
 80002ec:	4809      	ldr	r0, [pc, #36]	; (8000314 <main+0x1c8>)
 80002ee:	f000 ff03 	bl	80010f8 <HAL_I2C_Master_Transmit_IT>
		HAL_Delay(5);
 80002f2:	2005      	movs	r0, #5
 80002f4:	f000 fa54 	bl	80007a0 <HAL_Delay>
		HAL_I2C_Master_Transmit_IT(&hi2c1, I2C_SLAVE4_ADD << 1, slave4, sizeof(slave4));
 80002f8:	463a      	mov	r2, r7
 80002fa:	230a      	movs	r3, #10
 80002fc:	21a6      	movs	r1, #166	; 0xa6
 80002fe:	4805      	ldr	r0, [pc, #20]	; (8000314 <main+0x1c8>)
 8000300:	f000 fefa 	bl	80010f8 <HAL_I2C_Master_Transmit_IT>
		HAL_Delay(5);
 8000304:	2005      	movs	r0, #5
 8000306:	f000 fa4b 	bl	80007a0 <HAL_Delay>
		CDC_Transmit_FS(buffer, 64);
 800030a:	e747      	b.n	800019c <main+0x50>
 800030c:	200001e8 	.word	0x200001e8
 8000310:	20000228 	.word	0x20000228
 8000314:	20000234 	.word	0x20000234

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b094      	sub	sp, #80	; 0x50
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000322:	2228      	movs	r2, #40	; 0x28
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f009 fae8 	bl	80098fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	f107 0314 	add.w	r3, r7, #20
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	60da      	str	r2, [r3, #12]
 800033a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000348:	2301      	movs	r3, #1
 800034a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800034c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000350:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000356:	2301      	movs	r3, #1
 8000358:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035a:	2302      	movs	r3, #2
 800035c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800035e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000362:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000364:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000368:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800036e:	4618      	mov	r0, r3
 8000370:	f004 f98e 	bl	8004690 <HAL_RCC_OscConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800037a:	f000 f8b7 	bl	80004ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800037e:	230f      	movs	r3, #15
 8000380:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000382:	2302      	movs	r3, #2
 8000384:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800038a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800038e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000394:	f107 0314 	add.w	r3, r7, #20
 8000398:	2102      	movs	r1, #2
 800039a:	4618      	mov	r0, r3
 800039c:	f004 fbfa 	bl	8004b94 <HAL_RCC_ClockConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003a6:	f000 f8a1 	bl	80004ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003aa:	2310      	movs	r3, #16
 80003ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003ae:	2300      	movs	r3, #0
 80003b0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	4618      	mov	r0, r3
 80003b6:	f004 fd67 	bl	8004e88 <HAL_RCCEx_PeriphCLKConfig>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80003c0:	f000 f894 	bl	80004ec <Error_Handler>
  }
}
 80003c4:	bf00      	nop
 80003c6:	3750      	adds	r7, #80	; 0x50
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003d0:	4b12      	ldr	r3, [pc, #72]	; (800041c <MX_I2C1_Init+0x50>)
 80003d2:	4a13      	ldr	r2, [pc, #76]	; (8000420 <MX_I2C1_Init+0x54>)
 80003d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003d6:	4b11      	ldr	r3, [pc, #68]	; (800041c <MX_I2C1_Init+0x50>)
 80003d8:	4a12      	ldr	r2, [pc, #72]	; (8000424 <MX_I2C1_Init+0x58>)
 80003da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_I2C1_Init+0x50>)
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <MX_I2C1_Init+0x50>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_I2C1_Init+0x50>)
 80003ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f0:	4b0a      	ldr	r3, [pc, #40]	; (800041c <MX_I2C1_Init+0x50>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003f6:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_I2C1_Init+0x50>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003fc:	4b07      	ldr	r3, [pc, #28]	; (800041c <MX_I2C1_Init+0x50>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <MX_I2C1_Init+0x50>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000408:	4804      	ldr	r0, [pc, #16]	; (800041c <MX_I2C1_Init+0x50>)
 800040a:	f000 fd1d 	bl	8000e48 <HAL_I2C_Init>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000414:	f000 f86a 	bl	80004ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000234 	.word	0x20000234
 8000420:	40005400 	.word	0x40005400
 8000424:	000186a0 	.word	0x000186a0

08000428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042e:	f107 0310 	add.w	r3, r7, #16
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800043c:	4b28      	ldr	r3, [pc, #160]	; (80004e0 <MX_GPIO_Init+0xb8>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a27      	ldr	r2, [pc, #156]	; (80004e0 <MX_GPIO_Init+0xb8>)
 8000442:	f043 0320 	orr.w	r3, r3, #32
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b25      	ldr	r3, [pc, #148]	; (80004e0 <MX_GPIO_Init+0xb8>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0320 	and.w	r3, r3, #32
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000454:	4b22      	ldr	r3, [pc, #136]	; (80004e0 <MX_GPIO_Init+0xb8>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a21      	ldr	r2, [pc, #132]	; (80004e0 <MX_GPIO_Init+0xb8>)
 800045a:	f043 0308 	orr.w	r3, r3, #8
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b1f      	ldr	r3, [pc, #124]	; (80004e0 <MX_GPIO_Init+0xb8>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0308 	and.w	r3, r3, #8
 8000468:	60bb      	str	r3, [r7, #8]
 800046a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046c:	4b1c      	ldr	r3, [pc, #112]	; (80004e0 <MX_GPIO_Init+0xb8>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a1b      	ldr	r2, [pc, #108]	; (80004e0 <MX_GPIO_Init+0xb8>)
 8000472:	f043 0304 	orr.w	r3, r3, #4
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b19      	ldr	r3, [pc, #100]	; (80004e0 <MX_GPIO_Init+0xb8>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0304 	and.w	r3, r3, #4
 8000480:	607b      	str	r3, [r7, #4]
 8000482:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000484:	2200      	movs	r2, #0
 8000486:	f24f 0118 	movw	r1, #61464	; 0xf018
 800048a:	4816      	ldr	r0, [pc, #88]	; (80004e4 <MX_GPIO_Init+0xbc>)
 800048c:	f000 fcc4 	bl	8000e18 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	f44f 4107 	mov.w	r1, #34560	; 0x8700
 8000496:	4814      	ldr	r0, [pc, #80]	; (80004e8 <MX_GPIO_Init+0xc0>)
 8000498:	f000 fcbe 	bl	8000e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800049c:	f24f 0318 	movw	r3, #61464	; 0xf018
 80004a0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a2:	2301      	movs	r3, #1
 80004a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004aa:	2302      	movs	r3, #2
 80004ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ae:	f107 0310 	add.w	r3, r7, #16
 80004b2:	4619      	mov	r1, r3
 80004b4:	480b      	ldr	r0, [pc, #44]	; (80004e4 <MX_GPIO_Init+0xbc>)
 80004b6:	f000 fb2b 	bl	8000b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 80004ba:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 80004be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c0:	2301      	movs	r3, #1
 80004c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c8:	2302      	movs	r3, #2
 80004ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	4619      	mov	r1, r3
 80004d2:	4805      	ldr	r0, [pc, #20]	; (80004e8 <MX_GPIO_Init+0xc0>)
 80004d4:	f000 fb1c 	bl	8000b10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004d8:	bf00      	nop
 80004da:	3720      	adds	r7, #32
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40010c00 	.word	0x40010c00
 80004e8:	40010800 	.word	0x40010800

080004ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f0:	b672      	cpsid	i
}
 80004f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80004f4:	e7fe      	b.n	80004f4 <Error_Handler+0x8>
	...

080004f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004fe:	4b15      	ldr	r3, [pc, #84]	; (8000554 <HAL_MspInit+0x5c>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	4a14      	ldr	r2, [pc, #80]	; (8000554 <HAL_MspInit+0x5c>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	6193      	str	r3, [r2, #24]
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <HAL_MspInit+0x5c>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <HAL_MspInit+0x5c>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <HAL_MspInit+0x5c>)
 800051c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000520:	61d3      	str	r3, [r2, #28]
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <HAL_MspInit+0x5c>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <HAL_MspInit+0x60>)
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <HAL_MspInit+0x60>)
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	40021000 	.word	0x40021000
 8000558:	40010000 	.word	0x40010000

0800055c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	f107 0310 	add.w	r3, r7, #16
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a1d      	ldr	r2, [pc, #116]	; (80005ec <HAL_I2C_MspInit+0x90>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d133      	bne.n	80005e4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800057c:	4b1c      	ldr	r3, [pc, #112]	; (80005f0 <HAL_I2C_MspInit+0x94>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a1b      	ldr	r2, [pc, #108]	; (80005f0 <HAL_I2C_MspInit+0x94>)
 8000582:	f043 0308 	orr.w	r3, r3, #8
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <HAL_I2C_MspInit+0x94>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0308 	and.w	r3, r3, #8
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000594:	23c0      	movs	r3, #192	; 0xc0
 8000596:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000598:	2312      	movs	r3, #18
 800059a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059c:	2303      	movs	r3, #3
 800059e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	4619      	mov	r1, r3
 80005a6:	4813      	ldr	r0, [pc, #76]	; (80005f4 <HAL_I2C_MspInit+0x98>)
 80005a8:	f000 fab2 	bl	8000b10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005ac:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <HAL_I2C_MspInit+0x94>)
 80005ae:	69db      	ldr	r3, [r3, #28]
 80005b0:	4a0f      	ldr	r2, [pc, #60]	; (80005f0 <HAL_I2C_MspInit+0x94>)
 80005b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005b6:	61d3      	str	r3, [r2, #28]
 80005b8:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <HAL_I2C_MspInit+0x94>)
 80005ba:	69db      	ldr	r3, [r3, #28]
 80005bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2100      	movs	r1, #0
 80005c8:	201f      	movs	r0, #31
 80005ca:	f000 f9e4 	bl	8000996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80005ce:	201f      	movs	r0, #31
 80005d0:	f000 f9fd 	bl	80009ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2100      	movs	r1, #0
 80005d8:	2020      	movs	r0, #32
 80005da:	f000 f9dc 	bl	8000996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80005de:	2020      	movs	r0, #32
 80005e0:	f000 f9f5 	bl	80009ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005e4:	bf00      	nop
 80005e6:	3720      	adds	r7, #32
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40005400 	.word	0x40005400
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40010c00 	.word	0x40010c00

080005f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <NMI_Handler+0x4>

080005fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000602:	e7fe      	b.n	8000602 <HardFault_Handler+0x4>

08000604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <MemManage_Handler+0x4>

0800060a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800060e:	e7fe      	b.n	800060e <BusFault_Handler+0x4>

08000610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <UsageFault_Handler+0x4>

08000616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr

08000622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr

0800062e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr

0800063a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063e:	f000 f893 	bl	8000768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800064c:	4802      	ldr	r0, [pc, #8]	; (8000658 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800064e:	f002 fbd6 	bl	8002dfe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000f54 	.word	0x20000f54

0800065c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000660:	4802      	ldr	r0, [pc, #8]	; (800066c <I2C1_EV_IRQHandler+0x10>)
 8000662:	f000 fde9 	bl	8001238 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000234 	.word	0x20000234

08000670 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000674:	4802      	ldr	r0, [pc, #8]	; (8000680 <I2C1_ER_IRQHandler+0x10>)
 8000676:	f000 ff32 	bl	80014de <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000234 	.word	0x20000234

08000684 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000690:	f7ff fff8 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000694:	480b      	ldr	r0, [pc, #44]	; (80006c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000696:	490c      	ldr	r1, [pc, #48]	; (80006c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000698:	4a0c      	ldr	r2, [pc, #48]	; (80006cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800069c:	e002      	b.n	80006a4 <LoopCopyDataInit>

0800069e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a2:	3304      	adds	r3, #4

080006a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a8:	d3f9      	bcc.n	800069e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006aa:	4a09      	ldr	r2, [pc, #36]	; (80006d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006ac:	4c09      	ldr	r4, [pc, #36]	; (80006d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b0:	e001      	b.n	80006b6 <LoopFillZerobss>

080006b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b4:	3204      	adds	r2, #4

080006b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b8:	d3fb      	bcc.n	80006b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ba:	f009 f92d 	bl	8009918 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006be:	f7ff fd45 	bl	800014c <main>
  bx lr
 80006c2:	4770      	bx	lr
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 80006cc:	08009b0c 	.word	0x08009b0c
  ldr r2, =_sbss
 80006d0:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80006d4:	2000159c 	.word	0x2000159c

080006d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC1_2_IRQHandler>
	...

080006dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <HAL_Init+0x28>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a07      	ldr	r2, [pc, #28]	; (8000704 <HAL_Init+0x28>)
 80006e6:	f043 0310 	orr.w	r3, r3, #16
 80006ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ec:	2003      	movs	r0, #3
 80006ee:	f000 f947 	bl	8000980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006f2:	200f      	movs	r0, #15
 80006f4:	f000 f808 	bl	8000708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006f8:	f7ff fefe 	bl	80004f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40022000 	.word	0x40022000

08000708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <HAL_InitTick+0x54>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_InitTick+0x58>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000722:	fbb2 f3f3 	udiv	r3, r2, r3
 8000726:	4618      	mov	r0, r3
 8000728:	f000 f95f 	bl	80009ea <HAL_SYSTICK_Config>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	e00e      	b.n	8000754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b0f      	cmp	r3, #15
 800073a:	d80a      	bhi.n	8000752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800073c:	2200      	movs	r2, #0
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	f04f 30ff 	mov.w	r0, #4294967295
 8000744:	f000 f927 	bl	8000996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000748:	4a06      	ldr	r2, [pc, #24]	; (8000764 <HAL_InitTick+0x5c>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800074e:	2300      	movs	r3, #0
 8000750:	e000      	b.n	8000754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
}
 8000754:	4618      	mov	r0, r3
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000000 	.word	0x20000000
 8000760:	20000008 	.word	0x20000008
 8000764:	20000004 	.word	0x20000004

08000768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <HAL_IncTick+0x1c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <HAL_IncTick+0x20>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4413      	add	r3, r2
 8000778:	4a03      	ldr	r2, [pc, #12]	; (8000788 <HAL_IncTick+0x20>)
 800077a:	6013      	str	r3, [r2, #0]
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	20000008 	.word	0x20000008
 8000788:	20000288 	.word	0x20000288

0800078c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  return uwTick;
 8000790:	4b02      	ldr	r3, [pc, #8]	; (800079c <HAL_GetTick+0x10>)
 8000792:	681b      	ldr	r3, [r3, #0]
}
 8000794:	4618      	mov	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	20000288 	.word	0x20000288

080007a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007a8:	f7ff fff0 	bl	800078c <HAL_GetTick>
 80007ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007b8:	d005      	beq.n	80007c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <HAL_Delay+0x44>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	461a      	mov	r2, r3
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	4413      	add	r3, r2
 80007c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007c6:	bf00      	nop
 80007c8:	f7ff ffe0 	bl	800078c <HAL_GetTick>
 80007cc:	4602      	mov	r2, r0
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d8f7      	bhi.n	80007c8 <HAL_Delay+0x28>
  {
  }
}
 80007d8:	bf00      	nop
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000008 	.word	0x20000008

080007e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f003 0307 	and.w	r3, r3, #7
 80007f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <__NVIC_SetPriorityGrouping+0x44>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000804:	4013      	ands	r3, r2
 8000806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800081a:	4a04      	ldr	r2, [pc, #16]	; (800082c <__NVIC_SetPriorityGrouping+0x44>)
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	60d3      	str	r3, [r2, #12]
}
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000834:	4b04      	ldr	r3, [pc, #16]	; (8000848 <__NVIC_GetPriorityGrouping+0x18>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	0a1b      	lsrs	r3, r3, #8
 800083a:	f003 0307 	and.w	r3, r3, #7
}
 800083e:	4618      	mov	r0, r3
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	2b00      	cmp	r3, #0
 800085c:	db0b      	blt.n	8000876 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	f003 021f 	and.w	r2, r3, #31
 8000864:	4906      	ldr	r1, [pc, #24]	; (8000880 <__NVIC_EnableIRQ+0x34>)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	095b      	lsrs	r3, r3, #5
 800086c:	2001      	movs	r0, #1
 800086e:	fa00 f202 	lsl.w	r2, r0, r2
 8000872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	e000e100 	.word	0xe000e100

08000884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	6039      	str	r1, [r7, #0]
 800088e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000894:	2b00      	cmp	r3, #0
 8000896:	db0a      	blt.n	80008ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	b2da      	uxtb	r2, r3
 800089c:	490c      	ldr	r1, [pc, #48]	; (80008d0 <__NVIC_SetPriority+0x4c>)
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	0112      	lsls	r2, r2, #4
 80008a4:	b2d2      	uxtb	r2, r2
 80008a6:	440b      	add	r3, r1
 80008a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ac:	e00a      	b.n	80008c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4908      	ldr	r1, [pc, #32]	; (80008d4 <__NVIC_SetPriority+0x50>)
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	f003 030f 	and.w	r3, r3, #15
 80008ba:	3b04      	subs	r3, #4
 80008bc:	0112      	lsls	r2, r2, #4
 80008be:	b2d2      	uxtb	r2, r2
 80008c0:	440b      	add	r3, r1
 80008c2:	761a      	strb	r2, [r3, #24]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000e100 	.word	0xe000e100
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b089      	sub	sp, #36	; 0x24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	f1c3 0307 	rsb	r3, r3, #7
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	bf28      	it	cs
 80008f6:	2304      	movcs	r3, #4
 80008f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	3304      	adds	r3, #4
 80008fe:	2b06      	cmp	r3, #6
 8000900:	d902      	bls.n	8000908 <NVIC_EncodePriority+0x30>
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3b03      	subs	r3, #3
 8000906:	e000      	b.n	800090a <NVIC_EncodePriority+0x32>
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800090c:	f04f 32ff 	mov.w	r2, #4294967295
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	43da      	mvns	r2, r3
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	401a      	ands	r2, r3
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000920:	f04f 31ff 	mov.w	r1, #4294967295
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	fa01 f303 	lsl.w	r3, r1, r3
 800092a:	43d9      	mvns	r1, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000930:	4313      	orrs	r3, r2
         );
}
 8000932:	4618      	mov	r0, r3
 8000934:	3724      	adds	r7, #36	; 0x24
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3b01      	subs	r3, #1
 8000948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800094c:	d301      	bcc.n	8000952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800094e:	2301      	movs	r3, #1
 8000950:	e00f      	b.n	8000972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <SysTick_Config+0x40>)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3b01      	subs	r3, #1
 8000958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800095a:	210f      	movs	r1, #15
 800095c:	f04f 30ff 	mov.w	r0, #4294967295
 8000960:	f7ff ff90 	bl	8000884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <SysTick_Config+0x40>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800096a:	4b04      	ldr	r3, [pc, #16]	; (800097c <SysTick_Config+0x40>)
 800096c:	2207      	movs	r2, #7
 800096e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	e000e010 	.word	0xe000e010

08000980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff ff2d 	bl	80007e8 <__NVIC_SetPriorityGrouping>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000996:	b580      	push	{r7, lr}
 8000998:	b086      	sub	sp, #24
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	60b9      	str	r1, [r7, #8]
 80009a0:	607a      	str	r2, [r7, #4]
 80009a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009a8:	f7ff ff42 	bl	8000830 <__NVIC_GetPriorityGrouping>
 80009ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	68b9      	ldr	r1, [r7, #8]
 80009b2:	6978      	ldr	r0, [r7, #20]
 80009b4:	f7ff ff90 	bl	80008d8 <NVIC_EncodePriority>
 80009b8:	4602      	mov	r2, r0
 80009ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009be:	4611      	mov	r1, r2
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ff5f 	bl	8000884 <__NVIC_SetPriority>
}
 80009c6:	bf00      	nop
 80009c8:	3718      	adds	r7, #24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	4603      	mov	r3, r0
 80009d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff35 	bl	800084c <__NVIC_EnableIRQ>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff ffa2 	bl	800093c <SysTick_Config>
 80009f8:	4603      	mov	r3, r0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d005      	beq.n	8000a28 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2204      	movs	r2, #4
 8000a20:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	73fb      	strb	r3, [r7, #15]
 8000a26:	e051      	b.n	8000acc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f022 020e 	bic.w	r2, r2, #14
 8000a36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f022 0201 	bic.w	r2, r2, #1
 8000a46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a22      	ldr	r2, [pc, #136]	; (8000ad8 <HAL_DMA_Abort_IT+0xd4>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d029      	beq.n	8000aa6 <HAL_DMA_Abort_IT+0xa2>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a21      	ldr	r2, [pc, #132]	; (8000adc <HAL_DMA_Abort_IT+0xd8>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d022      	beq.n	8000aa2 <HAL_DMA_Abort_IT+0x9e>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a1f      	ldr	r2, [pc, #124]	; (8000ae0 <HAL_DMA_Abort_IT+0xdc>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d01a      	beq.n	8000a9c <HAL_DMA_Abort_IT+0x98>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a1e      	ldr	r2, [pc, #120]	; (8000ae4 <HAL_DMA_Abort_IT+0xe0>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d012      	beq.n	8000a96 <HAL_DMA_Abort_IT+0x92>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <HAL_DMA_Abort_IT+0xe4>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d00a      	beq.n	8000a90 <HAL_DMA_Abort_IT+0x8c>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <HAL_DMA_Abort_IT+0xe8>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d102      	bne.n	8000a8a <HAL_DMA_Abort_IT+0x86>
 8000a84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a88:	e00e      	b.n	8000aa8 <HAL_DMA_Abort_IT+0xa4>
 8000a8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a8e:	e00b      	b.n	8000aa8 <HAL_DMA_Abort_IT+0xa4>
 8000a90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a94:	e008      	b.n	8000aa8 <HAL_DMA_Abort_IT+0xa4>
 8000a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9a:	e005      	b.n	8000aa8 <HAL_DMA_Abort_IT+0xa4>
 8000a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa0:	e002      	b.n	8000aa8 <HAL_DMA_Abort_IT+0xa4>
 8000aa2:	2310      	movs	r3, #16
 8000aa4:	e000      	b.n	8000aa8 <HAL_DMA_Abort_IT+0xa4>
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	4a11      	ldr	r2, [pc, #68]	; (8000af0 <HAL_DMA_Abort_IT+0xec>)
 8000aaa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d003      	beq.n	8000acc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	4798      	blx	r3
    } 
  }
  return status;
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40020008 	.word	0x40020008
 8000adc:	4002001c 	.word	0x4002001c
 8000ae0:	40020030 	.word	0x40020030
 8000ae4:	40020044 	.word	0x40020044
 8000ae8:	40020058 	.word	0x40020058
 8000aec:	4002006c 	.word	0x4002006c
 8000af0:	40020000 	.word	0x40020000

08000af4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b02:	b2db      	uxtb	r3, r3
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
	...

08000b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b08b      	sub	sp, #44	; 0x2c
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b22:	e169      	b.n	8000df8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b24:	2201      	movs	r2, #1
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	69fa      	ldr	r2, [r7, #28]
 8000b34:	4013      	ands	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	f040 8158 	bne.w	8000df2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	4a9a      	ldr	r2, [pc, #616]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d05e      	beq.n	8000c0a <HAL_GPIO_Init+0xfa>
 8000b4c:	4a98      	ldr	r2, [pc, #608]	; (8000db0 <HAL_GPIO_Init+0x2a0>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d875      	bhi.n	8000c3e <HAL_GPIO_Init+0x12e>
 8000b52:	4a98      	ldr	r2, [pc, #608]	; (8000db4 <HAL_GPIO_Init+0x2a4>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d058      	beq.n	8000c0a <HAL_GPIO_Init+0xfa>
 8000b58:	4a96      	ldr	r2, [pc, #600]	; (8000db4 <HAL_GPIO_Init+0x2a4>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d86f      	bhi.n	8000c3e <HAL_GPIO_Init+0x12e>
 8000b5e:	4a96      	ldr	r2, [pc, #600]	; (8000db8 <HAL_GPIO_Init+0x2a8>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d052      	beq.n	8000c0a <HAL_GPIO_Init+0xfa>
 8000b64:	4a94      	ldr	r2, [pc, #592]	; (8000db8 <HAL_GPIO_Init+0x2a8>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d869      	bhi.n	8000c3e <HAL_GPIO_Init+0x12e>
 8000b6a:	4a94      	ldr	r2, [pc, #592]	; (8000dbc <HAL_GPIO_Init+0x2ac>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d04c      	beq.n	8000c0a <HAL_GPIO_Init+0xfa>
 8000b70:	4a92      	ldr	r2, [pc, #584]	; (8000dbc <HAL_GPIO_Init+0x2ac>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d863      	bhi.n	8000c3e <HAL_GPIO_Init+0x12e>
 8000b76:	4a92      	ldr	r2, [pc, #584]	; (8000dc0 <HAL_GPIO_Init+0x2b0>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d046      	beq.n	8000c0a <HAL_GPIO_Init+0xfa>
 8000b7c:	4a90      	ldr	r2, [pc, #576]	; (8000dc0 <HAL_GPIO_Init+0x2b0>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d85d      	bhi.n	8000c3e <HAL_GPIO_Init+0x12e>
 8000b82:	2b12      	cmp	r3, #18
 8000b84:	d82a      	bhi.n	8000bdc <HAL_GPIO_Init+0xcc>
 8000b86:	2b12      	cmp	r3, #18
 8000b88:	d859      	bhi.n	8000c3e <HAL_GPIO_Init+0x12e>
 8000b8a:	a201      	add	r2, pc, #4	; (adr r2, 8000b90 <HAL_GPIO_Init+0x80>)
 8000b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b90:	08000c0b 	.word	0x08000c0b
 8000b94:	08000be5 	.word	0x08000be5
 8000b98:	08000bf7 	.word	0x08000bf7
 8000b9c:	08000c39 	.word	0x08000c39
 8000ba0:	08000c3f 	.word	0x08000c3f
 8000ba4:	08000c3f 	.word	0x08000c3f
 8000ba8:	08000c3f 	.word	0x08000c3f
 8000bac:	08000c3f 	.word	0x08000c3f
 8000bb0:	08000c3f 	.word	0x08000c3f
 8000bb4:	08000c3f 	.word	0x08000c3f
 8000bb8:	08000c3f 	.word	0x08000c3f
 8000bbc:	08000c3f 	.word	0x08000c3f
 8000bc0:	08000c3f 	.word	0x08000c3f
 8000bc4:	08000c3f 	.word	0x08000c3f
 8000bc8:	08000c3f 	.word	0x08000c3f
 8000bcc:	08000c3f 	.word	0x08000c3f
 8000bd0:	08000c3f 	.word	0x08000c3f
 8000bd4:	08000bed 	.word	0x08000bed
 8000bd8:	08000c01 	.word	0x08000c01
 8000bdc:	4a79      	ldr	r2, [pc, #484]	; (8000dc4 <HAL_GPIO_Init+0x2b4>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d013      	beq.n	8000c0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000be2:	e02c      	b.n	8000c3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	623b      	str	r3, [r7, #32]
          break;
 8000bea:	e029      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	623b      	str	r3, [r7, #32]
          break;
 8000bf4:	e024      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	3308      	adds	r3, #8
 8000bfc:	623b      	str	r3, [r7, #32]
          break;
 8000bfe:	e01f      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	330c      	adds	r3, #12
 8000c06:	623b      	str	r3, [r7, #32]
          break;
 8000c08:	e01a      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d102      	bne.n	8000c18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c12:	2304      	movs	r3, #4
 8000c14:	623b      	str	r3, [r7, #32]
          break;
 8000c16:	e013      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d105      	bne.n	8000c2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c20:	2308      	movs	r3, #8
 8000c22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	69fa      	ldr	r2, [r7, #28]
 8000c28:	611a      	str	r2, [r3, #16]
          break;
 8000c2a:	e009      	b.n	8000c40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	69fa      	ldr	r2, [r7, #28]
 8000c34:	615a      	str	r2, [r3, #20]
          break;
 8000c36:	e003      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
          break;
 8000c3c:	e000      	b.n	8000c40 <HAL_GPIO_Init+0x130>
          break;
 8000c3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	2bff      	cmp	r3, #255	; 0xff
 8000c44:	d801      	bhi.n	8000c4a <HAL_GPIO_Init+0x13a>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	e001      	b.n	8000c4e <HAL_GPIO_Init+0x13e>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	2bff      	cmp	r3, #255	; 0xff
 8000c54:	d802      	bhi.n	8000c5c <HAL_GPIO_Init+0x14c>
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	e002      	b.n	8000c62 <HAL_GPIO_Init+0x152>
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5e:	3b08      	subs	r3, #8
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	210f      	movs	r1, #15
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	401a      	ands	r2, r3
 8000c74:	6a39      	ldr	r1, [r7, #32]
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f000 80b1 	beq.w	8000df2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c90:	4b4d      	ldr	r3, [pc, #308]	; (8000dc8 <HAL_GPIO_Init+0x2b8>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a4c      	ldr	r2, [pc, #304]	; (8000dc8 <HAL_GPIO_Init+0x2b8>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b4a      	ldr	r3, [pc, #296]	; (8000dc8 <HAL_GPIO_Init+0x2b8>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ca8:	4a48      	ldr	r2, [pc, #288]	; (8000dcc <HAL_GPIO_Init+0x2bc>)
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	089b      	lsrs	r3, r3, #2
 8000cae:	3302      	adds	r3, #2
 8000cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	220f      	movs	r2, #15
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a40      	ldr	r2, [pc, #256]	; (8000dd0 <HAL_GPIO_Init+0x2c0>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d013      	beq.n	8000cfc <HAL_GPIO_Init+0x1ec>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a3f      	ldr	r2, [pc, #252]	; (8000dd4 <HAL_GPIO_Init+0x2c4>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d00d      	beq.n	8000cf8 <HAL_GPIO_Init+0x1e8>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a3e      	ldr	r2, [pc, #248]	; (8000dd8 <HAL_GPIO_Init+0x2c8>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d007      	beq.n	8000cf4 <HAL_GPIO_Init+0x1e4>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a3d      	ldr	r2, [pc, #244]	; (8000ddc <HAL_GPIO_Init+0x2cc>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d101      	bne.n	8000cf0 <HAL_GPIO_Init+0x1e0>
 8000cec:	2303      	movs	r3, #3
 8000cee:	e006      	b.n	8000cfe <HAL_GPIO_Init+0x1ee>
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	e004      	b.n	8000cfe <HAL_GPIO_Init+0x1ee>
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	e002      	b.n	8000cfe <HAL_GPIO_Init+0x1ee>
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e000      	b.n	8000cfe <HAL_GPIO_Init+0x1ee>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d00:	f002 0203 	and.w	r2, r2, #3
 8000d04:	0092      	lsls	r2, r2, #2
 8000d06:	4093      	lsls	r3, r2
 8000d08:	68fa      	ldr	r2, [r7, #12]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d0e:	492f      	ldr	r1, [pc, #188]	; (8000dcc <HAL_GPIO_Init+0x2bc>)
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	089b      	lsrs	r3, r3, #2
 8000d14:	3302      	adds	r3, #2
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d006      	beq.n	8000d36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d28:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	492c      	ldr	r1, [pc, #176]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	608b      	str	r3, [r1, #8]
 8000d34:	e006      	b.n	8000d44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d36:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d38:	689a      	ldr	r2, [r3, #8]
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	4928      	ldr	r1, [pc, #160]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d40:	4013      	ands	r3, r2
 8000d42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d006      	beq.n	8000d5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d50:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d52:	68da      	ldr	r2, [r3, #12]
 8000d54:	4922      	ldr	r1, [pc, #136]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	60cb      	str	r3, [r1, #12]
 8000d5c:	e006      	b.n	8000d6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d5e:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	43db      	mvns	r3, r3
 8000d66:	491e      	ldr	r1, [pc, #120]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d006      	beq.n	8000d86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d7a:	685a      	ldr	r2, [r3, #4]
 8000d7c:	4918      	ldr	r1, [pc, #96]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	604b      	str	r3, [r1, #4]
 8000d84:	e006      	b.n	8000d94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d86:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d88:	685a      	ldr	r2, [r3, #4]
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	4914      	ldr	r1, [pc, #80]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000d90:	4013      	ands	r3, r2
 8000d92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d021      	beq.n	8000de4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	490e      	ldr	r1, [pc, #56]	; (8000de0 <HAL_GPIO_Init+0x2d0>)
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	600b      	str	r3, [r1, #0]
 8000dac:	e021      	b.n	8000df2 <HAL_GPIO_Init+0x2e2>
 8000dae:	bf00      	nop
 8000db0:	10320000 	.word	0x10320000
 8000db4:	10310000 	.word	0x10310000
 8000db8:	10220000 	.word	0x10220000
 8000dbc:	10210000 	.word	0x10210000
 8000dc0:	10120000 	.word	0x10120000
 8000dc4:	10110000 	.word	0x10110000
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40010000 	.word	0x40010000
 8000dd0:	40010800 	.word	0x40010800
 8000dd4:	40010c00 	.word	0x40010c00
 8000dd8:	40011000 	.word	0x40011000
 8000ddc:	40011400 	.word	0x40011400
 8000de0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <HAL_GPIO_Init+0x304>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	4909      	ldr	r1, [pc, #36]	; (8000e14 <HAL_GPIO_Init+0x304>)
 8000dee:	4013      	ands	r3, r2
 8000df0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df4:	3301      	adds	r3, #1
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f47f ae8e 	bne.w	8000b24 <HAL_GPIO_Init+0x14>
  }
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	372c      	adds	r7, #44	; 0x2c
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr
 8000e14:	40010400 	.word	0x40010400

08000e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	807b      	strh	r3, [r7, #2]
 8000e24:	4613      	mov	r3, r2
 8000e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e28:	787b      	ldrb	r3, [r7, #1]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e2e:	887a      	ldrh	r2, [r7, #2]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e34:	e003      	b.n	8000e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e36:	887b      	ldrh	r3, [r7, #2]
 8000e38:	041a      	lsls	r2, r3, #16
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	611a      	str	r2, [r3, #16]
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e12b      	b.n	80010b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d106      	bne.n	8000e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff fb74 	bl	800055c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2224      	movs	r2, #36	; 0x24
 8000e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0201 	bic.w	r2, r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000eaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000eac:	f003 ffba 	bl	8004e24 <HAL_RCC_GetPCLK1Freq>
 8000eb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	4a81      	ldr	r2, [pc, #516]	; (80010bc <HAL_I2C_Init+0x274>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d807      	bhi.n	8000ecc <HAL_I2C_Init+0x84>
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4a80      	ldr	r2, [pc, #512]	; (80010c0 <HAL_I2C_Init+0x278>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	bf94      	ite	ls
 8000ec4:	2301      	movls	r3, #1
 8000ec6:	2300      	movhi	r3, #0
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	e006      	b.n	8000eda <HAL_I2C_Init+0x92>
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4a7d      	ldr	r2, [pc, #500]	; (80010c4 <HAL_I2C_Init+0x27c>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	bf94      	ite	ls
 8000ed4:	2301      	movls	r3, #1
 8000ed6:	2300      	movhi	r3, #0
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e0e7      	b.n	80010b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4a78      	ldr	r2, [pc, #480]	; (80010c8 <HAL_I2C_Init+0x280>)
 8000ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eea:	0c9b      	lsrs	r3, r3, #18
 8000eec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	430a      	orrs	r2, r1
 8000f00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6a1b      	ldr	r3, [r3, #32]
 8000f08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	4a6a      	ldr	r2, [pc, #424]	; (80010bc <HAL_I2C_Init+0x274>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d802      	bhi.n	8000f1c <HAL_I2C_Init+0xd4>
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	e009      	b.n	8000f30 <HAL_I2C_Init+0xe8>
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f22:	fb02 f303 	mul.w	r3, r2, r3
 8000f26:	4a69      	ldr	r2, [pc, #420]	; (80010cc <HAL_I2C_Init+0x284>)
 8000f28:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2c:	099b      	lsrs	r3, r3, #6
 8000f2e:	3301      	adds	r3, #1
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	6812      	ldr	r2, [r2, #0]
 8000f34:	430b      	orrs	r3, r1
 8000f36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000f42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	495c      	ldr	r1, [pc, #368]	; (80010bc <HAL_I2C_Init+0x274>)
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d819      	bhi.n	8000f84 <HAL_I2C_Init+0x13c>
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	1e59      	subs	r1, r3, #1
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f5e:	1c59      	adds	r1, r3, #1
 8000f60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000f64:	400b      	ands	r3, r1
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00a      	beq.n	8000f80 <HAL_I2C_Init+0x138>
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	1e59      	subs	r1, r3, #1
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f78:	3301      	adds	r3, #1
 8000f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f7e:	e051      	b.n	8001024 <HAL_I2C_Init+0x1dc>
 8000f80:	2304      	movs	r3, #4
 8000f82:	e04f      	b.n	8001024 <HAL_I2C_Init+0x1dc>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d111      	bne.n	8000fb0 <HAL_I2C_Init+0x168>
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	1e58      	subs	r0, r3, #1
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6859      	ldr	r1, [r3, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	440b      	add	r3, r1
 8000f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	bf0c      	ite	eq
 8000fa8:	2301      	moveq	r3, #1
 8000faa:	2300      	movne	r3, #0
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	e012      	b.n	8000fd6 <HAL_I2C_Init+0x18e>
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	1e58      	subs	r0, r3, #1
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6859      	ldr	r1, [r3, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	0099      	lsls	r1, r3, #2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	bf0c      	ite	eq
 8000fd0:	2301      	moveq	r3, #1
 8000fd2:	2300      	movne	r3, #0
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_I2C_Init+0x196>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e022      	b.n	8001024 <HAL_I2C_Init+0x1dc>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10e      	bne.n	8001004 <HAL_I2C_Init+0x1bc>
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	1e58      	subs	r0, r3, #1
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6859      	ldr	r1, [r3, #4]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	440b      	add	r3, r1
 8000ff4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001002:	e00f      	b.n	8001024 <HAL_I2C_Init+0x1dc>
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	1e58      	subs	r0, r3, #1
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6859      	ldr	r1, [r3, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	440b      	add	r3, r1
 8001012:	0099      	lsls	r1, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	fbb0 f3f3 	udiv	r3, r0, r3
 800101a:	3301      	adds	r3, #1
 800101c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001020:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	6809      	ldr	r1, [r1, #0]
 8001028:	4313      	orrs	r3, r2
 800102a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69da      	ldr	r2, [r3, #28]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a1b      	ldr	r3, [r3, #32]
 800103e:	431a      	orrs	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	430a      	orrs	r2, r1
 8001046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001052:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	6911      	ldr	r1, [r2, #16]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	68d2      	ldr	r2, [r2, #12]
 800105e:	4311      	orrs	r1, r2
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	6812      	ldr	r2, [r2, #0]
 8001064:	430b      	orrs	r3, r1
 8001066:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	695a      	ldr	r2, [r3, #20]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	430a      	orrs	r2, r1
 8001082:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 0201 	orr.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2220      	movs	r2, #32
 800109e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	000186a0 	.word	0x000186a0
 80010c0:	001e847f 	.word	0x001e847f
 80010c4:	003d08ff 	.word	0x003d08ff
 80010c8:	431bde83 	.word	0x431bde83
 80010cc:	10624dd3 	.word	0x10624dd3

080010d0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e2:	2b80      	cmp	r3, #128	; 0x80
 80010e4:	d103      	bne.n	80010ee <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  }
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	461a      	mov	r2, r3
 8001104:	460b      	mov	r3, r1
 8001106:	817b      	strh	r3, [r7, #10]
 8001108:	4613      	mov	r3, r2
 800110a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b20      	cmp	r3, #32
 800111a:	f040 8081 	bne.w	8001220 <HAL_I2C_Master_Transmit_IT+0x128>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800111e:	4b43      	ldr	r3, [pc, #268]	; (800122c <HAL_I2C_Master_Transmit_IT+0x134>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	08db      	lsrs	r3, r3, #3
 8001124:	4a42      	ldr	r2, [pc, #264]	; (8001230 <HAL_I2C_Master_Transmit_IT+0x138>)
 8001126:	fba2 2303 	umull	r2, r3, r2, r3
 800112a:	0a1a      	lsrs	r2, r3, #8
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	009a      	lsls	r2, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3b01      	subs	r3, #1
 800113c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d112      	bne.n	800116a <HAL_I2C_Master_Transmit_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2200      	movs	r2, #0
 8001148:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2220      	movs	r2, #32
 800114e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f043 0220 	orr.w	r2, r3, #32
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8001166:	2302      	movs	r3, #2
 8001168:	e05b      	b.n	8001222 <HAL_I2C_Master_Transmit_IT+0x12a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b02      	cmp	r3, #2
 8001176:	d0df      	beq.n	8001138 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800117e:	2b01      	cmp	r3, #1
 8001180:	d101      	bne.n	8001186 <HAL_I2C_Master_Transmit_IT+0x8e>
 8001182:	2302      	movs	r3, #2
 8001184:	e04d      	b.n	8001222 <HAL_I2C_Master_Transmit_IT+0x12a>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b01      	cmp	r3, #1
 800119a:	d007      	beq.n	80011ac <HAL_I2C_Master_Transmit_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0201 	orr.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2221      	movs	r2, #33	; 0x21
 80011c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2210      	movs	r2, #16
 80011c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2200      	movs	r2, #0
 80011d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	893a      	ldrh	r2, [r7, #8]
 80011dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <HAL_I2C_Master_Transmit_IT+0x13c>)
 80011ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80011ee:	897a      	ldrh	r2, [r7, #10]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800120a:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800121a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800121c:	2300      	movs	r3, #0
 800121e:	e000      	b.n	8001222 <HAL_I2C_Master_Transmit_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001220:	2302      	movs	r3, #2
  }
}
 8001222:	4618      	mov	r0, r3
 8001224:	371c      	adds	r7, #28
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	20000000 	.word	0x20000000
 8001230:	14f8b589 	.word	0x14f8b589
 8001234:	ffff0000 	.word	0xffff0000

08001238 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001250:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001258:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001260:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	2b10      	cmp	r3, #16
 8001266:	d003      	beq.n	8001270 <HAL_I2C_EV_IRQHandler+0x38>
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	2b40      	cmp	r3, #64	; 0x40
 800126c:	f040 80b1 	bne.w	80013d2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10d      	bne.n	80012a6 <HAL_I2C_EV_IRQHandler+0x6e>
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001290:	d003      	beq.n	800129a <HAL_I2C_EV_IRQHandler+0x62>
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001298:	d101      	bne.n	800129e <HAL_I2C_EV_IRQHandler+0x66>
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <HAL_I2C_EV_IRQHandler+0x68>
 800129e:	2300      	movs	r3, #0
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	f000 8114 	beq.w	80014ce <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00b      	beq.n	80012c8 <HAL_I2C_EV_IRQHandler+0x90>
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d006      	beq.n	80012c8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f001 fc60 	bl	8002b80 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 fd60 	bl	8001d86 <I2C_Master_SB>
 80012c6:	e083      	b.n	80013d0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d008      	beq.n	80012e4 <HAL_I2C_EV_IRQHandler+0xac>
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 fdd7 	bl	8001e90 <I2C_Master_ADD10>
 80012e2:	e075      	b.n	80013d0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d008      	beq.n	8001300 <HAL_I2C_EV_IRQHandler+0xc8>
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f000 fdf2 	bl	8001ee2 <I2C_Master_ADDR>
 80012fe:	e067      	b.n	80013d0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	2b00      	cmp	r3, #0
 8001308:	d036      	beq.n	8001378 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001314:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001318:	f000 80db 	beq.w	80014d2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00d      	beq.n	8001342 <HAL_I2C_EV_IRQHandler+0x10a>
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800132c:	2b00      	cmp	r3, #0
 800132e:	d008      	beq.n	8001342 <HAL_I2C_EV_IRQHandler+0x10a>
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0304 	and.w	r3, r3, #4
 8001336:	2b00      	cmp	r3, #0
 8001338:	d103      	bne.n	8001342 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 f9d4 	bl	80016e8 <I2C_MasterTransmit_TXE>
 8001340:	e046      	b.n	80013d0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 80c2 	beq.w	80014d2 <HAL_I2C_EV_IRQHandler+0x29a>
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 80bc 	beq.w	80014d2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800135a:	7bbb      	ldrb	r3, [r7, #14]
 800135c:	2b21      	cmp	r3, #33	; 0x21
 800135e:	d103      	bne.n	8001368 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 fa5d 	bl	8001820 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001366:	e0b4      	b.n	80014d2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	2b40      	cmp	r3, #64	; 0x40
 800136c:	f040 80b1 	bne.w	80014d2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 facb 	bl	800190c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001376:	e0ac      	b.n	80014d2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001386:	f000 80a4 	beq.w	80014d2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00d      	beq.n	80013b0 <HAL_I2C_EV_IRQHandler+0x178>
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139a:	2b00      	cmp	r3, #0
 800139c:	d008      	beq.n	80013b0 <HAL_I2C_EV_IRQHandler+0x178>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d103      	bne.n	80013b0 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 fb47 	bl	8001a3c <I2C_MasterReceive_RXNE>
 80013ae:	e00f      	b.n	80013d0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 808b 	beq.w	80014d2 <HAL_I2C_EV_IRQHandler+0x29a>
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 8085 	beq.w	80014d2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 fbf2 	bl	8001bb2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013ce:	e080      	b.n	80014d2 <HAL_I2C_EV_IRQHandler+0x29a>
 80013d0:	e07f      	b.n	80014d2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d004      	beq.n	80013e4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	e007      	b.n	80013f4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d011      	beq.n	8001422 <HAL_I2C_EV_IRQHandler+0x1ea>
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00c      	beq.n	8001422 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001418:	69b9      	ldr	r1, [r7, #24]
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 ffb8 	bl	8002390 <I2C_Slave_ADDR>
 8001420:	e05a      	b.n	80014d8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	f003 0310 	and.w	r3, r3, #16
 8001428:	2b00      	cmp	r3, #0
 800142a:	d008      	beq.n	800143e <HAL_I2C_EV_IRQHandler+0x206>
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 fff2 	bl	8002420 <I2C_Slave_STOPF>
 800143c:	e04c      	b.n	80014d8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800143e:	7bbb      	ldrb	r3, [r7, #14]
 8001440:	2b21      	cmp	r3, #33	; 0x21
 8001442:	d002      	beq.n	800144a <HAL_I2C_EV_IRQHandler+0x212>
 8001444:	7bbb      	ldrb	r3, [r7, #14]
 8001446:	2b29      	cmp	r3, #41	; 0x29
 8001448:	d120      	bne.n	800148c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00d      	beq.n	8001470 <HAL_I2C_EV_IRQHandler+0x238>
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800145a:	2b00      	cmp	r3, #0
 800145c:	d008      	beq.n	8001470 <HAL_I2C_EV_IRQHandler+0x238>
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d103      	bne.n	8001470 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 fed5 	bl	8002218 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800146e:	e032      	b.n	80014d6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	2b00      	cmp	r3, #0
 8001478:	d02d      	beq.n	80014d6 <HAL_I2C_EV_IRQHandler+0x29e>
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001480:	2b00      	cmp	r3, #0
 8001482:	d028      	beq.n	80014d6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 ff04 	bl	8002292 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800148a:	e024      	b.n	80014d6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00d      	beq.n	80014b2 <HAL_I2C_EV_IRQHandler+0x27a>
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800149c:	2b00      	cmp	r3, #0
 800149e:	d008      	beq.n	80014b2 <HAL_I2C_EV_IRQHandler+0x27a>
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d103      	bne.n	80014b2 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 ff11 	bl	80022d2 <I2C_SlaveReceive_RXNE>
 80014b0:	e012      	b.n	80014d8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00d      	beq.n	80014d8 <HAL_I2C_EV_IRQHandler+0x2a0>
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d008      	beq.n	80014d8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 ff41 	bl	800234e <I2C_SlaveReceive_BTF>
 80014cc:	e004      	b.n	80014d8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80014ce:	bf00      	nop
 80014d0:	e002      	b.n	80014d8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014d2:	bf00      	nop
 80014d4:	e000      	b.n	80014d8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80014d6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b08a      	sub	sp, #40	; 0x28
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001500:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001502:	6a3b      	ldr	r3, [r7, #32]
 8001504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d015      	beq.n	8001538 <HAL_I2C_ER_IRQHandler+0x5a>
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001512:	2b00      	cmp	r3, #0
 8001514:	d010      	beq.n	8001538 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001526:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001536:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00d      	beq.n	800155e <HAL_I2C_ER_IRQHandler+0x80>
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001548:	2b00      	cmp	r3, #0
 800154a:	d008      	beq.n	800155e <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	f043 0302 	orr.w	r3, r3, #2
 8001552:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800155c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800155e:	6a3b      	ldr	r3, [r7, #32]
 8001560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001564:	2b00      	cmp	r3, #0
 8001566:	d03e      	beq.n	80015e6 <HAL_I2C_ER_IRQHandler+0x108>
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156e:	2b00      	cmp	r3, #0
 8001570:	d039      	beq.n	80015e6 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8001572:	7efb      	ldrb	r3, [r7, #27]
 8001574:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800157a:	b29b      	uxth	r3, r3
 800157c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001584:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800158c:	7ebb      	ldrb	r3, [r7, #26]
 800158e:	2b20      	cmp	r3, #32
 8001590:	d112      	bne.n	80015b8 <HAL_I2C_ER_IRQHandler+0xda>
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10f      	bne.n	80015b8 <HAL_I2C_ER_IRQHandler+0xda>
 8001598:	7cfb      	ldrb	r3, [r7, #19]
 800159a:	2b21      	cmp	r3, #33	; 0x21
 800159c:	d008      	beq.n	80015b0 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800159e:	7cfb      	ldrb	r3, [r7, #19]
 80015a0:	2b29      	cmp	r3, #41	; 0x29
 80015a2:	d005      	beq.n	80015b0 <HAL_I2C_ER_IRQHandler+0xd2>
 80015a4:	7cfb      	ldrb	r3, [r7, #19]
 80015a6:	2b28      	cmp	r3, #40	; 0x28
 80015a8:	d106      	bne.n	80015b8 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2b21      	cmp	r3, #33	; 0x21
 80015ae:	d103      	bne.n	80015b8 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f001 f865 	bl	8002680 <I2C_Slave_AF>
 80015b6:	e016      	b.n	80015e6 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80015c0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	f043 0304 	orr.w	r3, r3, #4
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80015ca:	7efb      	ldrb	r3, [r7, #27]
 80015cc:	2b10      	cmp	r3, #16
 80015ce:	d002      	beq.n	80015d6 <HAL_I2C_ER_IRQHandler+0xf8>
 80015d0:	7efb      	ldrb	r3, [r7, #27]
 80015d2:	2b40      	cmp	r3, #64	; 0x40
 80015d4:	d107      	bne.n	80015e6 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015e4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80015e6:	6a3b      	ldr	r3, [r7, #32]
 80015e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00d      	beq.n	800160c <HAL_I2C_ER_IRQHandler+0x12e>
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d008      	beq.n	800160c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	f043 0308 	orr.w	r3, r3, #8
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800160a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	2b00      	cmp	r3, #0
 8001610:	d008      	beq.n	8001624 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f001 f8a2 	bl	8002768 <I2C_ITError>
  }
}
 8001624:	bf00      	nop
 8001626:	3728      	adds	r7, #40	; 0x28
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr

0800163e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr

08001662 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	70fb      	strb	r3, [r7, #3]
 8001680:	4613      	mov	r3, r2
 8001682:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr

0800168e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170a:	2b00      	cmp	r3, #0
 800170c:	d150      	bne.n	80017b0 <I2C_MasterTransmit_TXE+0xc8>
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	2b21      	cmp	r3, #33	; 0x21
 8001712:	d14d      	bne.n	80017b0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	2b08      	cmp	r3, #8
 8001718:	d01d      	beq.n	8001756 <I2C_MasterTransmit_TXE+0x6e>
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	2b20      	cmp	r3, #32
 800171e:	d01a      	beq.n	8001756 <I2C_MasterTransmit_TXE+0x6e>
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001726:	d016      	beq.n	8001756 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001736:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2211      	movs	r2, #17
 800173c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2220      	movs	r2, #32
 800174a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ff6c 	bl	800162c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001754:	e060      	b.n	8001818 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001764:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001774:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2220      	movs	r2, #32
 8001780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b40      	cmp	r3, #64	; 0x40
 800178e:	d107      	bne.n	80017a0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff81 	bl	80016a0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800179e:	e03b      	b.n	8001818 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff3f 	bl	800162c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80017ae:	e033      	b.n	8001818 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	2b21      	cmp	r3, #33	; 0x21
 80017b4:	d005      	beq.n	80017c2 <I2C_MasterTransmit_TXE+0xda>
 80017b6:	7bbb      	ldrb	r3, [r7, #14]
 80017b8:	2b40      	cmp	r3, #64	; 0x40
 80017ba:	d12d      	bne.n	8001818 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	2b22      	cmp	r3, #34	; 0x22
 80017c0:	d12a      	bne.n	8001818 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d108      	bne.n	80017de <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017da:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80017dc:	e01c      	b.n	8001818 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b40      	cmp	r3, #64	; 0x40
 80017e8:	d103      	bne.n	80017f2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f88e 	bl	800190c <I2C_MemoryTransmit_TXE_BTF>
}
 80017f0:	e012      	b.n	8001818 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	781a      	ldrb	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800180c:	b29b      	uxth	r3, r3
 800180e:	3b01      	subs	r3, #1
 8001810:	b29a      	uxth	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001816:	e7ff      	b.n	8001818 <I2C_MasterTransmit_TXE+0x130>
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b21      	cmp	r3, #33	; 0x21
 8001838:	d164      	bne.n	8001904 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800183e:	b29b      	uxth	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	d012      	beq.n	800186a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	781a      	ldrb	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185e:	b29b      	uxth	r3, r3
 8001860:	3b01      	subs	r3, #1
 8001862:	b29a      	uxth	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001868:	e04c      	b.n	8001904 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2b08      	cmp	r3, #8
 800186e:	d01d      	beq.n	80018ac <I2C_MasterTransmit_BTF+0x8c>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2b20      	cmp	r3, #32
 8001874:	d01a      	beq.n	80018ac <I2C_MasterTransmit_BTF+0x8c>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800187c:	d016      	beq.n	80018ac <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800188c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2211      	movs	r2, #17
 8001892:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2220      	movs	r2, #32
 80018a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff fec1 	bl	800162c <HAL_I2C_MasterTxCpltCallback>
}
 80018aa:	e02b      	b.n	8001904 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80018ba:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ca:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2220      	movs	r2, #32
 80018d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b40      	cmp	r3, #64	; 0x40
 80018e4:	d107      	bne.n	80018f6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff fed6 	bl	80016a0 <HAL_I2C_MemTxCpltCallback>
}
 80018f4:	e006      	b.n	8001904 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fe94 	bl	800162c <HAL_I2C_MasterTxCpltCallback>
}
 8001904:	bf00      	nop
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800191a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001920:	2b00      	cmp	r3, #0
 8001922:	d11d      	bne.n	8001960 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001928:	2b01      	cmp	r3, #1
 800192a:	d10b      	bne.n	8001944 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001930:	b2da      	uxtb	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800193c:	1c9a      	adds	r2, r3, #2
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001942:	e077      	b.n	8001a34 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001948:	b29b      	uxth	r3, r3
 800194a:	121b      	asrs	r3, r3, #8
 800194c:	b2da      	uxtb	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001958:	1c5a      	adds	r2, r3, #1
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800195e:	e069      	b.n	8001a34 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001964:	2b01      	cmp	r3, #1
 8001966:	d10b      	bne.n	8001980 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800196c:	b2da      	uxtb	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800197e:	e059      	b.n	8001a34 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001984:	2b02      	cmp	r3, #2
 8001986:	d152      	bne.n	8001a2e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	2b22      	cmp	r3, #34	; 0x22
 800198c:	d10d      	bne.n	80019aa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800199c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019a2:	1c5a      	adds	r2, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80019a8:	e044      	b.n	8001a34 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d015      	beq.n	80019e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	2b21      	cmp	r3, #33	; 0x21
 80019b8:	d112      	bne.n	80019e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	3b01      	subs	r3, #1
 80019d8:	b29a      	uxth	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80019de:	e029      	b.n	8001a34 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d124      	bne.n	8001a34 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	2b21      	cmp	r3, #33	; 0x21
 80019ee:	d121      	bne.n	8001a34 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80019fe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a0e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2220      	movs	r2, #32
 8001a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff fe3a 	bl	80016a0 <HAL_I2C_MemTxCpltCallback>
}
 8001a2c:	e002      	b.n	8001a34 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff fb4e 	bl	80010d0 <I2C_Flush_DR>
}
 8001a34:	bf00      	nop
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b22      	cmp	r3, #34	; 0x22
 8001a4e:	f040 80ac 	bne.w	8001baa <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d921      	bls.n	8001aa4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	691a      	ldr	r2, [r3, #16]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	f040 808c 	bne.w	8001baa <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aa0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001aa2:	e082      	b.n	8001baa <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d075      	beq.n	8001b98 <I2C_MasterReceive_RXNE+0x15c>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d002      	beq.n	8001ab8 <I2C_MasterReceive_RXNE+0x7c>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d16f      	bne.n	8001b98 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f001 f82f 	bl	8002b1c <I2C_WaitOnSTOPRequestThroughIT>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d142      	bne.n	8001b4a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ad2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ae2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	691a      	ldr	r2, [r3, #16]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	3b01      	subs	r3, #1
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b40      	cmp	r3, #64	; 0x40
 8001b1c:	d10a      	bne.n	8001b34 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff fdc0 	bl	80016b2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001b32:	e03a      	b.n	8001baa <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2212      	movs	r2, #18
 8001b40:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff fd7b 	bl	800163e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001b48:	e02f      	b.n	8001baa <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b58:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fd97 	bl	80016c4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001b96:	e008      	b.n	8001baa <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ba6:	605a      	str	r2, [r3, #4]
}
 8001ba8:	e7ff      	b.n	8001baa <I2C_MasterReceive_RXNE+0x16e>
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b084      	sub	sp, #16
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbe:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d11b      	bne.n	8001c02 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bd8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001c00:	e0bd      	b.n	8001d7e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	d129      	bne.n	8001c60 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c1a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d00a      	beq.n	8001c38 <I2C_MasterReceive_BTF+0x86>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d007      	beq.n	8001c38 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c36:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691a      	ldr	r2, [r3, #16]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001c5e:	e08e      	b.n	8001d7e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d176      	bne.n	8001d58 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d002      	beq.n	8001c76 <I2C_MasterReceive_BTF+0xc4>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2b10      	cmp	r3, #16
 8001c74:	d108      	bne.n	8001c88 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	e019      	b.n	8001cbc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d002      	beq.n	8001c94 <I2C_MasterReceive_BTF+0xe2>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d108      	bne.n	8001ca6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	e00a      	b.n	8001cbc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2b10      	cmp	r3, #16
 8001caa:	d007      	beq.n	8001cbc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691a      	ldr	r2, [r3, #16]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	1c5a      	adds	r2, r3, #1
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	3b01      	subs	r3, #1
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001d16:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b40      	cmp	r3, #64	; 0x40
 8001d2a:	d10a      	bne.n	8001d42 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff fcb9 	bl	80016b2 <HAL_I2C_MemRxCpltCallback>
}
 8001d40:	e01d      	b.n	8001d7e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2212      	movs	r2, #18
 8001d4e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff fc74 	bl	800163e <HAL_I2C_MasterRxCpltCallback>
}
 8001d56:	e012      	b.n	8001d7e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b40      	cmp	r3, #64	; 0x40
 8001d98:	d117      	bne.n	8001dca <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	461a      	mov	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001db2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001db4:	e067      	b.n	8001e86 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	611a      	str	r2, [r3, #16]
}
 8001dc8:	e05d      	b.n	8001e86 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dd2:	d133      	bne.n	8001e3c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b21      	cmp	r3, #33	; 0x21
 8001dde:	d109      	bne.n	8001df4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001df0:	611a      	str	r2, [r3, #16]
 8001df2:	e008      	b.n	8001e06 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d004      	beq.n	8001e18 <I2C_Master_SB+0x92>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d108      	bne.n	8001e2a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d032      	beq.n	8001e86 <I2C_Master_SB+0x100>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d02d      	beq.n	8001e86 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e38:	605a      	str	r2, [r3, #4]
}
 8001e3a:	e024      	b.n	8001e86 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10e      	bne.n	8001e62 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	11db      	asrs	r3, r3, #7
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	f003 0306 	and.w	r3, r3, #6
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	f063 030f 	orn	r3, r3, #15
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	611a      	str	r2, [r3, #16]
}
 8001e60:	e011      	b.n	8001e86 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d10d      	bne.n	8001e86 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	11db      	asrs	r3, r3, #7
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f003 0306 	and.w	r3, r3, #6
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	f063 030e 	orn	r3, r3, #14
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	611a      	str	r2, [r3, #16]
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d004      	beq.n	8001eb6 <I2C_Master_ADD10+0x26>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d108      	bne.n	8001ec8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00c      	beq.n	8001ed8 <I2C_Master_ADD10+0x48>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d007      	beq.n	8001ed8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ed6:	605a      	str	r2, [r3, #4]
  }
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr

08001ee2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b091      	sub	sp, #68	; 0x44
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ef0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b22      	cmp	r3, #34	; 0x22
 8001f0a:	f040 8174 	bne.w	80021f6 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10f      	bne.n	8001f36 <I2C_Master_ADDR+0x54>
 8001f16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f1a:	2b40      	cmp	r3, #64	; 0x40
 8001f1c:	d10b      	bne.n	8001f36 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f1e:	2300      	movs	r3, #0
 8001f20:	633b      	str	r3, [r7, #48]	; 0x30
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	633b      	str	r3, [r7, #48]	; 0x30
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	633b      	str	r3, [r7, #48]	; 0x30
 8001f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f34:	e16b      	b.n	800220e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d11d      	bne.n	8001f7a <I2C_Master_ADDR+0x98>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001f46:	d118      	bne.n	8001f7a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f6c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	651a      	str	r2, [r3, #80]	; 0x50
 8001f78:	e149      	b.n	800220e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d113      	bne.n	8001fac <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f84:	2300      	movs	r3, #0
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f98:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	e120      	b.n	80021ee <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	f040 808a 	bne.w	80020cc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fbe:	d137      	bne.n	8002030 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fce:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fde:	d113      	bne.n	8002008 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fee:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	e0f2      	b.n	80021ee <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002008:	2300      	movs	r3, #0
 800200a:	623b      	str	r3, [r7, #32]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	623b      	str	r3, [r7, #32]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	623b      	str	r3, [r7, #32]
 800201c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	e0de      	b.n	80021ee <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002032:	2b08      	cmp	r3, #8
 8002034:	d02e      	beq.n	8002094 <I2C_Master_ADDR+0x1b2>
 8002036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002038:	2b20      	cmp	r3, #32
 800203a:	d02b      	beq.n	8002094 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800203c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203e:	2b12      	cmp	r3, #18
 8002040:	d102      	bne.n	8002048 <I2C_Master_ADDR+0x166>
 8002042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002044:	2b01      	cmp	r3, #1
 8002046:	d125      	bne.n	8002094 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800204a:	2b04      	cmp	r3, #4
 800204c:	d00e      	beq.n	800206c <I2C_Master_ADDR+0x18a>
 800204e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002050:	2b02      	cmp	r3, #2
 8002052:	d00b      	beq.n	800206c <I2C_Master_ADDR+0x18a>
 8002054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002056:	2b10      	cmp	r3, #16
 8002058:	d008      	beq.n	800206c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	e007      	b.n	800207c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800207a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800207c:	2300      	movs	r3, #0
 800207e:	61fb      	str	r3, [r7, #28]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	61fb      	str	r3, [r7, #28]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	61fb      	str	r3, [r7, #28]
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	e0ac      	b.n	80021ee <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020a2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020a4:	2300      	movs	r3, #0
 80020a6:	61bb      	str	r3, [r7, #24]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	61bb      	str	r3, [r7, #24]
 80020b8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	e090      	b.n	80021ee <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d158      	bne.n	8002188 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80020d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d021      	beq.n	8002120 <I2C_Master_ADDR+0x23e>
 80020dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d01e      	beq.n	8002120 <I2C_Master_ADDR+0x23e>
 80020e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e4:	2b10      	cmp	r3, #16
 80020e6:	d01b      	beq.n	8002120 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020f6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	e012      	b.n	8002146 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800212e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002130:	2300      	movs	r3, #0
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002154:	d14b      	bne.n	80021ee <I2C_Master_ADDR+0x30c>
 8002156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002158:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800215c:	d00b      	beq.n	8002176 <I2C_Master_ADDR+0x294>
 800215e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002160:	2b01      	cmp	r3, #1
 8002162:	d008      	beq.n	8002176 <I2C_Master_ADDR+0x294>
 8002164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002166:	2b08      	cmp	r3, #8
 8002168:	d005      	beq.n	8002176 <I2C_Master_ADDR+0x294>
 800216a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216c:	2b10      	cmp	r3, #16
 800216e:	d002      	beq.n	8002176 <I2C_Master_ADDR+0x294>
 8002170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002172:	2b20      	cmp	r3, #32
 8002174:	d13b      	bne.n	80021ee <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	e032      	b.n	80021ee <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002196:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021a6:	d117      	bne.n	80021d8 <I2C_Master_ADDR+0x2f6>
 80021a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021ae:	d00b      	beq.n	80021c8 <I2C_Master_ADDR+0x2e6>
 80021b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d008      	beq.n	80021c8 <I2C_Master_ADDR+0x2e6>
 80021b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d005      	beq.n	80021c8 <I2C_Master_ADDR+0x2e6>
 80021bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021be:	2b10      	cmp	r3, #16
 80021c0:	d002      	beq.n	80021c8 <I2C_Master_ADDR+0x2e6>
 80021c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c4:	2b20      	cmp	r3, #32
 80021c6:	d107      	bne.n	80021d8 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021d6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80021f4:	e00b      	b.n	800220e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021f6:	2300      	movs	r3, #0
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]
}
 800220c:	e7ff      	b.n	800220e <I2C_Master_ADDR+0x32c>
 800220e:	bf00      	nop
 8002210:	3744      	adds	r7, #68	; 0x44
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002226:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222c:	b29b      	uxth	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d02b      	beq.n	800228a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	781a      	ldrb	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224c:	b29b      	uxth	r3, r3
 800224e:	3b01      	subs	r3, #1
 8002250:	b29a      	uxth	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225a:	b29b      	uxth	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d114      	bne.n	800228a <I2C_SlaveTransmit_TXE+0x72>
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	2b29      	cmp	r3, #41	; 0x29
 8002264:	d111      	bne.n	800228a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002274:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2221      	movs	r2, #33	; 0x21
 800227a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2228      	movs	r2, #40	; 0x28
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff f9e3 	bl	8001650 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229e:	b29b      	uxth	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d011      	beq.n	80022c8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	781a      	ldrb	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr

080022d2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b084      	sub	sp, #16
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d02c      	beq.n	8002346 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002308:	b29b      	uxth	r3, r3
 800230a:	3b01      	subs	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002316:	b29b      	uxth	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d114      	bne.n	8002346 <I2C_SlaveReceive_RXNE+0x74>
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	2b2a      	cmp	r3, #42	; 0x2a
 8002320:	d111      	bne.n	8002346 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002330:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2222      	movs	r2, #34	; 0x22
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2228      	movs	r2, #40	; 0x28
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff f98e 	bl	8001662 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235a:	b29b      	uxth	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d012      	beq.n	8002386 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237c:	b29b      	uxth	r3, r3
 800237e:	3b01      	subs	r3, #1
 8002380:	b29a      	uxth	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800239a:	2300      	movs	r3, #0
 800239c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80023aa:	2b28      	cmp	r3, #40	; 0x28
 80023ac:	d125      	bne.n	80023fa <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023bc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d103      	bne.n	80023de <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	81bb      	strh	r3, [r7, #12]
 80023dc:	e002      	b.n	80023e4 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80023ec:	89ba      	ldrh	r2, [r7, #12]
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	4619      	mov	r1, r3
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff f93e 	bl	8001674 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80023f8:	e00e      	b.n	8002418 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002418:	bf00      	nop
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800243e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002440:	2300      	movs	r3, #0
 8002442:	60bb      	str	r3, [r7, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800246c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800247c:	d172      	bne.n	8002564 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	2b22      	cmp	r3, #34	; 0x22
 8002482:	d002      	beq.n	800248a <I2C_Slave_STOPF+0x6a>
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	2b2a      	cmp	r3, #42	; 0x2a
 8002488:	d135      	bne.n	80024f6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	b29a      	uxth	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249c:	b29b      	uxth	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d005      	beq.n	80024ae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f043 0204 	orr.w	r2, r3, #4
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe fb16 	bl	8000af4 <HAL_DMA_GetState>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d049      	beq.n	8002562 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d2:	4a69      	ldr	r2, [pc, #420]	; (8002678 <I2C_Slave_STOPF+0x258>)
 80024d4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fa92 	bl	8000a04 <HAL_DMA_Abort_IT>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d03d      	beq.n	8002562 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024f0:	4610      	mov	r0, r2
 80024f2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80024f4:	e035      	b.n	8002562 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	b29a      	uxth	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002508:	b29b      	uxth	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f043 0204 	orr.w	r2, r3, #4
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002528:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fae0 	bl	8000af4 <HAL_DMA_GetState>
 8002534:	4603      	mov	r3, r0
 8002536:	2b01      	cmp	r3, #1
 8002538:	d014      	beq.n	8002564 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253e:	4a4e      	ldr	r2, [pc, #312]	; (8002678 <I2C_Slave_STOPF+0x258>)
 8002540:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002546:	4618      	mov	r0, r3
 8002548:	f7fe fa5c 	bl	8000a04 <HAL_DMA_Abort_IT>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d008      	beq.n	8002564 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800255c:	4610      	mov	r0, r2
 800255e:	4798      	blx	r3
 8002560:	e000      	b.n	8002564 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002562:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d03e      	beq.n	80025ec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b04      	cmp	r3, #4
 800257a:	d112      	bne.n	80025a2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002598:	b29b      	uxth	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ac:	2b40      	cmp	r3, #64	; 0x40
 80025ae:	d112      	bne.n	80025d6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f043 0204 	orr.w	r2, r3, #4
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f8b7 	bl	8002768 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80025fa:	e039      	b.n	8002670 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	2b2a      	cmp	r3, #42	; 0x2a
 8002600:	d109      	bne.n	8002616 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2228      	movs	r2, #40	; 0x28
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff f826 	bl	8001662 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b28      	cmp	r3, #40	; 0x28
 8002620:	d111      	bne.n	8002646 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a15      	ldr	r2, [pc, #84]	; (800267c <I2C_Slave_STOPF+0x25c>)
 8002626:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2220      	movs	r2, #32
 8002632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff f825 	bl	800168e <HAL_I2C_ListenCpltCallback>
}
 8002644:	e014      	b.n	8002670 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	2b22      	cmp	r3, #34	; 0x22
 800264c:	d002      	beq.n	8002654 <I2C_Slave_STOPF+0x234>
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	2b22      	cmp	r3, #34	; 0x22
 8002652:	d10d      	bne.n	8002670 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7fe fff9 	bl	8001662 <HAL_I2C_SlaveRxCpltCallback>
}
 8002670:	bf00      	nop
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	080029cd 	.word	0x080029cd
 800267c:	ffff0000 	.word	0xffff0000

08002680 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800268e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2b08      	cmp	r3, #8
 800269a:	d002      	beq.n	80026a2 <I2C_Slave_AF+0x22>
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b20      	cmp	r3, #32
 80026a0:	d129      	bne.n	80026f6 <I2C_Slave_AF+0x76>
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	2b28      	cmp	r3, #40	; 0x28
 80026a6:	d126      	bne.n	80026f6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a2e      	ldr	r2, [pc, #184]	; (8002764 <I2C_Slave_AF+0xe4>)
 80026ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026bc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026c6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2220      	movs	r2, #32
 80026e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7fe ffcd 	bl	800168e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80026f4:	e031      	b.n	800275a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
 80026f8:	2b21      	cmp	r3, #33	; 0x21
 80026fa:	d129      	bne.n	8002750 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a19      	ldr	r2, [pc, #100]	; (8002764 <I2C_Slave_AF+0xe4>)
 8002700:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2221      	movs	r2, #33	; 0x21
 8002706:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2220      	movs	r2, #32
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002726:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002730:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002740:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fe fcc4 	bl	80010d0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7fe ff81 	bl	8001650 <HAL_I2C_SlaveTxCpltCallback>
}
 800274e:	e004      	b.n	800275a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002758:	615a      	str	r2, [r3, #20]
}
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	ffff0000 	.word	0xffff0000

08002768 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002776:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800277e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002780:	7bbb      	ldrb	r3, [r7, #14]
 8002782:	2b10      	cmp	r3, #16
 8002784:	d002      	beq.n	800278c <I2C_ITError+0x24>
 8002786:	7bbb      	ldrb	r3, [r7, #14]
 8002788:	2b40      	cmp	r3, #64	; 0x40
 800278a:	d10a      	bne.n	80027a2 <I2C_ITError+0x3a>
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	2b22      	cmp	r3, #34	; 0x22
 8002790:	d107      	bne.n	80027a2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80027a8:	2b28      	cmp	r3, #40	; 0x28
 80027aa:	d107      	bne.n	80027bc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2228      	movs	r2, #40	; 0x28
 80027b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80027ba:	e015      	b.n	80027e8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027ca:	d00a      	beq.n	80027e2 <I2C_ITError+0x7a>
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	2b60      	cmp	r3, #96	; 0x60
 80027d0:	d007      	beq.n	80027e2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2220      	movs	r2, #32
 80027d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027f6:	d162      	bne.n	80028be <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002806:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b01      	cmp	r3, #1
 8002814:	d020      	beq.n	8002858 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281a:	4a6a      	ldr	r2, [pc, #424]	; (80029c4 <I2C_ITError+0x25c>)
 800281c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe f8ee 	bl	8000a04 <HAL_DMA_Abort_IT>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 8089 	beq.w	8002942 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0201 	bic.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002852:	4610      	mov	r0, r2
 8002854:	4798      	blx	r3
 8002856:	e074      	b.n	8002942 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285c:	4a59      	ldr	r2, [pc, #356]	; (80029c4 <I2C_ITError+0x25c>)
 800285e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002864:	4618      	mov	r0, r3
 8002866:	f7fe f8cd 	bl	8000a04 <HAL_DMA_Abort_IT>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d068      	beq.n	8002942 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287a:	2b40      	cmp	r3, #64	; 0x40
 800287c:	d10b      	bne.n	8002896 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0201 	bic.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028b8:	4610      	mov	r0, r2
 80028ba:	4798      	blx	r3
 80028bc:	e041      	b.n	8002942 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b60      	cmp	r3, #96	; 0x60
 80028c8:	d125      	bne.n	8002916 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2220      	movs	r2, #32
 80028ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e2:	2b40      	cmp	r3, #64	; 0x40
 80028e4:	d10b      	bne.n	80028fe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0201 	bic.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7fe fee1 	bl	80016d6 <HAL_I2C_AbortCpltCallback>
 8002914:	e015      	b.n	8002942 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002920:	2b40      	cmp	r3, #64	; 0x40
 8002922:	d10b      	bne.n	800293c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691a      	ldr	r2, [r3, #16]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7fe fec1 	bl	80016c4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10e      	bne.n	8002970 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002958:	2b00      	cmp	r3, #0
 800295a:	d109      	bne.n	8002970 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002962:	2b00      	cmp	r3, #0
 8002964:	d104      	bne.n	8002970 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800296c:	2b00      	cmp	r3, #0
 800296e:	d007      	beq.n	8002980 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800297e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002986:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b04      	cmp	r3, #4
 8002992:	d113      	bne.n	80029bc <I2C_ITError+0x254>
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	2b28      	cmp	r3, #40	; 0x28
 8002998:	d110      	bne.n	80029bc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <I2C_ITError+0x260>)
 800299e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7fe fe69 	bl	800168e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80029bc:	bf00      	nop
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	080029cd 	.word	0x080029cd
 80029c8:	ffff0000 	.word	0xffff0000

080029cc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80029e6:	4b4b      	ldr	r3, [pc, #300]	; (8002b14 <I2C_DMAAbort+0x148>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	08db      	lsrs	r3, r3, #3
 80029ec:	4a4a      	ldr	r2, [pc, #296]	; (8002b18 <I2C_DMAAbort+0x14c>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	0a1a      	lsrs	r2, r3, #8
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	00da      	lsls	r2, r3, #3
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f043 0220 	orr.w	r2, r3, #32
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002a12:	e00a      	b.n	8002a2a <I2C_DMAAbort+0x5e>
    }
    count--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a28:	d0ea      	beq.n	8002a00 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a36:	2200      	movs	r2, #0
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a46:	2200      	movs	r2, #0
 8002a48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a58:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0201 	bic.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b60      	cmp	r3, #96	; 0x60
 8002a9a:	d10e      	bne.n	8002aba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002ab2:	6978      	ldr	r0, [r7, #20]
 8002ab4:	f7fe fe0f 	bl	80016d6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ab8:	e027      	b.n	8002b0a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002aba:	7cfb      	ldrb	r3, [r7, #19]
 8002abc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ac0:	2b28      	cmp	r3, #40	; 0x28
 8002ac2:	d117      	bne.n	8002af4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ae2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2228      	movs	r2, #40	; 0x28
 8002aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002af2:	e007      	b.n	8002b04 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002b04:	6978      	ldr	r0, [r7, #20]
 8002b06:	f7fe fddd 	bl	80016c4 <HAL_I2C_ErrorCallback>
}
 8002b0a:	bf00      	nop
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000000 	.word	0x20000000
 8002b18:	14f8b589 	.word	0x14f8b589

08002b1c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b28:	4b13      	ldr	r3, [pc, #76]	; (8002b78 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	08db      	lsrs	r3, r3, #3
 8002b2e:	4a13      	ldr	r2, [pc, #76]	; (8002b7c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002b30:	fba2 2303 	umull	r2, r3, r2, r3
 8002b34:	0a1a      	lsrs	r2, r3, #8
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d107      	bne.n	8002b5a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f043 0220 	orr.w	r2, r3, #32
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e008      	b.n	8002b6c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b68:	d0e9      	beq.n	8002b3e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	20000000 	.word	0x20000000
 8002b7c:	14f8b589 	.word	0x14f8b589

08002b80 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002b90:	d103      	bne.n	8002b9a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002b98:	e007      	b.n	8002baa <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002ba2:	d102      	bne.n	8002baa <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2208      	movs	r2, #8
 8002ba8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bb6:	b08b      	sub	sp, #44	; 0x2c
 8002bb8:	af06      	add	r7, sp, #24
 8002bba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e0f1      	b.n	8002daa <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f006 fb58 	bl	8009290 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2203      	movs	r2, #3
 8002be4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f002 fa27 	bl	8005040 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	687e      	ldr	r6, [r7, #4]
 8002bfa:	466d      	mov	r5, sp
 8002bfc:	f106 0410 	add.w	r4, r6, #16
 8002c00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c04:	6823      	ldr	r3, [r4, #0]
 8002c06:	602b      	str	r3, [r5, #0]
 8002c08:	1d33      	adds	r3, r6, #4
 8002c0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c0c:	6838      	ldr	r0, [r7, #0]
 8002c0e:	f002 f9f1 	bl	8004ff4 <USB_CoreInit>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0c2      	b.n	8002daa <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f002 fa22 	bl	8005074 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c30:	2300      	movs	r3, #0
 8002c32:	73fb      	strb	r3, [r7, #15]
 8002c34:	e040      	b.n	8002cb8 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	440b      	add	r3, r1
 8002c46:	3301      	adds	r3, #1
 8002c48:	2201      	movs	r2, #1
 8002c4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	440b      	add	r3, r1
 8002c5c:	7bfa      	ldrb	r2, [r7, #15]
 8002c5e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	440b      	add	r3, r1
 8002c70:	3303      	adds	r3, #3
 8002c72:	2200      	movs	r2, #0
 8002c74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c76:	7bfa      	ldrb	r2, [r7, #15]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	440b      	add	r3, r1
 8002c84:	3338      	adds	r3, #56	; 0x38
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c8a:	7bfa      	ldrb	r2, [r7, #15]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	440b      	add	r3, r1
 8002c98:	333c      	adds	r3, #60	; 0x3c
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	440b      	add	r3, r1
 8002cac:	3340      	adds	r3, #64	; 0x40
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
 8002cb8:	7bfa      	ldrb	r2, [r7, #15]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d3b9      	bcc.n	8002c36 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	73fb      	strb	r3, [r7, #15]
 8002cc6:	e044      	b.n	8002d52 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cc8:	7bfa      	ldrb	r2, [r7, #15]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	440b      	add	r3, r1
 8002cd6:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002cda:	2200      	movs	r2, #0
 8002cdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cde:	7bfa      	ldrb	r2, [r7, #15]
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	440b      	add	r3, r1
 8002cec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cf0:	7bfa      	ldrb	r2, [r7, #15]
 8002cf2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cf4:	7bfa      	ldrb	r2, [r7, #15]
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	440b      	add	r3, r1
 8002d02:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d0a:	7bfa      	ldrb	r2, [r7, #15]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	440b      	add	r3, r1
 8002d18:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d20:	7bfa      	ldrb	r2, [r7, #15]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	440b      	add	r3, r1
 8002d2e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d36:	7bfa      	ldrb	r2, [r7, #15]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	440b      	add	r3, r1
 8002d44:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
 8002d52:	7bfa      	ldrb	r2, [r7, #15]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d3b5      	bcc.n	8002cc8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	603b      	str	r3, [r7, #0]
 8002d62:	687e      	ldr	r6, [r7, #4]
 8002d64:	466d      	mov	r5, sp
 8002d66:	f106 0410 	add.w	r4, r6, #16
 8002d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6e:	6823      	ldr	r3, [r4, #0]
 8002d70:	602b      	str	r3, [r5, #0]
 8002d72:	1d33      	adds	r3, r6, #4
 8002d74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d76:	6838      	ldr	r0, [r7, #0]
 8002d78:	f002 f988 	bl	800508c <USB_DevInit>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2202      	movs	r2, #2
 8002d86:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e00d      	b.n	8002daa <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f004 fc09 	bl	80075ba <USB_DevDisconnect>

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002db2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_PCD_Start+0x16>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e016      	b.n	8002df6 <HAL_PCD_Start+0x44>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f002 f91d 	bl	8005014 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002dda:	2101      	movs	r1, #1
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f006 fcca 	bl	8009776 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f004 fbdd 	bl	80075a6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b088      	sub	sp, #32
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f004 fbdf 	bl	80075ce <USB_ReadInterrupts>
 8002e10:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 fb1b 	bl	8003458 <PCD_EP_ISR_Handler>

    return;
 8002e22:	e119      	b.n	8003058 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d013      	beq.n	8002e56 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e40:	b292      	uxth	r2, r2
 8002e42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f006 fa9d 	bl	8009386 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f905 	bl	800305e <HAL_PCD_SetAddress>

    return;
 8002e54:	e100      	b.n	8003058 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00c      	beq.n	8002e7a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e72:	b292      	uxth	r2, r2
 8002e74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002e78:	e0ee      	b.n	8003058 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00c      	beq.n	8002e9e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e96:	b292      	uxth	r2, r2
 8002e98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002e9c:	e0dc      	b.n	8003058 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d027      	beq.n	8002ef8 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0204 	bic.w	r2, r2, #4
 8002eba:	b292      	uxth	r2, r2
 8002ebc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0208 	bic.w	r2, r2, #8
 8002ed2:	b292      	uxth	r2, r2
 8002ed4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f006 fa8d 	bl	80093f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ef0:	b292      	uxth	r2, r2
 8002ef2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002ef6:	e0af      	b.n	8003058 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 8083 	beq.w	800300a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002f04:	2300      	movs	r3, #0
 8002f06:	77fb      	strb	r3, [r7, #31]
 8002f08:	e010      	b.n	8002f2c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	7ffb      	ldrb	r3, [r7, #31]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	441a      	add	r2, r3
 8002f16:	7ffb      	ldrb	r3, [r7, #31]
 8002f18:	8812      	ldrh	r2, [r2, #0]
 8002f1a:	b292      	uxth	r2, r2
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	3320      	adds	r3, #32
 8002f20:	443b      	add	r3, r7
 8002f22:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002f26:	7ffb      	ldrb	r3, [r7, #31]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	77fb      	strb	r3, [r7, #31]
 8002f2c:	7ffb      	ldrb	r3, [r7, #31]
 8002f2e:	2b07      	cmp	r3, #7
 8002f30:	d9eb      	bls.n	8002f0a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f042 0201 	orr.w	r2, r2, #1
 8002f44:	b292      	uxth	r2, r2
 8002f46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0201 	bic.w	r2, r2, #1
 8002f5c:	b292      	uxth	r2, r2
 8002f5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002f62:	bf00      	nop
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f6      	beq.n	8002f64 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f88:	b292      	uxth	r2, r2
 8002f8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002f8e:	2300      	movs	r3, #0
 8002f90:	77fb      	strb	r3, [r7, #31]
 8002f92:	e00f      	b.n	8002fb4 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002f94:	7ffb      	ldrb	r3, [r7, #31]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	7ffa      	ldrb	r2, [r7, #31]
 8002f9e:	0092      	lsls	r2, r2, #2
 8002fa0:	440a      	add	r2, r1
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	3320      	adds	r3, #32
 8002fa6:	443b      	add	r3, r7
 8002fa8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002fac:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002fae:	7ffb      	ldrb	r3, [r7, #31]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	77fb      	strb	r3, [r7, #31]
 8002fb4:	7ffb      	ldrb	r3, [r7, #31]
 8002fb6:	2b07      	cmp	r3, #7
 8002fb8:	d9ec      	bls.n	8002f94 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0208 	orr.w	r2, r2, #8
 8002fcc:	b292      	uxth	r2, r2
 8002fce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fe4:	b292      	uxth	r2, r2
 8002fe6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0204 	orr.w	r2, r2, #4
 8002ffc:	b292      	uxth	r2, r2
 8002ffe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f006 f9de 	bl	80093c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003008:	e026      	b.n	8003058 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00f      	beq.n	8003034 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800301c:	b29a      	uxth	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003026:	b292      	uxth	r2, r2
 8003028:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f006 f99c 	bl	800936a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003032:	e011      	b.n	8003058 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00c      	beq.n	8003058 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003046:	b29a      	uxth	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003050:	b292      	uxth	r2, r2
 8003052:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003056:	bf00      	nop
  }
}
 8003058:	3720      	adds	r7, #32
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	460b      	mov	r3, r1
 8003068:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_PCD_SetAddress+0x1a>
 8003074:	2302      	movs	r3, #2
 8003076:	e013      	b.n	80030a0 <HAL_PCD_SetAddress+0x42>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	78fa      	ldrb	r2, [r7, #3]
 800308e:	4611      	mov	r1, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f004 fa75 	bl	8007580 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	4608      	mov	r0, r1
 80030b2:	4611      	mov	r1, r2
 80030b4:	461a      	mov	r2, r3
 80030b6:	4603      	mov	r3, r0
 80030b8:	70fb      	strb	r3, [r7, #3]
 80030ba:	460b      	mov	r3, r1
 80030bc:	803b      	strh	r3, [r7, #0]
 80030be:	4613      	mov	r3, r2
 80030c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	da0e      	bge.n	80030ec <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	4413      	add	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2201      	movs	r2, #1
 80030e8:	705a      	strb	r2, [r3, #1]
 80030ea:	e00e      	b.n	800310a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	f003 0207 	and.w	r2, r3, #7
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	4413      	add	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	b2da      	uxtb	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003116:	883a      	ldrh	r2, [r7, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	78ba      	ldrb	r2, [r7, #2]
 8003120:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003122:	78bb      	ldrb	r3, [r7, #2]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d102      	bne.n	800312e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_PCD_EP_Open+0x94>
 8003138:	2302      	movs	r3, #2
 800313a:	e00e      	b.n	800315a <HAL_PCD_EP_Open+0xb2>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68f9      	ldr	r1, [r7, #12]
 800314a:	4618      	mov	r0, r3
 800314c:	f001 ffbe 	bl	80050cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003158:	7afb      	ldrb	r3, [r7, #11]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b084      	sub	sp, #16
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	460b      	mov	r3, r1
 800316c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800316e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003172:	2b00      	cmp	r3, #0
 8003174:	da0e      	bge.n	8003194 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003176:	78fb      	ldrb	r3, [r7, #3]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2201      	movs	r2, #1
 8003190:	705a      	strb	r2, [r3, #1]
 8003192:	e00e      	b.n	80031b2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	f003 0207 	and.w	r2, r3, #7
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	4413      	add	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_PCD_EP_Close+0x6a>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e00e      	b.n	80031ea <HAL_PCD_EP_Close+0x88>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68f9      	ldr	r1, [r7, #12]
 80031da:	4618      	mov	r0, r3
 80031dc:	f002 fb36 	bl	800584c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b086      	sub	sp, #24
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	603b      	str	r3, [r7, #0]
 80031fe:	460b      	mov	r3, r1
 8003200:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003202:	7afb      	ldrb	r3, [r7, #11]
 8003204:	f003 0207 	and.w	r2, r3, #7
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2200      	movs	r2, #0
 800322a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2200      	movs	r2, #0
 8003230:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003232:	7afb      	ldrb	r3, [r7, #11]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	b2da      	uxtb	r2, r3
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6979      	ldr	r1, [r7, #20]
 8003244:	4618      	mov	r0, r3
 8003246:	f002 fced 	bl	8005c24 <USB_EPStartXfer>

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	f003 0207 	and.w	r2, r3, #7
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	440b      	add	r3, r1
 8003272:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr

08003282 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b086      	sub	sp, #24
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
 800328e:	460b      	mov	r3, r1
 8003290:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003292:	7afb      	ldrb	r3, [r7, #11]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	1c5a      	adds	r2, r3, #1
 800329a:	4613      	mov	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4413      	add	r3, r2
 80032a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2200      	movs	r2, #0
 80032c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	2201      	movs	r2, #1
 80032cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ce:	7afb      	ldrb	r3, [r7, #11]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6979      	ldr	r1, [r7, #20]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f002 fc9f 	bl	8005c24 <USB_EPStartXfer>

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	f003 0207 	and.w	r2, r3, #7
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	429a      	cmp	r2, r3
 8003308:	d901      	bls.n	800330e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e04c      	b.n	80033a8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800330e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003312:	2b00      	cmp	r3, #0
 8003314:	da0e      	bge.n	8003334 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003316:	78fb      	ldrb	r3, [r7, #3]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	4413      	add	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2201      	movs	r2, #1
 8003330:	705a      	strb	r2, [r3, #1]
 8003332:	e00c      	b.n	800334e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2201      	movs	r2, #1
 8003352:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003354:	78fb      	ldrb	r3, [r7, #3]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	b2da      	uxtb	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_PCD_EP_SetStall+0x7e>
 800336a:	2302      	movs	r3, #2
 800336c:	e01c      	b.n	80033a8 <HAL_PCD_EP_SetStall+0xb8>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68f9      	ldr	r1, [r7, #12]
 800337c:	4618      	mov	r0, r3
 800337e:	f004 f802 	bl	8007386 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003382:	78fb      	ldrb	r3, [r7, #3]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	2b00      	cmp	r3, #0
 800338a:	d108      	bne.n	800339e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003396:	4619      	mov	r1, r3
 8003398:	4610      	mov	r0, r2
 800339a:	f004 f927 	bl	80075ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033bc:	78fb      	ldrb	r3, [r7, #3]
 80033be:	f003 020f 	and.w	r2, r3, #15
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d901      	bls.n	80033ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e040      	b.n	8003450 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	da0e      	bge.n	80033f4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033d6:	78fb      	ldrb	r3, [r7, #3]
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	4413      	add	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2201      	movs	r2, #1
 80033f0:	705a      	strb	r2, [r3, #1]
 80033f2:	e00e      	b.n	8003412 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	f003 0207 	and.w	r2, r3, #7
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	4413      	add	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	b2da      	uxtb	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_PCD_EP_ClrStall+0x82>
 800342e:	2302      	movs	r3, #2
 8003430:	e00e      	b.n	8003450 <HAL_PCD_EP_ClrStall+0xa0>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68f9      	ldr	r1, [r7, #12]
 8003440:	4618      	mov	r0, r3
 8003442:	f003 fff0 	bl	8007426 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b096      	sub	sp, #88	; 0x58
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003460:	e3bf      	b.n	8003be2 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800346a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800346e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800347c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003480:	2b00      	cmp	r3, #0
 8003482:	f040 8179 	bne.w	8003778 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003486:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800348a:	f003 0310 	and.w	r3, r3, #16
 800348e:	2b00      	cmp	r3, #0
 8003490:	d152      	bne.n	8003538 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	b29b      	uxth	r3, r3
 800349a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800349e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a2:	81fb      	strh	r3, [r7, #14]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	89fb      	ldrh	r3, [r7, #14]
 80034aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3328      	adds	r3, #40	; 0x28
 80034ba:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	461a      	mov	r2, r3
 80034c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	3302      	adds	r3, #2
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6812      	ldr	r2, [r2, #0]
 80034d8:	4413      	add	r3, r2
 80034da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80034e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	441a      	add	r2, r3
 80034f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80034f6:	2100      	movs	r1, #0
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f005 ff1c 	bl	8009336 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 836b 	beq.w	8003be2 <PCD_EP_ISR_Handler+0x78a>
 800350c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	2b00      	cmp	r3, #0
 8003512:	f040 8366 	bne.w	8003be2 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800351c:	b2db      	uxtb	r3, r3
 800351e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003522:	b2da      	uxtb	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	b292      	uxth	r2, r2
 800352a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003536:	e354      	b.n	8003be2 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800353e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800354a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800354e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003552:	2b00      	cmp	r3, #0
 8003554:	d034      	beq.n	80035c0 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800355e:	b29b      	uxth	r3, r3
 8003560:	461a      	mov	r2, r3
 8003562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4413      	add	r3, r2
 800356a:	3306      	adds	r3, #6
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	4413      	add	r3, r2
 8003574:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800357e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003580:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800358c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800358e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003592:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003594:	b29b      	uxth	r3, r3
 8003596:	f004 f879 	bl	800768c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80035a6:	4013      	ands	r3, r2
 80035a8:	823b      	strh	r3, [r7, #16]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	8a3a      	ldrh	r2, [r7, #16]
 80035b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035b4:	b292      	uxth	r2, r2
 80035b6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f005 fe8f 	bl	80092dc <HAL_PCD_SetupStageCallback>
 80035be:	e310      	b.n	8003be2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035c0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f280 830c 	bge.w	8003be2 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80035d6:	4013      	ands	r3, r2
 80035d8:	83fb      	strh	r3, [r7, #30]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	8bfa      	ldrh	r2, [r7, #30]
 80035e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035e4:	b292      	uxth	r2, r2
 80035e6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	4413      	add	r3, r2
 80035fc:	3306      	adds	r3, #6
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	4413      	add	r3, r2
 8003606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003612:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d019      	beq.n	8003650 <PCD_EP_ISR_Handler+0x1f8>
 800361c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d015      	beq.n	8003650 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800362a:	6959      	ldr	r1, [r3, #20]
 800362c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800362e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003632:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003634:	b29b      	uxth	r3, r3
 8003636:	f004 f829 	bl	800768c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800363a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800363c:	695a      	ldr	r2, [r3, #20]
 800363e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	441a      	add	r2, r3
 8003644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003646:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003648:	2100      	movs	r1, #0
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f005 fe58 	bl	8009300 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800365a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800365e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003662:	2b00      	cmp	r3, #0
 8003664:	f040 82bd 	bne.w	8003be2 <PCD_EP_ISR_Handler+0x78a>
 8003668:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800366c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003670:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003674:	f000 82b5 	beq.w	8003be2 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	61bb      	str	r3, [r7, #24]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003686:	b29b      	uxth	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	4413      	add	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	b29b      	uxth	r3, r3
 800369e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	801a      	strh	r2, [r3, #0]
 80036a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	2b3e      	cmp	r3, #62	; 0x3e
 80036ae:	d91d      	bls.n	80036ec <PCD_EP_ISR_Handler+0x294>
 80036b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	095b      	lsrs	r3, r3, #5
 80036b6:	647b      	str	r3, [r7, #68]	; 0x44
 80036b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d102      	bne.n	80036ca <PCD_EP_ISR_Handler+0x272>
 80036c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036c6:	3b01      	subs	r3, #1
 80036c8:	647b      	str	r3, [r7, #68]	; 0x44
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	029b      	lsls	r3, r3, #10
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	4313      	orrs	r3, r2
 80036da:	b29b      	uxth	r3, r3
 80036dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	801a      	strh	r2, [r3, #0]
 80036ea:	e026      	b.n	800373a <PCD_EP_ISR_Handler+0x2e2>
 80036ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10a      	bne.n	800370a <PCD_EP_ISR_Handler+0x2b2>
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003702:	b29a      	uxth	r2, r3
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	801a      	strh	r2, [r3, #0]
 8003708:	e017      	b.n	800373a <PCD_EP_ISR_Handler+0x2e2>
 800370a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	085b      	lsrs	r3, r3, #1
 8003710:	647b      	str	r3, [r7, #68]	; 0x44
 8003712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <PCD_EP_ISR_Handler+0x2cc>
 800371e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003720:	3301      	adds	r3, #1
 8003722:	647b      	str	r3, [r7, #68]	; 0x44
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	b29a      	uxth	r2, r3
 800372a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800372c:	b29b      	uxth	r3, r3
 800372e:	029b      	lsls	r3, r3, #10
 8003730:	b29b      	uxth	r3, r3
 8003732:	4313      	orrs	r3, r2
 8003734:	b29a      	uxth	r2, r3
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	b29b      	uxth	r3, r3
 8003742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374a:	827b      	strh	r3, [r7, #18]
 800374c:	8a7b      	ldrh	r3, [r7, #18]
 800374e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003752:	827b      	strh	r3, [r7, #18]
 8003754:	8a7b      	ldrh	r3, [r7, #18]
 8003756:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800375a:	827b      	strh	r3, [r7, #18]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	8a7b      	ldrh	r3, [r7, #18]
 8003762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800376a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800376e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003772:	b29b      	uxth	r3, r3
 8003774:	8013      	strh	r3, [r2, #0]
 8003776:	e234      	b.n	8003be2 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800378c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003790:	2b00      	cmp	r3, #0
 8003792:	f280 80fc 	bge.w	800398e <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80037ac:	4013      	ands	r3, r2
 80037ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80037c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037c8:	b292      	uxth	r2, r2
 80037ca:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80037cc:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	4413      	add	r3, r2
 80037e0:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80037e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e4:	7b1b      	ldrb	r3, [r3, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d125      	bne.n	8003836 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	461a      	mov	r2, r3
 80037f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4413      	add	r3, r2
 80037fe:	3306      	adds	r3, #6
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003812:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003816:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 8092 	beq.w	8003944 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003826:	6959      	ldr	r1, [r3, #20]
 8003828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800382a:	88da      	ldrh	r2, [r3, #6]
 800382c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003830:	f003 ff2c 	bl	800768c <USB_ReadPMA>
 8003834:	e086      	b.n	8003944 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003838:	78db      	ldrb	r3, [r3, #3]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d10a      	bne.n	8003854 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800383e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003842:	461a      	mov	r2, r3
 8003844:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f9d9 	bl	8003bfe <HAL_PCD_EP_DB_Receive>
 800384c:	4603      	mov	r3, r0
 800384e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003852:	e077      	b.n	8003944 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	b29b      	uxth	r3, r3
 8003866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800386a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	441a      	add	r2, r3
 8003880:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800388c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003890:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003894:	b29b      	uxth	r3, r3
 8003896:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	461a      	mov	r2, r3
 800389e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d024      	beq.n	80038fc <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	461a      	mov	r2, r3
 80038be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4413      	add	r3, r2
 80038c6:	3302      	adds	r3, #2
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038da:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80038de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d02e      	beq.n	8003944 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6818      	ldr	r0, [r3, #0]
 80038ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ec:	6959      	ldr	r1, [r3, #20]
 80038ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038f0:	891a      	ldrh	r2, [r3, #8]
 80038f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038f6:	f003 fec9 	bl	800768c <USB_ReadPMA>
 80038fa:	e023      	b.n	8003944 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003904:	b29b      	uxth	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4413      	add	r3, r2
 8003910:	3306      	adds	r3, #6
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003924:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003928:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800392c:	2b00      	cmp	r3, #0
 800392e:	d009      	beq.n	8003944 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6818      	ldr	r0, [r3, #0]
 8003934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003936:	6959      	ldr	r1, [r3, #20]
 8003938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800393a:	895a      	ldrh	r2, [r3, #10]
 800393c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003940:	f003 fea4 	bl	800768c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003946:	69da      	ldr	r2, [r3, #28]
 8003948:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800394c:	441a      	add	r2, r3
 800394e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003950:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003954:	695a      	ldr	r2, [r3, #20]
 8003956:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800395a:	441a      	add	r2, r3
 800395c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800395e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <PCD_EP_ISR_Handler+0x51c>
 8003968:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800396c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	429a      	cmp	r2, r3
 8003972:	d206      	bcs.n	8003982 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	4619      	mov	r1, r3
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f005 fcc0 	bl	8009300 <HAL_PCD_DataOutStageCallback>
 8003980:	e005      	b.n	800398e <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003988:	4618      	mov	r0, r3
 800398a:	f002 f94b 	bl	8005c24 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800398e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 8123 	beq.w	8003be2 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800399c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	4613      	mov	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	4413      	add	r3, r2
 80039ae:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80039c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	441a      	add	r2, r3
 80039dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80039e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80039ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ee:	78db      	ldrb	r3, [r3, #3]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	f040 80a2 	bne.w	8003b3a <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80039f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039f8:	2200      	movs	r2, #0
 80039fa:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80039fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039fe:	7b1b      	ldrb	r3, [r3, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 8093 	beq.w	8003b2c <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d046      	beq.n	8003aa0 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a14:	785b      	ldrb	r3, [r3, #1]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d126      	bne.n	8003a68 <PCD_EP_ISR_Handler+0x610>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	4413      	add	r3, r2
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
 8003a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	011a      	lsls	r2, r3, #4
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a40:	623b      	str	r3, [r7, #32]
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	6a3b      	ldr	r3, [r7, #32]
 8003a50:	801a      	strh	r2, [r3, #0]
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	801a      	strh	r2, [r3, #0]
 8003a66:	e061      	b.n	8003b2c <PCD_EP_ISR_Handler+0x6d4>
 8003a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a6a:	785b      	ldrb	r3, [r3, #1]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d15d      	bne.n	8003b2c <PCD_EP_ISR_Handler+0x6d4>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	461a      	mov	r2, r3
 8003a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a84:	4413      	add	r3, r2
 8003a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	011a      	lsls	r2, r3, #4
 8003a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a90:	4413      	add	r3, r2
 8003a92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	801a      	strh	r2, [r3, #0]
 8003a9e:	e045      	b.n	8003b2c <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aa8:	785b      	ldrb	r3, [r3, #1]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d126      	bne.n	8003afc <PCD_EP_ISR_Handler+0x6a4>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac2:	4413      	add	r3, r2
 8003ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	011a      	lsls	r2, r3, #4
 8003acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ace:	4413      	add	r3, r2
 8003ad0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ad4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	801a      	strh	r2, [r3, #0]
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003af0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	e017      	b.n	8003b2c <PCD_EP_ISR_Handler+0x6d4>
 8003afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003afe:	785b      	ldrb	r3, [r3, #1]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d113      	bne.n	8003b2c <PCD_EP_ISR_Handler+0x6d4>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	461a      	mov	r2, r3
 8003b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b12:	4413      	add	r3, r2
 8003b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	011a      	lsls	r2, r3, #4
 8003b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b1e:	4413      	add	r3, r2
 8003b20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b24:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b28:	2200      	movs	r2, #0
 8003b2a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	4619      	mov	r1, r3
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f005 fbff 	bl	8009336 <HAL_PCD_DataInStageCallback>
 8003b38:	e053      	b.n	8003be2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003b3a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d146      	bne.n	8003bd4 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	4413      	add	r3, r2
 8003b5a:	3302      	adds	r3, #2
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6812      	ldr	r2, [r2, #0]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d907      	bls.n	8003b8e <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8003b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b80:	699a      	ldr	r2, [r3, #24]
 8003b82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b86:	1ad2      	subs	r2, r2, r3
 8003b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b8a:	619a      	str	r2, [r3, #24]
 8003b8c:	e002      	b.n	8003b94 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8003b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b90:	2200      	movs	r2, #0
 8003b92:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d106      	bne.n	8003baa <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f005 fbc7 	bl	8009336 <HAL_PCD_DataInStageCallback>
 8003ba8:	e01b      	b.n	8003be2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bac:	695a      	ldr	r2, [r3, #20]
 8003bae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003bb2:	441a      	add	r2, r3
 8003bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bb6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bba:	69da      	ldr	r2, [r3, #28]
 8003bbc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003bc0:	441a      	add	r2, r3
 8003bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bc4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f002 f829 	bl	8005c24 <USB_EPStartXfer>
 8003bd2:	e006      	b.n	8003be2 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003bd4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003bd8:	461a      	mov	r2, r3
 8003bda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f91b 	bl	8003e18 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	b21b      	sxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f6ff ac37 	blt.w	8003462 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3758      	adds	r7, #88	; 0x58
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b088      	sub	sp, #32
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c0c:	88fb      	ldrh	r3, [r7, #6]
 8003c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d07e      	beq.n	8003d14 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	461a      	mov	r2, r3
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4413      	add	r3, r2
 8003c2a:	3302      	adds	r3, #2
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	6812      	ldr	r2, [r2, #0]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c3e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	699a      	ldr	r2, [r3, #24]
 8003c44:	8b7b      	ldrh	r3, [r7, #26]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d306      	bcc.n	8003c58 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	699a      	ldr	r2, [r3, #24]
 8003c4e:	8b7b      	ldrh	r3, [r7, #26]
 8003c50:	1ad2      	subs	r2, r2, r3
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	619a      	str	r2, [r3, #24]
 8003c56:	e002      	b.n	8003c5e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d123      	bne.n	8003cae <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c80:	833b      	strh	r3, [r7, #24]
 8003c82:	8b3b      	ldrh	r3, [r7, #24]
 8003c84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c88:	833b      	strh	r3, [r7, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	441a      	add	r2, r3
 8003c98:	8b3b      	ldrh	r3, [r7, #24]
 8003c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d01f      	beq.n	8003cf8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd2:	82fb      	strh	r3, [r7, #22]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	441a      	add	r2, r3
 8003ce2:	8afb      	ldrh	r3, [r7, #22]
 8003ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cf0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003cf8:	8b7b      	ldrh	r3, [r7, #26]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 8087 	beq.w	8003e0e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	6959      	ldr	r1, [r3, #20]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	891a      	ldrh	r2, [r3, #8]
 8003d0c:	8b7b      	ldrh	r3, [r7, #26]
 8003d0e:	f003 fcbd 	bl	800768c <USB_ReadPMA>
 8003d12:	e07c      	b.n	8003e0e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	461a      	mov	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	4413      	add	r3, r2
 8003d28:	3306      	adds	r3, #6
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d3c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	8b7b      	ldrh	r3, [r7, #26]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d306      	bcc.n	8003d56 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	699a      	ldr	r2, [r3, #24]
 8003d4c:	8b7b      	ldrh	r3, [r7, #26]
 8003d4e:	1ad2      	subs	r2, r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	619a      	str	r2, [r3, #24]
 8003d54:	e002      	b.n	8003d5c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d123      	bne.n	8003dac <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7e:	83fb      	strh	r3, [r7, #30]
 8003d80:	8bfb      	ldrh	r3, [r7, #30]
 8003d82:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d86:	83fb      	strh	r3, [r7, #30]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	441a      	add	r2, r3
 8003d96:	8bfb      	ldrh	r3, [r7, #30]
 8003d98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003dac:	88fb      	ldrh	r3, [r7, #6]
 8003dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d11f      	bne.n	8003df6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd0:	83bb      	strh	r3, [r7, #28]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	441a      	add	r2, r3
 8003de0:	8bbb      	ldrh	r3, [r7, #28]
 8003de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003df6:	8b7b      	ldrh	r3, [r7, #26]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d008      	beq.n	8003e0e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	6959      	ldr	r1, [r3, #20]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	895a      	ldrh	r2, [r3, #10]
 8003e08:	8b7b      	ldrh	r3, [r7, #26]
 8003e0a:	f003 fc3f 	bl	800768c <USB_ReadPMA>
    }
  }

  return count;
 8003e0e:	8b7b      	ldrh	r3, [r7, #26]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3720      	adds	r7, #32
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b0a4      	sub	sp, #144	; 0x90
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	4613      	mov	r3, r2
 8003e24:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 81dd 	beq.w	80041ec <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	3302      	adds	r3, #2
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	6812      	ldr	r2, [r2, #0]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e5a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	699a      	ldr	r2, [r3, #24]
 8003e62:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d907      	bls.n	8003e7a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	699a      	ldr	r2, [r3, #24]
 8003e6e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e72:	1ad2      	subs	r2, r2, r3
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	619a      	str	r2, [r3, #24]
 8003e78:	e002      	b.n	8003e80 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f040 80b9 	bne.w	8003ffc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	785b      	ldrb	r3, [r3, #1]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d126      	bne.n	8003ee0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea6:	4413      	add	r3, r2
 8003ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	011a      	lsls	r2, r3, #4
 8003eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec8:	801a      	strh	r2, [r3, #0]
 8003eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	801a      	strh	r2, [r3, #0]
 8003ede:	e01a      	b.n	8003f16 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	785b      	ldrb	r3, [r3, #1]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d116      	bne.n	8003f16 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	637b      	str	r3, [r7, #52]	; 0x34
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	461a      	mov	r2, r3
 8003efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003efc:	4413      	add	r3, r2
 8003efe:	637b      	str	r3, [r7, #52]	; 0x34
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	011a      	lsls	r2, r3, #4
 8003f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f08:	4413      	add	r3, r2
 8003f0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f0e:	633b      	str	r3, [r7, #48]	; 0x30
 8003f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f12:	2200      	movs	r2, #0
 8003f14:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	785b      	ldrb	r3, [r3, #1]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d126      	bne.n	8003f72 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	61fb      	str	r3, [r7, #28]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	4413      	add	r3, r2
 8003f3a:	61fb      	str	r3, [r7, #28]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	011a      	lsls	r2, r3, #4
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	4413      	add	r3, r2
 8003f46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f4a:	61bb      	str	r3, [r7, #24]
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	801a      	strh	r2, [r3, #0]
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	801a      	strh	r2, [r3, #0]
 8003f70:	e017      	b.n	8003fa2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	785b      	ldrb	r3, [r3, #1]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d113      	bne.n	8003fa2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	461a      	mov	r2, r3
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	4413      	add	r3, r2
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	011a      	lsls	r2, r3, #4
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	4413      	add	r3, r2
 8003f96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f9a:	623b      	str	r3, [r7, #32]
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f005 f9c4 	bl	8009336 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003fae:	88fb      	ldrh	r3, [r7, #6]
 8003fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 82fc 	beq.w	80045b2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd4:	82fb      	strh	r3, [r7, #22]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	441a      	add	r2, r3
 8003fe4:	8afb      	ldrh	r3, [r7, #22]
 8003fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	8013      	strh	r3, [r2, #0]
 8003ffa:	e2da      	b.n	80045b2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ffc:	88fb      	ldrh	r3, [r7, #6]
 8003ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d021      	beq.n	800404a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	b29b      	uxth	r3, r3
 8004018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800401c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004020:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	461a      	mov	r2, r3
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	441a      	add	r2, r3
 8004032:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800403a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800403e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004046:	b29b      	uxth	r3, r3
 8004048:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004050:	2b01      	cmp	r3, #1
 8004052:	f040 82ae 	bne.w	80045b2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	695a      	ldr	r2, [r3, #20]
 800405a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800405e:	441a      	add	r2, r3
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	69da      	ldr	r2, [r3, #28]
 8004068:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800406c:	441a      	add	r2, r3
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	6a1a      	ldr	r2, [r3, #32]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	429a      	cmp	r2, r3
 800407c:	d30b      	bcc.n	8004096 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	6a1a      	ldr	r2, [r3, #32]
 800408a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800408e:	1ad2      	subs	r2, r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	621a      	str	r2, [r3, #32]
 8004094:	e017      	b.n	80040c6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d108      	bne.n	80040b0 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800409e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80040a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80040ae:	e00a      	b.n	80040c6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2200      	movs	r2, #0
 80040c4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	785b      	ldrb	r3, [r3, #1]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d165      	bne.n	800419a <HAL_PCD_EP_DB_Transmit+0x382>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040dc:	b29b      	uxth	r3, r3
 80040de:	461a      	mov	r2, r3
 80040e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e2:	4413      	add	r3, r2
 80040e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	011a      	lsls	r2, r3, #4
 80040ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ee:	4413      	add	r3, r2
 80040f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004100:	b29a      	uxth	r2, r3
 8004102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004104:	801a      	strh	r2, [r3, #0]
 8004106:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800410a:	2b3e      	cmp	r3, #62	; 0x3e
 800410c:	d91d      	bls.n	800414a <HAL_PCD_EP_DB_Transmit+0x332>
 800410e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	64bb      	str	r3, [r7, #72]	; 0x48
 8004116:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800411a:	f003 031f 	and.w	r3, r3, #31
 800411e:	2b00      	cmp	r3, #0
 8004120:	d102      	bne.n	8004128 <HAL_PCD_EP_DB_Transmit+0x310>
 8004122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004124:	3b01      	subs	r3, #1
 8004126:	64bb      	str	r3, [r7, #72]	; 0x48
 8004128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	b29a      	uxth	r2, r3
 800412e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004130:	b29b      	uxth	r3, r3
 8004132:	029b      	lsls	r3, r3, #10
 8004134:	b29b      	uxth	r3, r3
 8004136:	4313      	orrs	r3, r2
 8004138:	b29b      	uxth	r3, r3
 800413a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800413e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004142:	b29a      	uxth	r2, r3
 8004144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004146:	801a      	strh	r2, [r3, #0]
 8004148:	e044      	b.n	80041d4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800414a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10a      	bne.n	8004168 <HAL_PCD_EP_DB_Transmit+0x350>
 8004152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	b29b      	uxth	r3, r3
 8004158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800415c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004160:	b29a      	uxth	r2, r3
 8004162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004164:	801a      	strh	r2, [r3, #0]
 8004166:	e035      	b.n	80041d4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004168:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800416c:	085b      	lsrs	r3, r3, #1
 800416e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004170:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <HAL_PCD_EP_DB_Transmit+0x36a>
 800417c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800417e:	3301      	adds	r3, #1
 8004180:	64bb      	str	r3, [r7, #72]	; 0x48
 8004182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	b29a      	uxth	r2, r3
 8004188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800418a:	b29b      	uxth	r3, r3
 800418c:	029b      	lsls	r3, r3, #10
 800418e:	b29b      	uxth	r3, r3
 8004190:	4313      	orrs	r3, r2
 8004192:	b29a      	uxth	r2, r3
 8004194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004196:	801a      	strh	r2, [r3, #0]
 8004198:	e01c      	b.n	80041d4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	785b      	ldrb	r3, [r3, #1]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d118      	bne.n	80041d4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	647b      	str	r3, [r7, #68]	; 0x44
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	461a      	mov	r2, r3
 80041b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041b6:	4413      	add	r3, r2
 80041b8:	647b      	str	r3, [r7, #68]	; 0x44
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	011a      	lsls	r2, r3, #4
 80041c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041c2:	4413      	add	r3, r2
 80041c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041c8:	643b      	str	r3, [r7, #64]	; 0x40
 80041ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6818      	ldr	r0, [r3, #0]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	6959      	ldr	r1, [r3, #20]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	891a      	ldrh	r2, [r3, #8]
 80041e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	f003 fa0c 	bl	8007602 <USB_WritePMA>
 80041ea:	e1e2      	b.n	80045b2 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	461a      	mov	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	4413      	add	r3, r2
 8004200:	3306      	adds	r3, #6
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	6812      	ldr	r2, [r2, #0]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004214:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	699a      	ldr	r2, [r3, #24]
 800421c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004220:	429a      	cmp	r2, r3
 8004222:	d307      	bcc.n	8004234 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	699a      	ldr	r2, [r3, #24]
 8004228:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800422c:	1ad2      	subs	r2, r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	619a      	str	r2, [r3, #24]
 8004232:	e002      	b.n	800423a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2200      	movs	r2, #0
 8004238:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	2b00      	cmp	r3, #0
 8004240:	f040 80c0 	bne.w	80043c4 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	785b      	ldrb	r3, [r3, #1]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d126      	bne.n	800429a <HAL_PCD_EP_DB_Transmit+0x482>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800425a:	b29b      	uxth	r3, r3
 800425c:	461a      	mov	r2, r3
 800425e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004260:	4413      	add	r3, r2
 8004262:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	011a      	lsls	r2, r3, #4
 800426a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800426c:	4413      	add	r3, r2
 800426e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004272:	67bb      	str	r3, [r7, #120]	; 0x78
 8004274:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	b29b      	uxth	r3, r3
 800427a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800427e:	b29a      	uxth	r2, r3
 8004280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004282:	801a      	strh	r2, [r3, #0]
 8004284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	b29b      	uxth	r3, r3
 800428a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800428e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004292:	b29a      	uxth	r2, r3
 8004294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004296:	801a      	strh	r2, [r3, #0]
 8004298:	e01a      	b.n	80042d0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	785b      	ldrb	r3, [r3, #1]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d116      	bne.n	80042d0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	667b      	str	r3, [r7, #100]	; 0x64
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	461a      	mov	r2, r3
 80042b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042b6:	4413      	add	r3, r2
 80042b8:	667b      	str	r3, [r7, #100]	; 0x64
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	011a      	lsls	r2, r3, #4
 80042c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042c2:	4413      	add	r3, r2
 80042c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042c8:	663b      	str	r3, [r7, #96]	; 0x60
 80042ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042cc:	2200      	movs	r2, #0
 80042ce:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	677b      	str	r3, [r7, #116]	; 0x74
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	785b      	ldrb	r3, [r3, #1]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d12b      	bne.n	8004336 <HAL_PCD_EP_DB_Transmit+0x51e>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	461a      	mov	r2, r3
 80042f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f2:	4413      	add	r3, r2
 80042f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	011a      	lsls	r2, r3, #4
 80042fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042fe:	4413      	add	r3, r2
 8004300:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004304:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004308:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	b29b      	uxth	r3, r3
 8004310:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004314:	b29a      	uxth	r2, r3
 8004316:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800431a:	801a      	strh	r2, [r3, #0]
 800431c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	b29b      	uxth	r3, r3
 8004324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800432c:	b29a      	uxth	r2, r3
 800432e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004332:	801a      	strh	r2, [r3, #0]
 8004334:	e017      	b.n	8004366 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	785b      	ldrb	r3, [r3, #1]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d113      	bne.n	8004366 <HAL_PCD_EP_DB_Transmit+0x54e>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004346:	b29b      	uxth	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800434c:	4413      	add	r3, r2
 800434e:	677b      	str	r3, [r7, #116]	; 0x74
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	011a      	lsls	r2, r3, #4
 8004356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004358:	4413      	add	r3, r2
 800435a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800435e:	673b      	str	r3, [r7, #112]	; 0x70
 8004360:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004362:	2200      	movs	r2, #0
 8004364:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	4619      	mov	r1, r3
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f004 ffe2 	bl	8009336 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004372:	88fb      	ldrh	r3, [r7, #6]
 8004374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004378:	2b00      	cmp	r3, #0
 800437a:	f040 811a 	bne.w	80045b2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	b29b      	uxth	r3, r3
 8004390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004398:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	441a      	add	r2, r3
 80043aa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80043ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043be:	b29b      	uxth	r3, r3
 80043c0:	8013      	strh	r3, [r2, #0]
 80043c2:	e0f6      	b.n	80045b2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80043c4:	88fb      	ldrh	r3, [r7, #6]
 80043c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d121      	bne.n	8004412 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	461a      	mov	r2, r3
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	b29b      	uxth	r3, r3
 80043e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	441a      	add	r2, r3
 80043fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004406:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800440a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800440e:	b29b      	uxth	r3, r3
 8004410:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004418:	2b01      	cmp	r3, #1
 800441a:	f040 80ca 	bne.w	80045b2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	695a      	ldr	r2, [r3, #20]
 8004422:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004426:	441a      	add	r2, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	69da      	ldr	r2, [r3, #28]
 8004430:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004434:	441a      	add	r2, r3
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	6a1a      	ldr	r2, [r3, #32]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	429a      	cmp	r2, r3
 8004444:	d30b      	bcc.n	800445e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	6a1a      	ldr	r2, [r3, #32]
 8004452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004456:	1ad2      	subs	r2, r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	621a      	str	r2, [r3, #32]
 800445c:	e017      	b.n	800448e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d108      	bne.n	8004478 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004466:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800446a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004476:	e00a      	b.n	800448e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2200      	movs	r2, #0
 8004484:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	657b      	str	r3, [r7, #84]	; 0x54
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	785b      	ldrb	r3, [r3, #1]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d165      	bne.n	8004568 <HAL_PCD_EP_DB_Transmit+0x750>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	461a      	mov	r2, r3
 80044ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044b0:	4413      	add	r3, r2
 80044b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	011a      	lsls	r2, r3, #4
 80044ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044bc:	4413      	add	r3, r2
 80044be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80044c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044c6:	881b      	ldrh	r3, [r3, #0]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044d2:	801a      	strh	r2, [r3, #0]
 80044d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044d8:	2b3e      	cmp	r3, #62	; 0x3e
 80044da:	d91d      	bls.n	8004518 <HAL_PCD_EP_DB_Transmit+0x700>
 80044dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80044e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044e8:	f003 031f 	and.w	r3, r3, #31
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d102      	bne.n	80044f6 <HAL_PCD_EP_DB_Transmit+0x6de>
 80044f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044f2:	3b01      	subs	r3, #1
 80044f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80044f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044fe:	b29b      	uxth	r3, r3
 8004500:	029b      	lsls	r3, r3, #10
 8004502:	b29b      	uxth	r3, r3
 8004504:	4313      	orrs	r3, r2
 8004506:	b29b      	uxth	r3, r3
 8004508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800450c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004510:	b29a      	uxth	r2, r3
 8004512:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004514:	801a      	strh	r2, [r3, #0]
 8004516:	e041      	b.n	800459c <HAL_PCD_EP_DB_Transmit+0x784>
 8004518:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10a      	bne.n	8004536 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004520:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	b29b      	uxth	r3, r3
 8004526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800452a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800452e:	b29a      	uxth	r2, r3
 8004530:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004532:	801a      	strh	r2, [r3, #0]
 8004534:	e032      	b.n	800459c <HAL_PCD_EP_DB_Transmit+0x784>
 8004536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800453a:	085b      	lsrs	r3, r3, #1
 800453c:	66bb      	str	r3, [r7, #104]	; 0x68
 800453e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <HAL_PCD_EP_DB_Transmit+0x738>
 800454a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800454c:	3301      	adds	r3, #1
 800454e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004550:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	b29a      	uxth	r2, r3
 8004556:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004558:	b29b      	uxth	r3, r3
 800455a:	029b      	lsls	r3, r3, #10
 800455c:	b29b      	uxth	r3, r3
 800455e:	4313      	orrs	r3, r2
 8004560:	b29a      	uxth	r2, r3
 8004562:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004564:	801a      	strh	r2, [r3, #0]
 8004566:	e019      	b.n	800459c <HAL_PCD_EP_DB_Transmit+0x784>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	785b      	ldrb	r3, [r3, #1]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d115      	bne.n	800459c <HAL_PCD_EP_DB_Transmit+0x784>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004578:	b29b      	uxth	r3, r3
 800457a:	461a      	mov	r2, r3
 800457c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800457e:	4413      	add	r3, r2
 8004580:	657b      	str	r3, [r7, #84]	; 0x54
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	011a      	lsls	r2, r3, #4
 8004588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800458a:	4413      	add	r3, r2
 800458c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004590:	653b      	str	r3, [r7, #80]	; 0x50
 8004592:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004596:	b29a      	uxth	r2, r3
 8004598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800459a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	6959      	ldr	r1, [r3, #20]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	895a      	ldrh	r2, [r3, #10]
 80045a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f003 f828 	bl	8007602 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	461a      	mov	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045cc:	82bb      	strh	r3, [r7, #20]
 80045ce:	8abb      	ldrh	r3, [r7, #20]
 80045d0:	f083 0310 	eor.w	r3, r3, #16
 80045d4:	82bb      	strh	r3, [r7, #20]
 80045d6:	8abb      	ldrh	r3, [r7, #20]
 80045d8:	f083 0320 	eor.w	r3, r3, #32
 80045dc:	82bb      	strh	r3, [r7, #20]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	461a      	mov	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	441a      	add	r2, r3
 80045ec:	8abb      	ldrh	r3, [r7, #20]
 80045ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045fe:	b29b      	uxth	r3, r3
 8004600:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3790      	adds	r7, #144	; 0x90
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	607b      	str	r3, [r7, #4]
 8004616:	460b      	mov	r3, r1
 8004618:	817b      	strh	r3, [r7, #10]
 800461a:	4613      	mov	r3, r2
 800461c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800461e:	897b      	ldrh	r3, [r7, #10]
 8004620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00b      	beq.n	8004642 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800462a:	897b      	ldrh	r3, [r7, #10]
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	4613      	mov	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	4413      	add	r3, r2
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	e009      	b.n	8004656 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004642:	897a      	ldrh	r2, [r7, #10]
 8004644:	4613      	mov	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4413      	add	r3, r2
 8004654:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004656:	893b      	ldrh	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d107      	bne.n	800466c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	2200      	movs	r2, #0
 8004660:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	b29a      	uxth	r2, r3
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	80da      	strh	r2, [r3, #6]
 800466a:	e00b      	b.n	8004684 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	2201      	movs	r2, #1
 8004670:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	b29a      	uxth	r2, r3
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	0c1b      	lsrs	r3, r3, #16
 800467e:	b29a      	uxth	r2, r3
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	371c      	adds	r7, #28
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr

08004690 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e272      	b.n	8004b88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 8087 	beq.w	80047be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046b0:	4b92      	ldr	r3, [pc, #584]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f003 030c 	and.w	r3, r3, #12
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	d00c      	beq.n	80046d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046bc:	4b8f      	ldr	r3, [pc, #572]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 030c 	and.w	r3, r3, #12
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d112      	bne.n	80046ee <HAL_RCC_OscConfig+0x5e>
 80046c8:	4b8c      	ldr	r3, [pc, #560]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d4:	d10b      	bne.n	80046ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d6:	4b89      	ldr	r3, [pc, #548]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d06c      	beq.n	80047bc <HAL_RCC_OscConfig+0x12c>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d168      	bne.n	80047bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e24c      	b.n	8004b88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f6:	d106      	bne.n	8004706 <HAL_RCC_OscConfig+0x76>
 80046f8:	4b80      	ldr	r3, [pc, #512]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a7f      	ldr	r2, [pc, #508]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 80046fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004702:	6013      	str	r3, [r2, #0]
 8004704:	e02e      	b.n	8004764 <HAL_RCC_OscConfig+0xd4>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10c      	bne.n	8004728 <HAL_RCC_OscConfig+0x98>
 800470e:	4b7b      	ldr	r3, [pc, #492]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a7a      	ldr	r2, [pc, #488]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 8004714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	4b78      	ldr	r3, [pc, #480]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a77      	ldr	r2, [pc, #476]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 8004720:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	e01d      	b.n	8004764 <HAL_RCC_OscConfig+0xd4>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004730:	d10c      	bne.n	800474c <HAL_RCC_OscConfig+0xbc>
 8004732:	4b72      	ldr	r3, [pc, #456]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a71      	ldr	r2, [pc, #452]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 8004738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	4b6f      	ldr	r3, [pc, #444]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a6e      	ldr	r2, [pc, #440]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 8004744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	e00b      	b.n	8004764 <HAL_RCC_OscConfig+0xd4>
 800474c:	4b6b      	ldr	r3, [pc, #428]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a6a      	ldr	r2, [pc, #424]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 8004752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	4b68      	ldr	r3, [pc, #416]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a67      	ldr	r2, [pc, #412]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 800475e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004762:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d013      	beq.n	8004794 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476c:	f7fc f80e 	bl	800078c <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004774:	f7fc f80a 	bl	800078c <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b64      	cmp	r3, #100	; 0x64
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e200      	b.n	8004b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004786:	4b5d      	ldr	r3, [pc, #372]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f0      	beq.n	8004774 <HAL_RCC_OscConfig+0xe4>
 8004792:	e014      	b.n	80047be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004794:	f7fb fffa 	bl	800078c <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800479c:	f7fb fff6 	bl	800078c <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	; 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e1ec      	b.n	8004b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ae:	4b53      	ldr	r3, [pc, #332]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x10c>
 80047ba:	e000      	b.n	80047be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d063      	beq.n	8004892 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047ca:	4b4c      	ldr	r3, [pc, #304]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f003 030c 	and.w	r3, r3, #12
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00b      	beq.n	80047ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80047d6:	4b49      	ldr	r3, [pc, #292]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f003 030c 	and.w	r3, r3, #12
 80047de:	2b08      	cmp	r3, #8
 80047e0:	d11c      	bne.n	800481c <HAL_RCC_OscConfig+0x18c>
 80047e2:	4b46      	ldr	r3, [pc, #280]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d116      	bne.n	800481c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ee:	4b43      	ldr	r3, [pc, #268]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d005      	beq.n	8004806 <HAL_RCC_OscConfig+0x176>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d001      	beq.n	8004806 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e1c0      	b.n	8004b88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004806:	4b3d      	ldr	r3, [pc, #244]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	4939      	ldr	r1, [pc, #228]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 8004816:	4313      	orrs	r3, r2
 8004818:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800481a:	e03a      	b.n	8004892 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d020      	beq.n	8004866 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004824:	4b36      	ldr	r3, [pc, #216]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 8004826:	2201      	movs	r2, #1
 8004828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800482a:	f7fb ffaf 	bl	800078c <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004832:	f7fb ffab 	bl	800078c <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e1a1      	b.n	8004b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004844:	4b2d      	ldr	r3, [pc, #180]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0f0      	beq.n	8004832 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004850:	4b2a      	ldr	r3, [pc, #168]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	4927      	ldr	r1, [pc, #156]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 8004860:	4313      	orrs	r3, r2
 8004862:	600b      	str	r3, [r1, #0]
 8004864:	e015      	b.n	8004892 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004866:	4b26      	ldr	r3, [pc, #152]	; (8004900 <HAL_RCC_OscConfig+0x270>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486c:	f7fb ff8e 	bl	800078c <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004874:	f7fb ff8a 	bl	800078c <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e180      	b.n	8004b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004886:	4b1d      	ldr	r3, [pc, #116]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1f0      	bne.n	8004874 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b00      	cmp	r3, #0
 800489c:	d03a      	beq.n	8004914 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d019      	beq.n	80048da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048a6:	4b17      	ldr	r3, [pc, #92]	; (8004904 <HAL_RCC_OscConfig+0x274>)
 80048a8:	2201      	movs	r2, #1
 80048aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ac:	f7fb ff6e 	bl	800078c <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048b4:	f7fb ff6a 	bl	800078c <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e160      	b.n	8004b88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048c6:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <HAL_RCC_OscConfig+0x26c>)
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0f0      	beq.n	80048b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80048d2:	2001      	movs	r0, #1
 80048d4:	f000 faba 	bl	8004e4c <RCC_Delay>
 80048d8:	e01c      	b.n	8004914 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048da:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <HAL_RCC_OscConfig+0x274>)
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048e0:	f7fb ff54 	bl	800078c <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e6:	e00f      	b.n	8004908 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048e8:	f7fb ff50 	bl	800078c <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d908      	bls.n	8004908 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e146      	b.n	8004b88 <HAL_RCC_OscConfig+0x4f8>
 80048fa:	bf00      	nop
 80048fc:	40021000 	.word	0x40021000
 8004900:	42420000 	.word	0x42420000
 8004904:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004908:	4b92      	ldr	r3, [pc, #584]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1e9      	bne.n	80048e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 80a6 	beq.w	8004a6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004922:	2300      	movs	r3, #0
 8004924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004926:	4b8b      	ldr	r3, [pc, #556]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10d      	bne.n	800494e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004932:	4b88      	ldr	r3, [pc, #544]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	4a87      	ldr	r2, [pc, #540]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 8004938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800493c:	61d3      	str	r3, [r2, #28]
 800493e:	4b85      	ldr	r3, [pc, #532]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004946:	60bb      	str	r3, [r7, #8]
 8004948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800494a:	2301      	movs	r3, #1
 800494c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800494e:	4b82      	ldr	r3, [pc, #520]	; (8004b58 <HAL_RCC_OscConfig+0x4c8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004956:	2b00      	cmp	r3, #0
 8004958:	d118      	bne.n	800498c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800495a:	4b7f      	ldr	r3, [pc, #508]	; (8004b58 <HAL_RCC_OscConfig+0x4c8>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a7e      	ldr	r2, [pc, #504]	; (8004b58 <HAL_RCC_OscConfig+0x4c8>)
 8004960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004966:	f7fb ff11 	bl	800078c <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800496e:	f7fb ff0d 	bl	800078c <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b64      	cmp	r3, #100	; 0x64
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e103      	b.n	8004b88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004980:	4b75      	ldr	r3, [pc, #468]	; (8004b58 <HAL_RCC_OscConfig+0x4c8>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0f0      	beq.n	800496e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d106      	bne.n	80049a2 <HAL_RCC_OscConfig+0x312>
 8004994:	4b6f      	ldr	r3, [pc, #444]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	4a6e      	ldr	r2, [pc, #440]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 800499a:	f043 0301 	orr.w	r3, r3, #1
 800499e:	6213      	str	r3, [r2, #32]
 80049a0:	e02d      	b.n	80049fe <HAL_RCC_OscConfig+0x36e>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10c      	bne.n	80049c4 <HAL_RCC_OscConfig+0x334>
 80049aa:	4b6a      	ldr	r3, [pc, #424]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	4a69      	ldr	r2, [pc, #420]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 80049b0:	f023 0301 	bic.w	r3, r3, #1
 80049b4:	6213      	str	r3, [r2, #32]
 80049b6:	4b67      	ldr	r3, [pc, #412]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	4a66      	ldr	r2, [pc, #408]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 80049bc:	f023 0304 	bic.w	r3, r3, #4
 80049c0:	6213      	str	r3, [r2, #32]
 80049c2:	e01c      	b.n	80049fe <HAL_RCC_OscConfig+0x36e>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	2b05      	cmp	r3, #5
 80049ca:	d10c      	bne.n	80049e6 <HAL_RCC_OscConfig+0x356>
 80049cc:	4b61      	ldr	r3, [pc, #388]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	4a60      	ldr	r2, [pc, #384]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 80049d2:	f043 0304 	orr.w	r3, r3, #4
 80049d6:	6213      	str	r3, [r2, #32]
 80049d8:	4b5e      	ldr	r3, [pc, #376]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	4a5d      	ldr	r2, [pc, #372]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	6213      	str	r3, [r2, #32]
 80049e4:	e00b      	b.n	80049fe <HAL_RCC_OscConfig+0x36e>
 80049e6:	4b5b      	ldr	r3, [pc, #364]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	4a5a      	ldr	r2, [pc, #360]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 80049ec:	f023 0301 	bic.w	r3, r3, #1
 80049f0:	6213      	str	r3, [r2, #32]
 80049f2:	4b58      	ldr	r3, [pc, #352]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	4a57      	ldr	r2, [pc, #348]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 80049f8:	f023 0304 	bic.w	r3, r3, #4
 80049fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d015      	beq.n	8004a32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a06:	f7fb fec1 	bl	800078c <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a0c:	e00a      	b.n	8004a24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a0e:	f7fb febd 	bl	800078c <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e0b1      	b.n	8004b88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a24:	4b4b      	ldr	r3, [pc, #300]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0ee      	beq.n	8004a0e <HAL_RCC_OscConfig+0x37e>
 8004a30:	e014      	b.n	8004a5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a32:	f7fb feab 	bl	800078c <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a38:	e00a      	b.n	8004a50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a3a:	f7fb fea7 	bl	800078c <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e09b      	b.n	8004b88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a50:	4b40      	ldr	r3, [pc, #256]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1ee      	bne.n	8004a3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a5c:	7dfb      	ldrb	r3, [r7, #23]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d105      	bne.n	8004a6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a62:	4b3c      	ldr	r3, [pc, #240]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	4a3b      	ldr	r2, [pc, #236]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 8004a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 8087 	beq.w	8004b86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a78:	4b36      	ldr	r3, [pc, #216]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f003 030c 	and.w	r3, r3, #12
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d061      	beq.n	8004b48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d146      	bne.n	8004b1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a8c:	4b33      	ldr	r3, [pc, #204]	; (8004b5c <HAL_RCC_OscConfig+0x4cc>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a92:	f7fb fe7b 	bl	800078c <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a98:	e008      	b.n	8004aac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a9a:	f7fb fe77 	bl	800078c <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e06d      	b.n	8004b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aac:	4b29      	ldr	r3, [pc, #164]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1f0      	bne.n	8004a9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac0:	d108      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ac2:	4b24      	ldr	r3, [pc, #144]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	4921      	ldr	r1, [pc, #132]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ad4:	4b1f      	ldr	r3, [pc, #124]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a19      	ldr	r1, [r3, #32]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	491b      	ldr	r1, [pc, #108]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aec:	4b1b      	ldr	r3, [pc, #108]	; (8004b5c <HAL_RCC_OscConfig+0x4cc>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af2:	f7fb fe4b 	bl	800078c <HAL_GetTick>
 8004af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004af8:	e008      	b.n	8004b0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004afa:	f7fb fe47 	bl	800078c <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d901      	bls.n	8004b0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e03d      	b.n	8004b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b0c:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0f0      	beq.n	8004afa <HAL_RCC_OscConfig+0x46a>
 8004b18:	e035      	b.n	8004b86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b1a:	4b10      	ldr	r3, [pc, #64]	; (8004b5c <HAL_RCC_OscConfig+0x4cc>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b20:	f7fb fe34 	bl	800078c <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b28:	f7fb fe30 	bl	800078c <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e026      	b.n	8004b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b3a:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <HAL_RCC_OscConfig+0x4c4>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f0      	bne.n	8004b28 <HAL_RCC_OscConfig+0x498>
 8004b46:	e01e      	b.n	8004b86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d107      	bne.n	8004b60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e019      	b.n	8004b88 <HAL_RCC_OscConfig+0x4f8>
 8004b54:	40021000 	.word	0x40021000
 8004b58:	40007000 	.word	0x40007000
 8004b5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b60:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <HAL_RCC_OscConfig+0x500>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d106      	bne.n	8004b82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d001      	beq.n	8004b86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e000      	b.n	8004b88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40021000 	.word	0x40021000

08004b94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e0d0      	b.n	8004d4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba8:	4b6a      	ldr	r3, [pc, #424]	; (8004d54 <HAL_RCC_ClockConfig+0x1c0>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d910      	bls.n	8004bd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb6:	4b67      	ldr	r3, [pc, #412]	; (8004d54 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f023 0207 	bic.w	r2, r3, #7
 8004bbe:	4965      	ldr	r1, [pc, #404]	; (8004d54 <HAL_RCC_ClockConfig+0x1c0>)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc6:	4b63      	ldr	r3, [pc, #396]	; (8004d54 <HAL_RCC_ClockConfig+0x1c0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d001      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e0b8      	b.n	8004d4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d020      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bf0:	4b59      	ldr	r3, [pc, #356]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	4a58      	ldr	r2, [pc, #352]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004bfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0308 	and.w	r3, r3, #8
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c08:	4b53      	ldr	r3, [pc, #332]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	4a52      	ldr	r2, [pc, #328]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004c0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c14:	4b50      	ldr	r3, [pc, #320]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	494d      	ldr	r1, [pc, #308]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d040      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d107      	bne.n	8004c4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c3a:	4b47      	ldr	r3, [pc, #284]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d115      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e07f      	b.n	8004d4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d107      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c52:	4b41      	ldr	r3, [pc, #260]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d109      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e073      	b.n	8004d4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c62:	4b3d      	ldr	r3, [pc, #244]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e06b      	b.n	8004d4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c72:	4b39      	ldr	r3, [pc, #228]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f023 0203 	bic.w	r2, r3, #3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	4936      	ldr	r1, [pc, #216]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c84:	f7fb fd82 	bl	800078c <HAL_GetTick>
 8004c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8a:	e00a      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c8c:	f7fb fd7e 	bl	800078c <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e053      	b.n	8004d4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca2:	4b2d      	ldr	r3, [pc, #180]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f003 020c 	and.w	r2, r3, #12
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d1eb      	bne.n	8004c8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cb4:	4b27      	ldr	r3, [pc, #156]	; (8004d54 <HAL_RCC_ClockConfig+0x1c0>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d210      	bcs.n	8004ce4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc2:	4b24      	ldr	r3, [pc, #144]	; (8004d54 <HAL_RCC_ClockConfig+0x1c0>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f023 0207 	bic.w	r2, r3, #7
 8004cca:	4922      	ldr	r1, [pc, #136]	; (8004d54 <HAL_RCC_ClockConfig+0x1c0>)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd2:	4b20      	ldr	r3, [pc, #128]	; (8004d54 <HAL_RCC_ClockConfig+0x1c0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0307 	and.w	r3, r3, #7
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d001      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e032      	b.n	8004d4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d008      	beq.n	8004d02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cf0:	4b19      	ldr	r3, [pc, #100]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	4916      	ldr	r1, [pc, #88]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0308 	and.w	r3, r3, #8
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d009      	beq.n	8004d22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d0e:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	490e      	ldr	r1, [pc, #56]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d22:	f000 f821 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 8004d26:	4602      	mov	r2, r0
 8004d28:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	091b      	lsrs	r3, r3, #4
 8004d2e:	f003 030f 	and.w	r3, r3, #15
 8004d32:	490a      	ldr	r1, [pc, #40]	; (8004d5c <HAL_RCC_ClockConfig+0x1c8>)
 8004d34:	5ccb      	ldrb	r3, [r1, r3]
 8004d36:	fa22 f303 	lsr.w	r3, r2, r3
 8004d3a:	4a09      	ldr	r2, [pc, #36]	; (8004d60 <HAL_RCC_ClockConfig+0x1cc>)
 8004d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d3e:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <HAL_RCC_ClockConfig+0x1d0>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fb fce0 	bl	8000708 <HAL_InitTick>

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	40022000 	.word	0x40022000
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	080099d8 	.word	0x080099d8
 8004d60:	20000000 	.word	0x20000000
 8004d64:	20000004 	.word	0x20000004

08004d68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	2300      	movs	r3, #0
 8004d74:	60bb      	str	r3, [r7, #8]
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d82:	4b1e      	ldr	r3, [pc, #120]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x94>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d002      	beq.n	8004d98 <HAL_RCC_GetSysClockFreq+0x30>
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d003      	beq.n	8004d9e <HAL_RCC_GetSysClockFreq+0x36>
 8004d96:	e027      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d98:	4b19      	ldr	r3, [pc, #100]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d9a:	613b      	str	r3, [r7, #16]
      break;
 8004d9c:	e027      	b.n	8004dee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	0c9b      	lsrs	r3, r3, #18
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	4a17      	ldr	r2, [pc, #92]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004da8:	5cd3      	ldrb	r3, [r2, r3]
 8004daa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d010      	beq.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004db6:	4b11      	ldr	r3, [pc, #68]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x94>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	0c5b      	lsrs	r3, r3, #17
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	4a11      	ldr	r2, [pc, #68]	; (8004e08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004dc2:	5cd3      	ldrb	r3, [r2, r3]
 8004dc4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a0d      	ldr	r2, [pc, #52]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dca:	fb03 f202 	mul.w	r2, r3, r2
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd4:	617b      	str	r3, [r7, #20]
 8004dd6:	e004      	b.n	8004de2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a0c      	ldr	r2, [pc, #48]	; (8004e0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004ddc:	fb02 f303 	mul.w	r3, r2, r3
 8004de0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	613b      	str	r3, [r7, #16]
      break;
 8004de6:	e002      	b.n	8004dee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004de8:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dea:	613b      	str	r3, [r7, #16]
      break;
 8004dec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dee:	693b      	ldr	r3, [r7, #16]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	371c      	adds	r7, #28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bc80      	pop	{r7}
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	007a1200 	.word	0x007a1200
 8004e04:	080099f0 	.word	0x080099f0
 8004e08:	08009a00 	.word	0x08009a00
 8004e0c:	003d0900 	.word	0x003d0900

08004e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e14:	4b02      	ldr	r3, [pc, #8]	; (8004e20 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e16:	681b      	ldr	r3, [r3, #0]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bc80      	pop	{r7}
 8004e1e:	4770      	bx	lr
 8004e20:	20000000 	.word	0x20000000

08004e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e28:	f7ff fff2 	bl	8004e10 <HAL_RCC_GetHCLKFreq>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	0a1b      	lsrs	r3, r3, #8
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	4903      	ldr	r1, [pc, #12]	; (8004e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e3a:	5ccb      	ldrb	r3, [r1, r3]
 8004e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40021000 	.word	0x40021000
 8004e48:	080099e8 	.word	0x080099e8

08004e4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e54:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <RCC_Delay+0x34>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a0a      	ldr	r2, [pc, #40]	; (8004e84 <RCC_Delay+0x38>)
 8004e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5e:	0a5b      	lsrs	r3, r3, #9
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	fb02 f303 	mul.w	r3, r2, r3
 8004e66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e68:	bf00      	nop
  }
  while (Delay --);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	1e5a      	subs	r2, r3, #1
 8004e6e:	60fa      	str	r2, [r7, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1f9      	bne.n	8004e68 <RCC_Delay+0x1c>
}
 8004e74:	bf00      	nop
 8004e76:	bf00      	nop
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bc80      	pop	{r7}
 8004e7e:	4770      	bx	lr
 8004e80:	20000000 	.word	0x20000000
 8004e84:	10624dd3 	.word	0x10624dd3

08004e88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	2300      	movs	r3, #0
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d07d      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ea8:	4b4f      	ldr	r3, [pc, #316]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10d      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eb4:	4b4c      	ldr	r3, [pc, #304]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	4a4b      	ldr	r2, [pc, #300]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	61d3      	str	r3, [r2, #28]
 8004ec0:	4b49      	ldr	r3, [pc, #292]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	60bb      	str	r3, [r7, #8]
 8004eca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed0:	4b46      	ldr	r3, [pc, #280]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d118      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004edc:	4b43      	ldr	r3, [pc, #268]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a42      	ldr	r2, [pc, #264]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ee8:	f7fb fc50 	bl	800078c <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eee:	e008      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef0:	f7fb fc4c 	bl	800078c <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b64      	cmp	r3, #100	; 0x64
 8004efc:	d901      	bls.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e06d      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f02:	4b3a      	ldr	r3, [pc, #232]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0f0      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f0e:	4b36      	ldr	r3, [pc, #216]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d02e      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d027      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f2c:	4b2e      	ldr	r3, [pc, #184]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f34:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f36:	4b2e      	ldr	r3, [pc, #184]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f38:	2201      	movs	r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f3c:	4b2c      	ldr	r3, [pc, #176]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f42:	4a29      	ldr	r2, [pc, #164]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d014      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f52:	f7fb fc1b 	bl	800078c <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f58:	e00a      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f5a:	f7fb fc17 	bl	800078c <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e036      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f70:	4b1d      	ldr	r3, [pc, #116]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0ee      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f7c:	4b1a      	ldr	r3, [pc, #104]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	4917      	ldr	r1, [pc, #92]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f8e:	7dfb      	ldrb	r3, [r7, #23]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d105      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f94:	4b14      	ldr	r3, [pc, #80]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	4a13      	ldr	r2, [pc, #76]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d008      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fac:	4b0e      	ldr	r3, [pc, #56]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	490b      	ldr	r1, [pc, #44]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0310 	and.w	r3, r3, #16
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d008      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fca:	4b07      	ldr	r3, [pc, #28]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	4904      	ldr	r1, [pc, #16]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	40007000 	.word	0x40007000
 8004ff0:	42420440 	.word	0x42420440

08004ff4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	f107 0014 	add.w	r0, r7, #20
 8005002:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	b004      	add	sp, #16
 8005012:	4770      	bx	lr

08005014 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005024:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005028:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	b29a      	uxth	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	bc80      	pop	{r7}
 800503e:	4770      	bx	lr

08005040 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005048:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800504c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005054:	b29a      	uxth	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	b29b      	uxth	r3, r3
 800505a:	43db      	mvns	r3, r3
 800505c:	b29b      	uxth	r3, r3
 800505e:	4013      	ands	r3, r2
 8005060:	b29a      	uxth	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr

08005074 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	bc80      	pop	{r7}
 800508a:	4770      	bx	lr

0800508c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800508c:	b084      	sub	sp, #16
 800508e:	b480      	push	{r7}
 8005090:	b083      	sub	sp, #12
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
 8005096:	f107 0014 	add.w	r0, r7, #20
 800509a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	b004      	add	sp, #16
 80050ca:	4770      	bx	lr

080050cc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b09d      	sub	sp, #116	; 0x74
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80050ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	78db      	ldrb	r3, [r3, #3]
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d81f      	bhi.n	800513e <USB_ActivateEndpoint+0x72>
 80050fe:	a201      	add	r2, pc, #4	; (adr r2, 8005104 <USB_ActivateEndpoint+0x38>)
 8005100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005104:	08005115 	.word	0x08005115
 8005108:	08005131 	.word	0x08005131
 800510c:	08005147 	.word	0x08005147
 8005110:	08005123 	.word	0x08005123
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005114:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005118:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800511c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005120:	e012      	b.n	8005148 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005122:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005126:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800512a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800512e:	e00b      	b.n	8005148 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005130:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005134:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005138:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800513c:	e004      	b.n	8005148 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005144:	e000      	b.n	8005148 <USB_ActivateEndpoint+0x7c>
      break;
 8005146:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	441a      	add	r2, r3
 8005152:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800515a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800515e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005166:	b29b      	uxth	r3, r3
 8005168:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	b29b      	uxth	r3, r3
 8005178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800517c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005180:	b29a      	uxth	r2, r3
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	b29b      	uxth	r3, r3
 8005188:	4313      	orrs	r3, r2
 800518a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	441a      	add	r2, r3
 8005198:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800519c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	7b1b      	ldrb	r3, [r3, #12]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f040 8178 	bne.w	80054aa <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	785b      	ldrb	r3, [r3, #1]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 8084 	beq.w	80052cc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	61bb      	str	r3, [r7, #24]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	461a      	mov	r2, r3
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	4413      	add	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	011a      	lsls	r2, r3, #4
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	88db      	ldrh	r3, [r3, #6]
 80051ec:	085b      	lsrs	r3, r3, #1
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	827b      	strh	r3, [r7, #18]
 8005206:	8a7b      	ldrh	r3, [r7, #18]
 8005208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520c:	2b00      	cmp	r3, #0
 800520e:	d01b      	beq.n	8005248 <USB_ActivateEndpoint+0x17c>
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	b29b      	uxth	r3, r3
 800521e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005226:	823b      	strh	r3, [r7, #16]
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	441a      	add	r2, r3
 8005232:	8a3b      	ldrh	r3, [r7, #16]
 8005234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800523c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005240:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005244:	b29b      	uxth	r3, r3
 8005246:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	78db      	ldrb	r3, [r3, #3]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d020      	beq.n	8005292 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	b29b      	uxth	r3, r3
 800525e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005266:	81bb      	strh	r3, [r7, #12]
 8005268:	89bb      	ldrh	r3, [r7, #12]
 800526a:	f083 0320 	eor.w	r3, r3, #32
 800526e:	81bb      	strh	r3, [r7, #12]
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	441a      	add	r2, r3
 800527a:	89bb      	ldrh	r3, [r7, #12]
 800527c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800528c:	b29b      	uxth	r3, r3
 800528e:	8013      	strh	r3, [r2, #0]
 8005290:	e2d5      	b.n	800583e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052a8:	81fb      	strh	r3, [r7, #14]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	441a      	add	r2, r3
 80052b4:	89fb      	ldrh	r3, [r7, #14]
 80052b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	8013      	strh	r3, [r2, #0]
 80052ca:	e2b8      	b.n	800583e <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	633b      	str	r3, [r7, #48]	; 0x30
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	461a      	mov	r2, r3
 80052da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052dc:	4413      	add	r3, r2
 80052de:	633b      	str	r3, [r7, #48]	; 0x30
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	011a      	lsls	r2, r3, #4
 80052e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80052ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	88db      	ldrh	r3, [r3, #6]
 80052f4:	085b      	lsrs	r3, r3, #1
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fe:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	62bb      	str	r3, [r7, #40]	; 0x28
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800530a:	b29b      	uxth	r3, r3
 800530c:	461a      	mov	r2, r3
 800530e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005310:	4413      	add	r3, r2
 8005312:	62bb      	str	r3, [r7, #40]	; 0x28
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	011a      	lsls	r2, r3, #4
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	4413      	add	r3, r2
 800531e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005322:	627b      	str	r3, [r7, #36]	; 0x24
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	b29b      	uxth	r3, r3
 800532a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800532e:	b29a      	uxth	r2, r3
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	801a      	strh	r2, [r3, #0]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	2b3e      	cmp	r3, #62	; 0x3e
 800533a:	d91d      	bls.n	8005378 <USB_ActivateEndpoint+0x2ac>
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	095b      	lsrs	r3, r3, #5
 8005342:	66bb      	str	r3, [r7, #104]	; 0x68
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f003 031f 	and.w	r3, r3, #31
 800534c:	2b00      	cmp	r3, #0
 800534e:	d102      	bne.n	8005356 <USB_ActivateEndpoint+0x28a>
 8005350:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005352:	3b01      	subs	r3, #1
 8005354:	66bb      	str	r3, [r7, #104]	; 0x68
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	b29a      	uxth	r2, r3
 800535c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800535e:	b29b      	uxth	r3, r3
 8005360:	029b      	lsls	r3, r3, #10
 8005362:	b29b      	uxth	r3, r3
 8005364:	4313      	orrs	r3, r2
 8005366:	b29b      	uxth	r3, r3
 8005368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800536c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005370:	b29a      	uxth	r2, r3
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	801a      	strh	r2, [r3, #0]
 8005376:	e026      	b.n	80053c6 <USB_ActivateEndpoint+0x2fa>
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10a      	bne.n	8005396 <USB_ActivateEndpoint+0x2ca>
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b29b      	uxth	r3, r3
 8005386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800538a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800538e:	b29a      	uxth	r2, r3
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	801a      	strh	r2, [r3, #0]
 8005394:	e017      	b.n	80053c6 <USB_ActivateEndpoint+0x2fa>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	085b      	lsrs	r3, r3, #1
 800539c:	66bb      	str	r3, [r7, #104]	; 0x68
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <USB_ActivateEndpoint+0x2e4>
 80053aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053ac:	3301      	adds	r3, #1
 80053ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	029b      	lsls	r3, r3, #10
 80053bc:	b29b      	uxth	r3, r3
 80053be:	4313      	orrs	r3, r2
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	881b      	ldrh	r3, [r3, #0]
 80053d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80053d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80053d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d01b      	beq.n	8005416 <USB_ActivateEndpoint+0x34a>
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f4:	843b      	strh	r3, [r7, #32]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	441a      	add	r2, r3
 8005400:	8c3b      	ldrh	r3, [r7, #32]
 8005402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800540a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800540e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005412:	b29b      	uxth	r3, r3
 8005414:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d124      	bne.n	8005468 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	b29b      	uxth	r3, r3
 800542c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005434:	83bb      	strh	r3, [r7, #28]
 8005436:	8bbb      	ldrh	r3, [r7, #28]
 8005438:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800543c:	83bb      	strh	r3, [r7, #28]
 800543e:	8bbb      	ldrh	r3, [r7, #28]
 8005440:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005444:	83bb      	strh	r3, [r7, #28]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	441a      	add	r2, r3
 8005450:	8bbb      	ldrh	r3, [r7, #28]
 8005452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800545a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800545e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005462:	b29b      	uxth	r3, r3
 8005464:	8013      	strh	r3, [r2, #0]
 8005466:	e1ea      	b.n	800583e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	b29b      	uxth	r3, r3
 8005476:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800547a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547e:	83fb      	strh	r3, [r7, #30]
 8005480:	8bfb      	ldrh	r3, [r7, #30]
 8005482:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005486:	83fb      	strh	r3, [r7, #30]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	441a      	add	r2, r3
 8005492:	8bfb      	ldrh	r3, [r7, #30]
 8005494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800549c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	8013      	strh	r3, [r2, #0]
 80054a8:	e1c9      	b.n	800583e <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	78db      	ldrb	r3, [r3, #3]
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d11e      	bne.n	80054f0 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	441a      	add	r2, r3
 80054d6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80054da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80054e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	8013      	strh	r3, [r2, #0]
 80054ee:	e01d      	b.n	800552c <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005506:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	441a      	add	r2, r3
 8005514:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800551c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005528:	b29b      	uxth	r3, r3
 800552a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005536:	b29b      	uxth	r3, r3
 8005538:	461a      	mov	r2, r3
 800553a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800553c:	4413      	add	r3, r2
 800553e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	011a      	lsls	r2, r3, #4
 8005546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005548:	4413      	add	r3, r2
 800554a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800554e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	891b      	ldrh	r3, [r3, #8]
 8005554:	085b      	lsrs	r3, r3, #1
 8005556:	b29b      	uxth	r3, r3
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800555e:	801a      	strh	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	657b      	str	r3, [r7, #84]	; 0x54
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800556a:	b29b      	uxth	r3, r3
 800556c:	461a      	mov	r2, r3
 800556e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005570:	4413      	add	r3, r2
 8005572:	657b      	str	r3, [r7, #84]	; 0x54
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	011a      	lsls	r2, r3, #4
 800557a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800557c:	4413      	add	r3, r2
 800557e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005582:	653b      	str	r3, [r7, #80]	; 0x50
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	895b      	ldrh	r3, [r3, #10]
 8005588:	085b      	lsrs	r3, r3, #1
 800558a:	b29b      	uxth	r3, r3
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005592:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	785b      	ldrb	r3, [r3, #1]
 8005598:	2b00      	cmp	r3, #0
 800559a:	f040 8093 	bne.w	80056c4 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4413      	add	r3, r2
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80055ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80055b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d01b      	beq.n	80055f2 <USB_ActivateEndpoint+0x526>
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	441a      	add	r2, r3
 80055dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80055de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005600:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	d01b      	beq.n	8005642 <USB_ActivateEndpoint+0x576>
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	b29b      	uxth	r3, r3
 8005618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800561c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005620:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	441a      	add	r2, r3
 800562c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800562e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800563a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800563e:	b29b      	uxth	r3, r3
 8005640:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	b29b      	uxth	r3, r3
 8005650:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005658:	873b      	strh	r3, [r7, #56]	; 0x38
 800565a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800565c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005660:	873b      	strh	r3, [r7, #56]	; 0x38
 8005662:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005664:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005668:	873b      	strh	r3, [r7, #56]	; 0x38
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	441a      	add	r2, r3
 8005674:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800567a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800567e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005686:	b29b      	uxth	r3, r3
 8005688:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	b29b      	uxth	r3, r3
 8005698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056a0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	441a      	add	r2, r3
 80056ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056be:	b29b      	uxth	r3, r3
 80056c0:	8013      	strh	r3, [r2, #0]
 80056c2:	e0bc      	b.n	800583e <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80056d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80056d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01d      	beq.n	800571c <USB_ActivateEndpoint+0x650>
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	441a      	add	r2, r3
 8005704:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800570c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005718:	b29b      	uxth	r3, r3
 800571a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800572c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005734:	2b00      	cmp	r3, #0
 8005736:	d01d      	beq.n	8005774 <USB_ActivateEndpoint+0x6a8>
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	b29b      	uxth	r3, r3
 8005746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800574a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	441a      	add	r2, r3
 800575c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800576c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005770:	b29b      	uxth	r3, r3
 8005772:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	78db      	ldrb	r3, [r3, #3]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d024      	beq.n	80057c6 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	b29b      	uxth	r3, r3
 800578a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800578e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005792:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005796:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800579a:	f083 0320 	eor.w	r3, r3, #32
 800579e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	441a      	add	r2, r3
 80057ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80057b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	8013      	strh	r3, [r2, #0]
 80057c4:	e01d      	b.n	8005802 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	441a      	add	r2, r3
 80057ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80057ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057fe:	b29b      	uxth	r3, r3
 8005800:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	b29b      	uxth	r3, r3
 8005810:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005818:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	441a      	add	r2, r3
 8005826:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800582a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800582e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800583a:	b29b      	uxth	r3, r3
 800583c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800583e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005842:	4618      	mov	r0, r3
 8005844:	3774      	adds	r7, #116	; 0x74
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr

0800584c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800584c:	b480      	push	{r7}
 800584e:	b08d      	sub	sp, #52	; 0x34
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	7b1b      	ldrb	r3, [r3, #12]
 800585a:	2b00      	cmp	r3, #0
 800585c:	f040 808e 	bne.w	800597c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	785b      	ldrb	r3, [r3, #1]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d044      	beq.n	80058f2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	81bb      	strh	r3, [r7, #12]
 8005876:	89bb      	ldrh	r3, [r7, #12]
 8005878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587c:	2b00      	cmp	r3, #0
 800587e:	d01b      	beq.n	80058b8 <USB_DeactivateEndpoint+0x6c>
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	b29b      	uxth	r3, r3
 800588e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005896:	817b      	strh	r3, [r7, #10]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	441a      	add	r2, r3
 80058a2:	897b      	ldrh	r3, [r7, #10]
 80058a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ce:	813b      	strh	r3, [r7, #8]
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	441a      	add	r2, r3
 80058da:	893b      	ldrh	r3, [r7, #8]
 80058dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	8013      	strh	r3, [r2, #0]
 80058f0:	e192      	b.n	8005c18 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	827b      	strh	r3, [r7, #18]
 8005900:	8a7b      	ldrh	r3, [r7, #18]
 8005902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d01b      	beq.n	8005942 <USB_DeactivateEndpoint+0xf6>
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	b29b      	uxth	r3, r3
 8005918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800591c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005920:	823b      	strh	r3, [r7, #16]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	441a      	add	r2, r3
 800592c:	8a3b      	ldrh	r3, [r7, #16]
 800592e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005936:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800593a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800593e:	b29b      	uxth	r3, r3
 8005940:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	b29b      	uxth	r3, r3
 8005950:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005958:	81fb      	strh	r3, [r7, #14]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	441a      	add	r2, r3
 8005964:	89fb      	ldrh	r3, [r7, #14]
 8005966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800596a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800596e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005976:	b29b      	uxth	r3, r3
 8005978:	8013      	strh	r3, [r2, #0]
 800597a:	e14d      	b.n	8005c18 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	785b      	ldrb	r3, [r3, #1]
 8005980:	2b00      	cmp	r3, #0
 8005982:	f040 80a5 	bne.w	8005ad0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	843b      	strh	r3, [r7, #32]
 8005994:	8c3b      	ldrh	r3, [r7, #32]
 8005996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d01b      	beq.n	80059d6 <USB_DeactivateEndpoint+0x18a>
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b4:	83fb      	strh	r3, [r7, #30]
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	441a      	add	r2, r3
 80059c0:	8bfb      	ldrh	r3, [r7, #30]
 80059c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	83bb      	strh	r3, [r7, #28]
 80059e4:	8bbb      	ldrh	r3, [r7, #28]
 80059e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d01b      	beq.n	8005a26 <USB_DeactivateEndpoint+0x1da>
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a04:	837b      	strh	r3, [r7, #26]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	441a      	add	r2, r3
 8005a10:	8b7b      	ldrh	r3, [r7, #26]
 8005a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3c:	833b      	strh	r3, [r7, #24]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	441a      	add	r2, r3
 8005a48:	8b3b      	ldrh	r3, [r7, #24]
 8005a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a74:	82fb      	strh	r3, [r7, #22]
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	441a      	add	r2, r3
 8005a80:	8afb      	ldrh	r3, [r7, #22]
 8005a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aac:	82bb      	strh	r3, [r7, #20]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	441a      	add	r2, r3
 8005ab8:	8abb      	ldrh	r3, [r7, #20]
 8005aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	8013      	strh	r3, [r2, #0]
 8005ace:	e0a3      	b.n	8005c18 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005ade:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01b      	beq.n	8005b20 <USB_DeactivateEndpoint+0x2d4>
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	441a      	add	r2, r3
 8005b0a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005b2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d01b      	beq.n	8005b70 <USB_DeactivateEndpoint+0x324>
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	441a      	add	r2, r3
 8005b5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b86:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	441a      	add	r2, r3
 8005b92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	881b      	ldrh	r3, [r3, #0]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bbe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	441a      	add	r2, r3
 8005bca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf6:	847b      	strh	r3, [r7, #34]	; 0x22
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	441a      	add	r2, r3
 8005c02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3734      	adds	r7, #52	; 0x34
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bc80      	pop	{r7}
 8005c22:	4770      	bx	lr

08005c24 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b0c2      	sub	sp, #264	; 0x108
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c32:	6018      	str	r0, [r3, #0]
 8005c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c3c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	785b      	ldrb	r3, [r3, #1]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	f040 86b7 	bne.w	80069be <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	699a      	ldr	r2, [r3, #24]
 8005c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d908      	bls.n	8005c7e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c7c:	e007      	b.n	8005c8e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	7b1b      	ldrb	r3, [r3, #12]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d13a      	bne.n	8005d14 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6959      	ldr	r1, [r3, #20]
 8005caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	88da      	ldrh	r2, [r3, #6]
 8005cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005cc0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005cc4:	6800      	ldr	r0, [r0, #0]
 8005cc6:	f001 fc9c 	bl	8007602 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	613b      	str	r3, [r7, #16]
 8005cd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	4413      	add	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]
 8005cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	011a      	lsls	r2, r3, #4
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	801a      	strh	r2, [r3, #0]
 8005d10:	f000 be1f 	b.w	8006952 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	78db      	ldrb	r3, [r3, #3]
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	f040 8462 	bne.w	80065ea <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6a1a      	ldr	r2, [r3, #32]
 8005d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	f240 83df 	bls.w	8006502 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	441a      	add	r2, r3
 8005d88:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005d8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d94:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6a1a      	ldr	r2, [r3, #32]
 8005dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005db0:	1ad2      	subs	r2, r2, r3
 8005db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 81c7 	beq.w	8006174 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	633b      	str	r3, [r7, #48]	; 0x30
 8005df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	785b      	ldrb	r3, [r3, #1]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d177      	bne.n	8005ef2 <USB_EPStartXfer+0x2ce>
 8005e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	461a      	mov	r2, r3
 8005e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e22:	4413      	add	r3, r2
 8005e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	011a      	lsls	r2, r3, #4
 8005e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e36:	4413      	add	r3, r2
 8005e38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	801a      	strh	r2, [r3, #0]
 8005e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e52:	2b3e      	cmp	r3, #62	; 0x3e
 8005e54:	d921      	bls.n	8005e9a <USB_EPStartXfer+0x276>
 8005e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e5a:	095b      	lsrs	r3, r3, #5
 8005e5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e64:	f003 031f 	and.w	r3, r3, #31
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d104      	bne.n	8005e76 <USB_EPStartXfer+0x252>
 8005e6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e70:	3b01      	subs	r3, #1
 8005e72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	029b      	lsls	r3, r3, #10
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	4313      	orrs	r3, r2
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	801a      	strh	r2, [r3, #0]
 8005e98:	e050      	b.n	8005f3c <USB_EPStartXfer+0x318>
 8005e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10a      	bne.n	8005eb8 <USB_EPStartXfer+0x294>
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	801a      	strh	r2, [r3, #0]
 8005eb6:	e041      	b.n	8005f3c <USB_EPStartXfer+0x318>
 8005eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ebc:	085b      	lsrs	r3, r3, #1
 8005ebe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d004      	beq.n	8005ed8 <USB_EPStartXfer+0x2b4>
 8005ece:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	881b      	ldrh	r3, [r3, #0]
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	029b      	lsls	r3, r3, #10
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	801a      	strh	r2, [r3, #0]
 8005ef0:	e024      	b.n	8005f3c <USB_EPStartXfer+0x318>
 8005ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	785b      	ldrb	r3, [r3, #1]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d11c      	bne.n	8005f3c <USB_EPStartXfer+0x318>
 8005f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	461a      	mov	r2, r3
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	4413      	add	r3, r2
 8005f18:	633b      	str	r3, [r7, #48]	; 0x30
 8005f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	011a      	lsls	r2, r3, #4
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	895b      	ldrh	r3, [r3, #10]
 8005f48:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6959      	ldr	r1, [r3, #20]
 8005f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f62:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f66:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f6a:	6800      	ldr	r0, [r0, #0]
 8005f6c:	f001 fb49 	bl	8007602 <USB_WritePMA>
            ep->xfer_buff += len;
 8005f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	695a      	ldr	r2, [r3, #20]
 8005f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f80:	441a      	add	r2, r3
 8005f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6a1a      	ldr	r2, [r3, #32]
 8005f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d90f      	bls.n	8005fca <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6a1a      	ldr	r2, [r3, #32]
 8005fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fba:	1ad2      	subs	r2, r2, r3
 8005fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	621a      	str	r2, [r3, #32]
 8005fc8:	e00e      	b.n	8005fe8 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	785b      	ldrb	r3, [r3, #1]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d177      	bne.n	80060e8 <USB_EPStartXfer+0x4c4>
 8005ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ffc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	61bb      	str	r3, [r7, #24]
 8006004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006008:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006012:	b29b      	uxth	r3, r3
 8006014:	461a      	mov	r2, r3
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	4413      	add	r3, r2
 800601a:	61bb      	str	r3, [r7, #24]
 800601c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	011a      	lsls	r2, r3, #4
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	4413      	add	r3, r2
 800602e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006032:	617b      	str	r3, [r7, #20]
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	b29b      	uxth	r3, r3
 800603a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800603e:	b29a      	uxth	r2, r3
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	801a      	strh	r2, [r3, #0]
 8006044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006048:	2b3e      	cmp	r3, #62	; 0x3e
 800604a:	d921      	bls.n	8006090 <USB_EPStartXfer+0x46c>
 800604c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006050:	095b      	lsrs	r3, r3, #5
 8006052:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800605a:	f003 031f 	and.w	r3, r3, #31
 800605e:	2b00      	cmp	r3, #0
 8006060:	d104      	bne.n	800606c <USB_EPStartXfer+0x448>
 8006062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006066:	3b01      	subs	r3, #1
 8006068:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	b29a      	uxth	r2, r3
 8006072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006076:	b29b      	uxth	r3, r3
 8006078:	029b      	lsls	r3, r3, #10
 800607a:	b29b      	uxth	r3, r3
 800607c:	4313      	orrs	r3, r2
 800607e:	b29b      	uxth	r3, r3
 8006080:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006084:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006088:	b29a      	uxth	r2, r3
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	801a      	strh	r2, [r3, #0]
 800608e:	e056      	b.n	800613e <USB_EPStartXfer+0x51a>
 8006090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10a      	bne.n	80060ae <USB_EPStartXfer+0x48a>
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	881b      	ldrh	r3, [r3, #0]
 800609c:	b29b      	uxth	r3, r3
 800609e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	801a      	strh	r2, [r3, #0]
 80060ac:	e047      	b.n	800613e <USB_EPStartXfer+0x51a>
 80060ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b2:	085b      	lsrs	r3, r3, #1
 80060b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80060b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d004      	beq.n	80060ce <USB_EPStartXfer+0x4aa>
 80060c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060c8:	3301      	adds	r3, #1
 80060ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060d8:	b29b      	uxth	r3, r3
 80060da:	029b      	lsls	r3, r3, #10
 80060dc:	b29b      	uxth	r3, r3
 80060de:	4313      	orrs	r3, r2
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	801a      	strh	r2, [r3, #0]
 80060e6:	e02a      	b.n	800613e <USB_EPStartXfer+0x51a>
 80060e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	785b      	ldrb	r3, [r3, #1]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d122      	bne.n	800613e <USB_EPStartXfer+0x51a>
 80060f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	623b      	str	r3, [r7, #32]
 8006104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006108:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006112:	b29b      	uxth	r3, r3
 8006114:	461a      	mov	r2, r3
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	4413      	add	r3, r2
 800611a:	623b      	str	r3, [r7, #32]
 800611c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	011a      	lsls	r2, r3, #4
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	4413      	add	r3, r2
 800612e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006132:	61fb      	str	r3, [r7, #28]
 8006134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006138:	b29a      	uxth	r2, r3
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800613e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	891b      	ldrh	r3, [r3, #8]
 800614a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800614e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6959      	ldr	r1, [r3, #20]
 800615a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800615e:	b29b      	uxth	r3, r3
 8006160:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006164:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006168:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800616c:	6800      	ldr	r0, [r0, #0]
 800616e:	f001 fa48 	bl	8007602 <USB_WritePMA>
 8006172:	e3ee      	b.n	8006952 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	785b      	ldrb	r3, [r3, #1]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d177      	bne.n	8006274 <USB_EPStartXfer+0x650>
 8006184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006188:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006194:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800619e:	b29b      	uxth	r3, r3
 80061a0:	461a      	mov	r2, r3
 80061a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061a4:	4413      	add	r3, r2
 80061a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80061a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	011a      	lsls	r2, r3, #4
 80061b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b8:	4413      	add	r3, r2
 80061ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061be:	647b      	str	r3, [r7, #68]	; 0x44
 80061c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061c2:	881b      	ldrh	r3, [r3, #0]
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ce:	801a      	strh	r2, [r3, #0]
 80061d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d4:	2b3e      	cmp	r3, #62	; 0x3e
 80061d6:	d921      	bls.n	800621c <USB_EPStartXfer+0x5f8>
 80061d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061dc:	095b      	lsrs	r3, r3, #5
 80061de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e6:	f003 031f 	and.w	r3, r3, #31
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d104      	bne.n	80061f8 <USB_EPStartXfer+0x5d4>
 80061ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061f2:	3b01      	subs	r3, #1
 80061f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006202:	b29b      	uxth	r3, r3
 8006204:	029b      	lsls	r3, r3, #10
 8006206:	b29b      	uxth	r3, r3
 8006208:	4313      	orrs	r3, r2
 800620a:	b29b      	uxth	r3, r3
 800620c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006214:	b29a      	uxth	r2, r3
 8006216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006218:	801a      	strh	r2, [r3, #0]
 800621a:	e056      	b.n	80062ca <USB_EPStartXfer+0x6a6>
 800621c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10a      	bne.n	800623a <USB_EPStartXfer+0x616>
 8006224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	b29b      	uxth	r3, r3
 800622a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800622e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006232:	b29a      	uxth	r2, r3
 8006234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006236:	801a      	strh	r2, [r3, #0]
 8006238:	e047      	b.n	80062ca <USB_EPStartXfer+0x6a6>
 800623a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800623e:	085b      	lsrs	r3, r3, #1
 8006240:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d004      	beq.n	800625a <USB_EPStartXfer+0x636>
 8006250:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006254:	3301      	adds	r3, #1
 8006256:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800625a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	b29a      	uxth	r2, r3
 8006260:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006264:	b29b      	uxth	r3, r3
 8006266:	029b      	lsls	r3, r3, #10
 8006268:	b29b      	uxth	r3, r3
 800626a:	4313      	orrs	r3, r2
 800626c:	b29a      	uxth	r2, r3
 800626e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006270:	801a      	strh	r2, [r3, #0]
 8006272:	e02a      	b.n	80062ca <USB_EPStartXfer+0x6a6>
 8006274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	785b      	ldrb	r3, [r3, #1]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d122      	bne.n	80062ca <USB_EPStartXfer+0x6a6>
 8006284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006288:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	653b      	str	r3, [r7, #80]	; 0x50
 8006290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006294:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800629e:	b29b      	uxth	r3, r3
 80062a0:	461a      	mov	r2, r3
 80062a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062a4:	4413      	add	r3, r2
 80062a6:	653b      	str	r3, [r7, #80]	; 0x50
 80062a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	011a      	lsls	r2, r3, #4
 80062b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062b8:	4413      	add	r3, r2
 80062ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80062ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	891b      	ldrh	r3, [r3, #8]
 80062d6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6959      	ldr	r1, [r3, #20]
 80062e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80062f0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80062f4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80062f8:	6800      	ldr	r0, [r0, #0]
 80062fa:	f001 f982 	bl	8007602 <USB_WritePMA>
            ep->xfer_buff += len;
 80062fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	695a      	ldr	r2, [r3, #20]
 800630a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800630e:	441a      	add	r2, r3
 8006310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800631c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6a1a      	ldr	r2, [r3, #32]
 8006328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800632c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	429a      	cmp	r2, r3
 8006336:	d90f      	bls.n	8006358 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800633c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6a1a      	ldr	r2, [r3, #32]
 8006344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006348:	1ad2      	subs	r2, r2, r3
 800634a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800634e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	621a      	str	r2, [r3, #32]
 8006356:	e00e      	b.n	8006376 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800635c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800636c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2200      	movs	r2, #0
 8006374:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800637a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	643b      	str	r3, [r7, #64]	; 0x40
 8006382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	785b      	ldrb	r3, [r3, #1]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d177      	bne.n	8006482 <USB_EPStartXfer+0x85e>
 8006392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006396:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	63bb      	str	r3, [r7, #56]	; 0x38
 800639e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	461a      	mov	r2, r3
 80063b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b2:	4413      	add	r3, r2
 80063b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80063b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	011a      	lsls	r2, r3, #4
 80063c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c6:	4413      	add	r3, r2
 80063c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063cc:	637b      	str	r3, [r7, #52]	; 0x34
 80063ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063d8:	b29a      	uxth	r2, r3
 80063da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063dc:	801a      	strh	r2, [r3, #0]
 80063de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e2:	2b3e      	cmp	r3, #62	; 0x3e
 80063e4:	d921      	bls.n	800642a <USB_EPStartXfer+0x806>
 80063e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ea:	095b      	lsrs	r3, r3, #5
 80063ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80063f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063f4:	f003 031f 	and.w	r3, r3, #31
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d104      	bne.n	8006406 <USB_EPStartXfer+0x7e2>
 80063fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006400:	3b01      	subs	r3, #1
 8006402:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006408:	881b      	ldrh	r3, [r3, #0]
 800640a:	b29a      	uxth	r2, r3
 800640c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006410:	b29b      	uxth	r3, r3
 8006412:	029b      	lsls	r3, r3, #10
 8006414:	b29b      	uxth	r3, r3
 8006416:	4313      	orrs	r3, r2
 8006418:	b29b      	uxth	r3, r3
 800641a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800641e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006422:	b29a      	uxth	r2, r3
 8006424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006426:	801a      	strh	r2, [r3, #0]
 8006428:	e050      	b.n	80064cc <USB_EPStartXfer+0x8a8>
 800642a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10a      	bne.n	8006448 <USB_EPStartXfer+0x824>
 8006432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006434:	881b      	ldrh	r3, [r3, #0]
 8006436:	b29b      	uxth	r3, r3
 8006438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800643c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006440:	b29a      	uxth	r2, r3
 8006442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006444:	801a      	strh	r2, [r3, #0]
 8006446:	e041      	b.n	80064cc <USB_EPStartXfer+0x8a8>
 8006448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800644c:	085b      	lsrs	r3, r3, #1
 800644e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d004      	beq.n	8006468 <USB_EPStartXfer+0x844>
 800645e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006462:	3301      	adds	r3, #1
 8006464:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	b29a      	uxth	r2, r3
 800646e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006472:	b29b      	uxth	r3, r3
 8006474:	029b      	lsls	r3, r3, #10
 8006476:	b29b      	uxth	r3, r3
 8006478:	4313      	orrs	r3, r2
 800647a:	b29a      	uxth	r2, r3
 800647c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647e:	801a      	strh	r2, [r3, #0]
 8006480:	e024      	b.n	80064cc <USB_EPStartXfer+0x8a8>
 8006482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	785b      	ldrb	r3, [r3, #1]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d11c      	bne.n	80064cc <USB_EPStartXfer+0x8a8>
 8006492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006496:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	461a      	mov	r2, r3
 80064a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064a6:	4413      	add	r3, r2
 80064a8:	643b      	str	r3, [r7, #64]	; 0x40
 80064aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	011a      	lsls	r2, r3, #4
 80064b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ba:	4413      	add	r3, r2
 80064bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80064cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	895b      	ldrh	r3, [r3, #10]
 80064d8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6959      	ldr	r1, [r3, #20]
 80064e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80064f2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80064f6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80064fa:	6800      	ldr	r0, [r0, #0]
 80064fc:	f001 f881 	bl	8007602 <USB_WritePMA>
 8006500:	e227      	b.n	8006952 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006516:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	881b      	ldrh	r3, [r3, #0]
 800652e:	b29b      	uxth	r3, r3
 8006530:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006538:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800653c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006540:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	441a      	add	r2, r3
 8006556:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800655a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800655e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800656a:	b29b      	uxth	r3, r3
 800656c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800656e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006572:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	65fb      	str	r3, [r7, #92]	; 0x5c
 800657a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006588:	b29b      	uxth	r3, r3
 800658a:	461a      	mov	r2, r3
 800658c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800658e:	4413      	add	r3, r2
 8006590:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006596:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	011a      	lsls	r2, r3, #4
 80065a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065a2:	4413      	add	r3, r2
 80065a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80065aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80065b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	891b      	ldrh	r3, [r3, #8]
 80065c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6959      	ldr	r1, [r3, #20]
 80065d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80065da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80065de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80065e2:	6800      	ldr	r0, [r0, #0]
 80065e4:	f001 f80d 	bl	8007602 <USB_WritePMA>
 80065e8:	e1b3      	b.n	8006952 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80065ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6a1a      	ldr	r2, [r3, #32]
 80065f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065fa:	1ad2      	subs	r2, r2, r3
 80065fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	b29b      	uxth	r3, r3
 8006626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 80c6 	beq.w	80067bc <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006634:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	673b      	str	r3, [r7, #112]	; 0x70
 800663c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	785b      	ldrb	r3, [r3, #1]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d177      	bne.n	800673c <USB_EPStartXfer+0xb18>
 800664c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	66bb      	str	r3, [r7, #104]	; 0x68
 8006658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006666:	b29b      	uxth	r3, r3
 8006668:	461a      	mov	r2, r3
 800666a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800666c:	4413      	add	r3, r2
 800666e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	011a      	lsls	r2, r3, #4
 800667e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006680:	4413      	add	r3, r2
 8006682:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006686:	667b      	str	r3, [r7, #100]	; 0x64
 8006688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	b29b      	uxth	r3, r3
 800668e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006692:	b29a      	uxth	r2, r3
 8006694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006696:	801a      	strh	r2, [r3, #0]
 8006698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800669c:	2b3e      	cmp	r3, #62	; 0x3e
 800669e:	d921      	bls.n	80066e4 <USB_EPStartXfer+0xac0>
 80066a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a4:	095b      	lsrs	r3, r3, #5
 80066a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80066aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ae:	f003 031f 	and.w	r3, r3, #31
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d104      	bne.n	80066c0 <USB_EPStartXfer+0xa9c>
 80066b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80066ba:	3b01      	subs	r3, #1
 80066bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80066c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	029b      	lsls	r3, r3, #10
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	4313      	orrs	r3, r2
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066dc:	b29a      	uxth	r2, r3
 80066de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066e0:	801a      	strh	r2, [r3, #0]
 80066e2:	e050      	b.n	8006786 <USB_EPStartXfer+0xb62>
 80066e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10a      	bne.n	8006702 <USB_EPStartXfer+0xade>
 80066ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066fe:	801a      	strh	r2, [r3, #0]
 8006700:	e041      	b.n	8006786 <USB_EPStartXfer+0xb62>
 8006702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006706:	085b      	lsrs	r3, r3, #1
 8006708:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800670c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006710:	f003 0301 	and.w	r3, r3, #1
 8006714:	2b00      	cmp	r3, #0
 8006716:	d004      	beq.n	8006722 <USB_EPStartXfer+0xafe>
 8006718:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800671c:	3301      	adds	r3, #1
 800671e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006722:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006724:	881b      	ldrh	r3, [r3, #0]
 8006726:	b29a      	uxth	r2, r3
 8006728:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800672c:	b29b      	uxth	r3, r3
 800672e:	029b      	lsls	r3, r3, #10
 8006730:	b29b      	uxth	r3, r3
 8006732:	4313      	orrs	r3, r2
 8006734:	b29a      	uxth	r2, r3
 8006736:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006738:	801a      	strh	r2, [r3, #0]
 800673a:	e024      	b.n	8006786 <USB_EPStartXfer+0xb62>
 800673c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	785b      	ldrb	r3, [r3, #1]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d11c      	bne.n	8006786 <USB_EPStartXfer+0xb62>
 800674c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006750:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800675a:	b29b      	uxth	r3, r3
 800675c:	461a      	mov	r2, r3
 800675e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006760:	4413      	add	r3, r2
 8006762:	673b      	str	r3, [r7, #112]	; 0x70
 8006764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	011a      	lsls	r2, r3, #4
 8006772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006774:	4413      	add	r3, r2
 8006776:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800677a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800677c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006780:	b29a      	uxth	r2, r3
 8006782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006784:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800678a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	895b      	ldrh	r3, [r3, #10]
 8006792:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800679a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6959      	ldr	r1, [r3, #20]
 80067a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80067ac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80067b0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80067b4:	6800      	ldr	r0, [r0, #0]
 80067b6:	f000 ff24 	bl	8007602 <USB_WritePMA>
 80067ba:	e0ca      	b.n	8006952 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80067bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	785b      	ldrb	r3, [r3, #1]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d177      	bne.n	80068bc <USB_EPStartXfer+0xc98>
 80067cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067ec:	4413      	add	r3, r2
 80067ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	011a      	lsls	r2, r3, #4
 80067fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006800:	4413      	add	r3, r2
 8006802:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006806:	67bb      	str	r3, [r7, #120]	; 0x78
 8006808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	b29b      	uxth	r3, r3
 800680e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006812:	b29a      	uxth	r2, r3
 8006814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006816:	801a      	strh	r2, [r3, #0]
 8006818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800681c:	2b3e      	cmp	r3, #62	; 0x3e
 800681e:	d921      	bls.n	8006864 <USB_EPStartXfer+0xc40>
 8006820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006824:	095b      	lsrs	r3, r3, #5
 8006826:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800682a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800682e:	f003 031f 	and.w	r3, r3, #31
 8006832:	2b00      	cmp	r3, #0
 8006834:	d104      	bne.n	8006840 <USB_EPStartXfer+0xc1c>
 8006836:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800683a:	3b01      	subs	r3, #1
 800683c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006840:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	b29a      	uxth	r2, r3
 8006846:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800684a:	b29b      	uxth	r3, r3
 800684c:	029b      	lsls	r3, r3, #10
 800684e:	b29b      	uxth	r3, r3
 8006850:	4313      	orrs	r3, r2
 8006852:	b29b      	uxth	r3, r3
 8006854:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006858:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800685c:	b29a      	uxth	r2, r3
 800685e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006860:	801a      	strh	r2, [r3, #0]
 8006862:	e05c      	b.n	800691e <USB_EPStartXfer+0xcfa>
 8006864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10a      	bne.n	8006882 <USB_EPStartXfer+0xc5e>
 800686c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	b29b      	uxth	r3, r3
 8006872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800687a:	b29a      	uxth	r2, r3
 800687c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800687e:	801a      	strh	r2, [r3, #0]
 8006880:	e04d      	b.n	800691e <USB_EPStartXfer+0xcfa>
 8006882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006886:	085b      	lsrs	r3, r3, #1
 8006888:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800688c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b00      	cmp	r3, #0
 8006896:	d004      	beq.n	80068a2 <USB_EPStartXfer+0xc7e>
 8006898:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800689c:	3301      	adds	r3, #1
 800689e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80068a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	029b      	lsls	r3, r3, #10
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	4313      	orrs	r3, r2
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068b8:	801a      	strh	r2, [r3, #0]
 80068ba:	e030      	b.n	800691e <USB_EPStartXfer+0xcfa>
 80068bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	785b      	ldrb	r3, [r3, #1]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d128      	bne.n	800691e <USB_EPStartXfer+0xcfa>
 80068cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	461a      	mov	r2, r3
 80068ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068f0:	4413      	add	r3, r2
 80068f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	011a      	lsls	r2, r3, #4
 8006904:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006908:	4413      	add	r3, r2
 800690a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800690e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006916:	b29a      	uxth	r2, r3
 8006918:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800691c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800691e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	891b      	ldrh	r3, [r3, #8]
 800692a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800692e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6959      	ldr	r1, [r3, #20]
 800693a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800693e:	b29b      	uxth	r3, r3
 8006940:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006944:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006948:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800694c:	6800      	ldr	r0, [r0, #0]
 800694e:	f000 fe58 	bl	8007602 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006956:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	b29b      	uxth	r3, r3
 8006970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006978:	817b      	strh	r3, [r7, #10]
 800697a:	897b      	ldrh	r3, [r7, #10]
 800697c:	f083 0310 	eor.w	r3, r3, #16
 8006980:	817b      	strh	r3, [r7, #10]
 8006982:	897b      	ldrh	r3, [r7, #10]
 8006984:	f083 0320 	eor.w	r3, r3, #32
 8006988:	817b      	strh	r3, [r7, #10]
 800698a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800698e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	441a      	add	r2, r3
 80069a4:	897b      	ldrh	r3, [r7, #10]
 80069a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	8013      	strh	r3, [r2, #0]
 80069ba:	f000 bcde 	b.w	800737a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80069be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	7b1b      	ldrb	r3, [r3, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f040 80bb 	bne.w	8006b46 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80069d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	699a      	ldr	r2, [r3, #24]
 80069dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d917      	bls.n	8006a1c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80069ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80069fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	699a      	ldr	r2, [r3, #24]
 8006a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a0c:	1ad2      	subs	r2, r2, r3
 8006a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	619a      	str	r2, [r3, #24]
 8006a1a:	e00e      	b.n	8006a3a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2200      	movs	r2, #0
 8006a38:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	461a      	mov	r2, r3
 8006a5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a5e:	4413      	add	r3, r2
 8006a60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	011a      	lsls	r2, r3, #4
 8006a72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a76:	4413      	add	r3, r2
 8006a78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a92:	801a      	strh	r2, [r3, #0]
 8006a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a98:	2b3e      	cmp	r3, #62	; 0x3e
 8006a9a:	d924      	bls.n	8006ae6 <USB_EPStartXfer+0xec2>
 8006a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aa0:	095b      	lsrs	r3, r3, #5
 8006aa2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aaa:	f003 031f 	and.w	r3, r3, #31
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d104      	bne.n	8006abc <USB_EPStartXfer+0xe98>
 8006ab2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006abc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	029b      	lsls	r3, r3, #10
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ad6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ae0:	801a      	strh	r2, [r3, #0]
 8006ae2:	f000 bc10 	b.w	8007306 <USB_EPStartXfer+0x16e2>
 8006ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10c      	bne.n	8006b08 <USB_EPStartXfer+0xee4>
 8006aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b04:	801a      	strh	r2, [r3, #0]
 8006b06:	e3fe      	b.n	8007306 <USB_EPStartXfer+0x16e2>
 8006b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b0c:	085b      	lsrs	r3, r3, #1
 8006b0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d004      	beq.n	8006b28 <USB_EPStartXfer+0xf04>
 8006b1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b22:	3301      	adds	r3, #1
 8006b24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	029b      	lsls	r3, r3, #10
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b42:	801a      	strh	r2, [r3, #0]
 8006b44:	e3df      	b.n	8007306 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	78db      	ldrb	r3, [r3, #3]
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	f040 8218 	bne.w	8006f88 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	785b      	ldrb	r3, [r3, #1]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f040 809d 	bne.w	8006ca4 <USB_EPStartXfer+0x1080>
 8006b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	461a      	mov	r2, r3
 8006b8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b8e:	4413      	add	r3, r2
 8006b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	011a      	lsls	r2, r3, #4
 8006ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006bb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006bc2:	801a      	strh	r2, [r3, #0]
 8006bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	2b3e      	cmp	r3, #62	; 0x3e
 8006bd2:	d92b      	bls.n	8006c2c <USB_EPStartXfer+0x1008>
 8006bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	095b      	lsrs	r3, r3, #5
 8006be2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	f003 031f 	and.w	r3, r3, #31
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d104      	bne.n	8006c04 <USB_EPStartXfer+0xfe0>
 8006bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	029b      	lsls	r3, r3, #10
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	4313      	orrs	r3, r2
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c28:	801a      	strh	r2, [r3, #0]
 8006c2a:	e070      	b.n	8006d0e <USB_EPStartXfer+0x10ea>
 8006c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10c      	bne.n	8006c56 <USB_EPStartXfer+0x1032>
 8006c3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c52:	801a      	strh	r2, [r3, #0]
 8006c54:	e05b      	b.n	8006d0e <USB_EPStartXfer+0x10ea>
 8006c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	085b      	lsrs	r3, r3, #1
 8006c64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d004      	beq.n	8006c86 <USB_EPStartXfer+0x1062>
 8006c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c80:	3301      	adds	r3, #1
 8006c82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	029b      	lsls	r3, r3, #10
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ca0:	801a      	strh	r2, [r3, #0]
 8006ca2:	e034      	b.n	8006d0e <USB_EPStartXfer+0x10ea>
 8006ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	785b      	ldrb	r3, [r3, #1]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d12c      	bne.n	8006d0e <USB_EPStartXfer+0x10ea>
 8006cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006cd8:	4413      	add	r3, r2
 8006cda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	011a      	lsls	r2, r3, #4
 8006cec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006d0c:	801a      	strh	r2, [r3, #0]
 8006d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	785b      	ldrb	r3, [r3, #1]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f040 809d 	bne.w	8006e68 <USB_EPStartXfer+0x1244>
 8006d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d52:	4413      	add	r3, r2
 8006d54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	011a      	lsls	r2, r3, #4
 8006d66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d86:	801a      	strh	r2, [r3, #0]
 8006d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	2b3e      	cmp	r3, #62	; 0x3e
 8006d96:	d92b      	bls.n	8006df0 <USB_EPStartXfer+0x11cc>
 8006d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	095b      	lsrs	r3, r3, #5
 8006da6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	f003 031f 	and.w	r3, r3, #31
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d104      	bne.n	8006dc8 <USB_EPStartXfer+0x11a4>
 8006dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	029b      	lsls	r3, r3, #10
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dec:	801a      	strh	r2, [r3, #0]
 8006dee:	e069      	b.n	8006ec4 <USB_EPStartXfer+0x12a0>
 8006df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10c      	bne.n	8006e1a <USB_EPStartXfer+0x11f6>
 8006e00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e16:	801a      	strh	r2, [r3, #0]
 8006e18:	e054      	b.n	8006ec4 <USB_EPStartXfer+0x12a0>
 8006e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	085b      	lsrs	r3, r3, #1
 8006e28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d004      	beq.n	8006e4a <USB_EPStartXfer+0x1226>
 8006e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e44:	3301      	adds	r3, #1
 8006e46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e4e:	881b      	ldrh	r3, [r3, #0]
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	029b      	lsls	r3, r3, #10
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e64:	801a      	strh	r2, [r3, #0]
 8006e66:	e02d      	b.n	8006ec4 <USB_EPStartXfer+0x12a0>
 8006e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	785b      	ldrb	r3, [r3, #1]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d125      	bne.n	8006ec4 <USB_EPStartXfer+0x12a0>
 8006e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	461a      	mov	r2, r3
 8006e8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006e8e:	4413      	add	r3, r2
 8006e90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	011a      	lsls	r2, r3, #4
 8006ea2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006eac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ec2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 8218 	beq.w	8007306 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ef6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d005      	beq.n	8006f0e <USB_EPStartXfer+0x12ea>
 8006f02:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10d      	bne.n	8006f2a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006f0e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f040 81f5 	bne.w	8007306 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006f1c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f040 81ee 	bne.w	8007306 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f50:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	441a      	add	r2, r3
 8006f6e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	8013      	strh	r3, [r2, #0]
 8006f86:	e1be      	b.n	8007306 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	78db      	ldrb	r3, [r3, #3]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	f040 81b4 	bne.w	8007302 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	699a      	ldr	r2, [r3, #24]
 8006fa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006faa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d917      	bls.n	8006fe6 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	699a      	ldr	r2, [r3, #24]
 8006fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd6:	1ad2      	subs	r2, r2, r3
 8006fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	619a      	str	r2, [r3, #24]
 8006fe4:	e00e      	b.n	8007004 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2200      	movs	r2, #0
 8007002:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	785b      	ldrb	r3, [r3, #1]
 8007010:	2b00      	cmp	r3, #0
 8007012:	f040 8085 	bne.w	8007120 <USB_EPStartXfer+0x14fc>
 8007016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007028:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007032:	b29b      	uxth	r3, r3
 8007034:	461a      	mov	r2, r3
 8007036:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800703a:	4413      	add	r3, r2
 800703c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	011a      	lsls	r2, r3, #4
 800704e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007052:	4413      	add	r3, r2
 8007054:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007058:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800705c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	b29b      	uxth	r3, r3
 8007064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007068:	b29a      	uxth	r2, r3
 800706a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800706e:	801a      	strh	r2, [r3, #0]
 8007070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007074:	2b3e      	cmp	r3, #62	; 0x3e
 8007076:	d923      	bls.n	80070c0 <USB_EPStartXfer+0x149c>
 8007078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800707c:	095b      	lsrs	r3, r3, #5
 800707e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007086:	f003 031f 	and.w	r3, r3, #31
 800708a:	2b00      	cmp	r3, #0
 800708c:	d104      	bne.n	8007098 <USB_EPStartXfer+0x1474>
 800708e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007092:	3b01      	subs	r3, #1
 8007094:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007098:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800709c:	881b      	ldrh	r3, [r3, #0]
 800709e:	b29a      	uxth	r2, r3
 80070a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	029b      	lsls	r3, r3, #10
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	4313      	orrs	r3, r2
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070bc:	801a      	strh	r2, [r3, #0]
 80070be:	e060      	b.n	8007182 <USB_EPStartXfer+0x155e>
 80070c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10c      	bne.n	80070e2 <USB_EPStartXfer+0x14be>
 80070c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070d8:	b29a      	uxth	r2, r3
 80070da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070de:	801a      	strh	r2, [r3, #0]
 80070e0:	e04f      	b.n	8007182 <USB_EPStartXfer+0x155e>
 80070e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e6:	085b      	lsrs	r3, r3, #1
 80070e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80070ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d004      	beq.n	8007102 <USB_EPStartXfer+0x14de>
 80070f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070fc:	3301      	adds	r3, #1
 80070fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007102:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007106:	881b      	ldrh	r3, [r3, #0]
 8007108:	b29a      	uxth	r2, r3
 800710a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800710e:	b29b      	uxth	r3, r3
 8007110:	029b      	lsls	r3, r3, #10
 8007112:	b29b      	uxth	r3, r3
 8007114:	4313      	orrs	r3, r2
 8007116:	b29a      	uxth	r2, r3
 8007118:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800711c:	801a      	strh	r2, [r3, #0]
 800711e:	e030      	b.n	8007182 <USB_EPStartXfer+0x155e>
 8007120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	785b      	ldrb	r3, [r3, #1]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d128      	bne.n	8007182 <USB_EPStartXfer+0x155e>
 8007130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007134:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800713e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007142:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800714c:	b29b      	uxth	r3, r3
 800714e:	461a      	mov	r2, r3
 8007150:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007154:	4413      	add	r3, r2
 8007156:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800715a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800715e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	011a      	lsls	r2, r3, #4
 8007168:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800716c:	4413      	add	r3, r2
 800716e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007172:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800717a:	b29a      	uxth	r2, r3
 800717c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007180:	801a      	strh	r2, [r3, #0]
 8007182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007186:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	785b      	ldrb	r3, [r3, #1]
 800719c:	2b00      	cmp	r3, #0
 800719e:	f040 8085 	bne.w	80072ac <USB_EPStartXfer+0x1688>
 80071a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80071b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071be:	b29b      	uxth	r3, r3
 80071c0:	461a      	mov	r2, r3
 80071c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80071c6:	4413      	add	r3, r2
 80071c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80071cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	011a      	lsls	r2, r3, #4
 80071da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80071de:	4413      	add	r3, r2
 80071e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071fa:	801a      	strh	r2, [r3, #0]
 80071fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007200:	2b3e      	cmp	r3, #62	; 0x3e
 8007202:	d923      	bls.n	800724c <USB_EPStartXfer+0x1628>
 8007204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007208:	095b      	lsrs	r3, r3, #5
 800720a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800720e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007212:	f003 031f 	and.w	r3, r3, #31
 8007216:	2b00      	cmp	r3, #0
 8007218:	d104      	bne.n	8007224 <USB_EPStartXfer+0x1600>
 800721a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800721e:	3b01      	subs	r3, #1
 8007220:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007224:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007228:	881b      	ldrh	r3, [r3, #0]
 800722a:	b29a      	uxth	r2, r3
 800722c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007230:	b29b      	uxth	r3, r3
 8007232:	029b      	lsls	r3, r3, #10
 8007234:	b29b      	uxth	r3, r3
 8007236:	4313      	orrs	r3, r2
 8007238:	b29b      	uxth	r3, r3
 800723a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800723e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007242:	b29a      	uxth	r2, r3
 8007244:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007248:	801a      	strh	r2, [r3, #0]
 800724a:	e05c      	b.n	8007306 <USB_EPStartXfer+0x16e2>
 800724c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10c      	bne.n	800726e <USB_EPStartXfer+0x164a>
 8007254:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007258:	881b      	ldrh	r3, [r3, #0]
 800725a:	b29b      	uxth	r3, r3
 800725c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007260:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007264:	b29a      	uxth	r2, r3
 8007266:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800726a:	801a      	strh	r2, [r3, #0]
 800726c:	e04b      	b.n	8007306 <USB_EPStartXfer+0x16e2>
 800726e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007272:	085b      	lsrs	r3, r3, #1
 8007274:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	2b00      	cmp	r3, #0
 8007282:	d004      	beq.n	800728e <USB_EPStartXfer+0x166a>
 8007284:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007288:	3301      	adds	r3, #1
 800728a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800728e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007292:	881b      	ldrh	r3, [r3, #0]
 8007294:	b29a      	uxth	r2, r3
 8007296:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800729a:	b29b      	uxth	r3, r3
 800729c:	029b      	lsls	r3, r3, #10
 800729e:	b29b      	uxth	r3, r3
 80072a0:	4313      	orrs	r3, r2
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072a8:	801a      	strh	r2, [r3, #0]
 80072aa:	e02c      	b.n	8007306 <USB_EPStartXfer+0x16e2>
 80072ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	785b      	ldrb	r3, [r3, #1]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d124      	bne.n	8007306 <USB_EPStartXfer+0x16e2>
 80072bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	461a      	mov	r2, r3
 80072ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80072d2:	4413      	add	r3, r2
 80072d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	011a      	lsls	r2, r3, #4
 80072e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80072ea:	4413      	add	r3, r2
 80072ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072fe:	801a      	strh	r2, [r3, #0]
 8007300:	e001      	b.n	8007306 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e03a      	b.n	800737c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800730a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4413      	add	r3, r2
 8007320:	881b      	ldrh	r3, [r3, #0]
 8007322:	b29b      	uxth	r3, r3
 8007324:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007330:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007334:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007338:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800733c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007340:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007344:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800734c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	441a      	add	r2, r3
 8007362:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800736a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800736e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007376:	b29b      	uxth	r3, r3
 8007378:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007386:	b480      	push	{r7}
 8007388:	b085      	sub	sp, #20
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	785b      	ldrb	r3, [r3, #1]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d020      	beq.n	80073da <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ae:	81bb      	strh	r3, [r7, #12]
 80073b0:	89bb      	ldrh	r3, [r7, #12]
 80073b2:	f083 0310 	eor.w	r3, r3, #16
 80073b6:	81bb      	strh	r3, [r7, #12]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	441a      	add	r2, r3
 80073c2:	89bb      	ldrh	r3, [r7, #12]
 80073c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	8013      	strh	r3, [r2, #0]
 80073d8:	e01f      	b.n	800741a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f0:	81fb      	strh	r3, [r7, #14]
 80073f2:	89fb      	ldrh	r3, [r7, #14]
 80073f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80073f8:	81fb      	strh	r3, [r7, #14]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	441a      	add	r2, r3
 8007404:	89fb      	ldrh	r3, [r7, #14]
 8007406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800740a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800740e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007416:	b29b      	uxth	r3, r3
 8007418:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	bc80      	pop	{r7}
 8007424:	4770      	bx	lr

08007426 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007426:	b480      	push	{r7}
 8007428:	b087      	sub	sp, #28
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	7b1b      	ldrb	r3, [r3, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	f040 809d 	bne.w	8007574 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	785b      	ldrb	r3, [r3, #1]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d04c      	beq.n	80074dc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	881b      	ldrh	r3, [r3, #0]
 800744e:	823b      	strh	r3, [r7, #16]
 8007450:	8a3b      	ldrh	r3, [r7, #16]
 8007452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007456:	2b00      	cmp	r3, #0
 8007458:	d01b      	beq.n	8007492 <USB_EPClearStall+0x6c>
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	881b      	ldrh	r3, [r3, #0]
 8007466:	b29b      	uxth	r3, r3
 8007468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800746c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007470:	81fb      	strh	r3, [r7, #14]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	441a      	add	r2, r3
 800747c:	89fb      	ldrh	r3, [r7, #14]
 800747e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800748a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800748e:	b29b      	uxth	r3, r3
 8007490:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	78db      	ldrb	r3, [r3, #3]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d06c      	beq.n	8007574 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4413      	add	r3, r2
 80074a4:	881b      	ldrh	r3, [r3, #0]
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074b0:	81bb      	strh	r3, [r7, #12]
 80074b2:	89bb      	ldrh	r3, [r7, #12]
 80074b4:	f083 0320 	eor.w	r3, r3, #32
 80074b8:	81bb      	strh	r3, [r7, #12]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	441a      	add	r2, r3
 80074c4:	89bb      	ldrh	r3, [r7, #12]
 80074c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	8013      	strh	r3, [r2, #0]
 80074da:	e04b      	b.n	8007574 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	82fb      	strh	r3, [r7, #22]
 80074ea:	8afb      	ldrh	r3, [r7, #22]
 80074ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d01b      	beq.n	800752c <USB_EPClearStall+0x106>
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	b29b      	uxth	r3, r3
 8007502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750a:	82bb      	strh	r3, [r7, #20]
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	441a      	add	r2, r3
 8007516:	8abb      	ldrh	r3, [r7, #20]
 8007518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800751c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007528:	b29b      	uxth	r3, r3
 800752a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	b29b      	uxth	r3, r3
 800753a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800753e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007542:	827b      	strh	r3, [r7, #18]
 8007544:	8a7b      	ldrh	r3, [r7, #18]
 8007546:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800754a:	827b      	strh	r3, [r7, #18]
 800754c:	8a7b      	ldrh	r3, [r7, #18]
 800754e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007552:	827b      	strh	r3, [r7, #18]
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	441a      	add	r2, r3
 800755e:	8a7b      	ldrh	r3, [r7, #18]
 8007560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800756c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007570:	b29b      	uxth	r3, r3
 8007572:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	371c      	adds	r7, #28
 800757a:	46bd      	mov	sp, r7
 800757c:	bc80      	pop	{r7}
 800757e:	4770      	bx	lr

08007580 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	460b      	mov	r3, r1
 800758a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800758c:	78fb      	ldrb	r3, [r7, #3]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d103      	bne.n	800759a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2280      	movs	r2, #128	; 0x80
 8007596:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr

080075a6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bc80      	pop	{r7}
 80075b8:	4770      	bx	lr

080075ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b083      	sub	sp, #12
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bc80      	pop	{r7}
 80075cc:	4770      	bx	lr

080075ce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b085      	sub	sp, #20
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80075dc:	b29b      	uxth	r3, r3
 80075de:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80075e0:	68fb      	ldr	r3, [r7, #12]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bc80      	pop	{r7}
 80075ea:	4770      	bx	lr

080075ec <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bc80      	pop	{r7}
 8007600:	4770      	bx	lr

08007602 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007602:	b480      	push	{r7}
 8007604:	b08b      	sub	sp, #44	; 0x2c
 8007606:	af00      	add	r7, sp, #0
 8007608:	60f8      	str	r0, [r7, #12]
 800760a:	60b9      	str	r1, [r7, #8]
 800760c:	4611      	mov	r1, r2
 800760e:	461a      	mov	r2, r3
 8007610:	460b      	mov	r3, r1
 8007612:	80fb      	strh	r3, [r7, #6]
 8007614:	4613      	mov	r3, r2
 8007616:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007618:	88bb      	ldrh	r3, [r7, #4]
 800761a:	3301      	adds	r3, #1
 800761c:	085b      	lsrs	r3, r3, #1
 800761e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007628:	88fb      	ldrh	r3, [r7, #6]
 800762a:	005a      	lsls	r2, r3, #1
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	4413      	add	r3, r2
 8007630:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007634:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	627b      	str	r3, [r7, #36]	; 0x24
 800763a:	e01e      	b.n	800767a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	3301      	adds	r3, #1
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	021b      	lsls	r3, r3, #8
 800764a:	b21a      	sxth	r2, r3
 800764c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007650:	4313      	orrs	r3, r2
 8007652:	b21b      	sxth	r3, r3
 8007654:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	8a7a      	ldrh	r2, [r7, #18]
 800765a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	3302      	adds	r3, #2
 8007660:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	3302      	adds	r3, #2
 8007666:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	3301      	adds	r3, #1
 800766c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	3301      	adds	r3, #1
 8007672:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	3b01      	subs	r3, #1
 8007678:	627b      	str	r3, [r7, #36]	; 0x24
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1dd      	bne.n	800763c <USB_WritePMA+0x3a>
  }
}
 8007680:	bf00      	nop
 8007682:	bf00      	nop
 8007684:	372c      	adds	r7, #44	; 0x2c
 8007686:	46bd      	mov	sp, r7
 8007688:	bc80      	pop	{r7}
 800768a:	4770      	bx	lr

0800768c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800768c:	b480      	push	{r7}
 800768e:	b08b      	sub	sp, #44	; 0x2c
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	4611      	mov	r1, r2
 8007698:	461a      	mov	r2, r3
 800769a:	460b      	mov	r3, r1
 800769c:	80fb      	strh	r3, [r7, #6]
 800769e:	4613      	mov	r3, r2
 80076a0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80076a2:	88bb      	ldrh	r3, [r7, #4]
 80076a4:	085b      	lsrs	r3, r3, #1
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80076b2:	88fb      	ldrh	r3, [r7, #6]
 80076b4:	005a      	lsls	r2, r3, #1
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076be:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	627b      	str	r3, [r7, #36]	; 0x24
 80076c4:	e01b      	b.n	80076fe <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	881b      	ldrh	r3, [r3, #0]
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	3302      	adds	r3, #2
 80076d2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	3301      	adds	r3, #1
 80076e0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	0a1b      	lsrs	r3, r3, #8
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	3301      	adds	r3, #1
 80076f0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	3302      	adds	r3, #2
 80076f6:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fa:	3b01      	subs	r3, #1
 80076fc:	627b      	str	r3, [r7, #36]	; 0x24
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1e0      	bne.n	80076c6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007704:	88bb      	ldrh	r3, [r7, #4]
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	b29b      	uxth	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d007      	beq.n	8007720 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	b29b      	uxth	r3, r3
 8007716:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	b2da      	uxtb	r2, r3
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	701a      	strb	r2, [r3, #0]
  }
}
 8007720:	bf00      	nop
 8007722:	372c      	adds	r7, #44	; 0x2c
 8007724:	46bd      	mov	sp, r7
 8007726:	bc80      	pop	{r7}
 8007728:	4770      	bx	lr

0800772a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b084      	sub	sp, #16
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	460b      	mov	r3, r1
 8007734:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007736:	2300      	movs	r3, #0
 8007738:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	7c1b      	ldrb	r3, [r3, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d115      	bne.n	800776e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007742:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007746:	2202      	movs	r2, #2
 8007748:	2181      	movs	r1, #129	; 0x81
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f001 fed7 	bl	80094fe <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007756:	f44f 7300 	mov.w	r3, #512	; 0x200
 800775a:	2202      	movs	r2, #2
 800775c:	2101      	movs	r1, #1
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 fecd 	bl	80094fe <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800776c:	e012      	b.n	8007794 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800776e:	2340      	movs	r3, #64	; 0x40
 8007770:	2202      	movs	r2, #2
 8007772:	2181      	movs	r1, #129	; 0x81
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f001 fec2 	bl	80094fe <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007780:	2340      	movs	r3, #64	; 0x40
 8007782:	2202      	movs	r2, #2
 8007784:	2101      	movs	r1, #1
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f001 feb9 	bl	80094fe <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007794:	2308      	movs	r3, #8
 8007796:	2203      	movs	r2, #3
 8007798:	2182      	movs	r1, #130	; 0x82
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f001 feaf 	bl	80094fe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80077a6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80077aa:	f001 ffcf 	bl	800974c <USBD_static_malloc>
 80077ae:	4602      	mov	r2, r0
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d102      	bne.n	80077c6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80077c0:	2301      	movs	r3, #1
 80077c2:	73fb      	strb	r3, [r7, #15]
 80077c4:	e026      	b.n	8007814 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077cc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2200      	movs	r2, #0
 80077dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	7c1b      	ldrb	r3, [r3, #16]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d109      	bne.n	8007804 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077fa:	2101      	movs	r1, #1
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f001 ff6f 	bl	80096e0 <USBD_LL_PrepareReceive>
 8007802:	e007      	b.n	8007814 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800780a:	2340      	movs	r3, #64	; 0x40
 800780c:	2101      	movs	r1, #1
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f001 ff66 	bl	80096e0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007814:	7bfb      	ldrb	r3, [r7, #15]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b084      	sub	sp, #16
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
 8007826:	460b      	mov	r3, r1
 8007828:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800782a:	2300      	movs	r3, #0
 800782c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800782e:	2181      	movs	r1, #129	; 0x81
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f001 fe8a 	bl	800954a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800783c:	2101      	movs	r1, #1
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f001 fe83 	bl	800954a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800784c:	2182      	movs	r1, #130	; 0x82
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f001 fe7b 	bl	800954a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00e      	beq.n	8007882 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007874:	4618      	mov	r0, r3
 8007876:	f001 ff75 	bl	8009764 <USBD_static_free>
    pdev->pClassData = NULL;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007882:	7bfb      	ldrb	r3, [r7, #15]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800789c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800789e:	2300      	movs	r3, #0
 80078a0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80078a6:	2300      	movs	r3, #0
 80078a8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d039      	beq.n	800792a <USBD_CDC_Setup+0x9e>
 80078b6:	2b20      	cmp	r3, #32
 80078b8:	d17f      	bne.n	80079ba <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	88db      	ldrh	r3, [r3, #6]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d029      	beq.n	8007916 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	b25b      	sxtb	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	da11      	bge.n	80078f0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80078d8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	88d2      	ldrh	r2, [r2, #6]
 80078de:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80078e0:	6939      	ldr	r1, [r7, #16]
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	88db      	ldrh	r3, [r3, #6]
 80078e6:	461a      	mov	r2, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f001 fa0a 	bl	8008d02 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80078ee:	e06b      	b.n	80079c8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	785a      	ldrb	r2, [r3, #1]
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	88db      	ldrh	r3, [r3, #6]
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007906:	6939      	ldr	r1, [r7, #16]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	88db      	ldrh	r3, [r3, #6]
 800790c:	461a      	mov	r2, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f001 fa25 	bl	8008d5e <USBD_CtlPrepareRx>
      break;
 8007914:	e058      	b.n	80079c8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	7850      	ldrb	r0, [r2, #1]
 8007922:	2200      	movs	r2, #0
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	4798      	blx	r3
      break;
 8007928:	e04e      	b.n	80079c8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	785b      	ldrb	r3, [r3, #1]
 800792e:	2b0b      	cmp	r3, #11
 8007930:	d02e      	beq.n	8007990 <USBD_CDC_Setup+0x104>
 8007932:	2b0b      	cmp	r3, #11
 8007934:	dc38      	bgt.n	80079a8 <USBD_CDC_Setup+0x11c>
 8007936:	2b00      	cmp	r3, #0
 8007938:	d002      	beq.n	8007940 <USBD_CDC_Setup+0xb4>
 800793a:	2b0a      	cmp	r3, #10
 800793c:	d014      	beq.n	8007968 <USBD_CDC_Setup+0xdc>
 800793e:	e033      	b.n	80079a8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007946:	2b03      	cmp	r3, #3
 8007948:	d107      	bne.n	800795a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800794a:	f107 030c 	add.w	r3, r7, #12
 800794e:	2202      	movs	r2, #2
 8007950:	4619      	mov	r1, r3
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f001 f9d5 	bl	8008d02 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007958:	e02e      	b.n	80079b8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f001 f966 	bl	8008c2e <USBD_CtlError>
            ret = USBD_FAIL;
 8007962:	2302      	movs	r3, #2
 8007964:	75fb      	strb	r3, [r7, #23]
          break;
 8007966:	e027      	b.n	80079b8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800796e:	2b03      	cmp	r3, #3
 8007970:	d107      	bne.n	8007982 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007972:	f107 030f 	add.w	r3, r7, #15
 8007976:	2201      	movs	r2, #1
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f001 f9c1 	bl	8008d02 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007980:	e01a      	b.n	80079b8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f001 f952 	bl	8008c2e <USBD_CtlError>
            ret = USBD_FAIL;
 800798a:	2302      	movs	r3, #2
 800798c:	75fb      	strb	r3, [r7, #23]
          break;
 800798e:	e013      	b.n	80079b8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007996:	2b03      	cmp	r3, #3
 8007998:	d00d      	beq.n	80079b6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f001 f946 	bl	8008c2e <USBD_CtlError>
            ret = USBD_FAIL;
 80079a2:	2302      	movs	r3, #2
 80079a4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80079a6:	e006      	b.n	80079b6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f001 f93f 	bl	8008c2e <USBD_CtlError>
          ret = USBD_FAIL;
 80079b0:	2302      	movs	r3, #2
 80079b2:	75fb      	strb	r3, [r7, #23]
          break;
 80079b4:	e000      	b.n	80079b8 <USBD_CDC_Setup+0x12c>
          break;
 80079b6:	bf00      	nop
      }
      break;
 80079b8:	e006      	b.n	80079c8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f001 f936 	bl	8008c2e <USBD_CtlError>
      ret = USBD_FAIL;
 80079c2:	2302      	movs	r3, #2
 80079c4:	75fb      	strb	r3, [r7, #23]
      break;
 80079c6:	bf00      	nop
  }

  return ret;
 80079c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3718      	adds	r7, #24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	460b      	mov	r3, r1
 80079dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079ec:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d03a      	beq.n	8007a6e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80079f8:	78fa      	ldrb	r2, [r7, #3]
 80079fa:	6879      	ldr	r1, [r7, #4]
 80079fc:	4613      	mov	r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	440b      	add	r3, r1
 8007a06:	331c      	adds	r3, #28
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d029      	beq.n	8007a62 <USBD_CDC_DataIn+0x90>
 8007a0e:	78fa      	ldrb	r2, [r7, #3]
 8007a10:	6879      	ldr	r1, [r7, #4]
 8007a12:	4613      	mov	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	440b      	add	r3, r1
 8007a1c:	331c      	adds	r3, #28
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	78f9      	ldrb	r1, [r7, #3]
 8007a22:	68b8      	ldr	r0, [r7, #8]
 8007a24:	460b      	mov	r3, r1
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	440b      	add	r3, r1
 8007a2a:	00db      	lsls	r3, r3, #3
 8007a2c:	4403      	add	r3, r0
 8007a2e:	3338      	adds	r3, #56	; 0x38
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	fbb2 f1f3 	udiv	r1, r2, r3
 8007a36:	fb01 f303 	mul.w	r3, r1, r3
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d110      	bne.n	8007a62 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007a40:	78fa      	ldrb	r2, [r7, #3]
 8007a42:	6879      	ldr	r1, [r7, #4]
 8007a44:	4613      	mov	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	440b      	add	r3, r1
 8007a4e:	331c      	adds	r3, #28
 8007a50:	2200      	movs	r2, #0
 8007a52:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007a54:	78f9      	ldrb	r1, [r7, #3]
 8007a56:	2300      	movs	r3, #0
 8007a58:	2200      	movs	r2, #0
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f001 fe1d 	bl	800969a <USBD_LL_Transmit>
 8007a60:	e003      	b.n	8007a6a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	e000      	b.n	8007a70 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007a6e:	2302      	movs	r3, #2
  }
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	460b      	mov	r3, r1
 8007a82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a8a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007a8c:	78fb      	ldrb	r3, [r7, #3]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f001 fe48 	bl	8009726 <USBD_LL_GetRxDataSize>
 8007a96:	4602      	mov	r2, r0
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00d      	beq.n	8007ac4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007abc:	4611      	mov	r1, r2
 8007abe:	4798      	blx	r3

    return USBD_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	e000      	b.n	8007ac6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007ac4:	2302      	movs	r3, #2
  }
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b084      	sub	sp, #16
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007adc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d015      	beq.n	8007b14 <USBD_CDC_EP0_RxReady+0x46>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007aee:	2bff      	cmp	r3, #255	; 0xff
 8007af0:	d010      	beq.n	8007b14 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007b00:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007b08:	b292      	uxth	r2, r2
 8007b0a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	22ff      	movs	r2, #255	; 0xff
 8007b10:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
	...

08007b20 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2243      	movs	r2, #67	; 0x43
 8007b2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007b2e:	4b03      	ldr	r3, [pc, #12]	; (8007b3c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bc80      	pop	{r7}
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	20000094 	.word	0x20000094

08007b40 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2243      	movs	r2, #67	; 0x43
 8007b4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007b4e:	4b03      	ldr	r3, [pc, #12]	; (8007b5c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bc80      	pop	{r7}
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	20000050 	.word	0x20000050

08007b60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2243      	movs	r2, #67	; 0x43
 8007b6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007b6e:	4b03      	ldr	r3, [pc, #12]	; (8007b7c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bc80      	pop	{r7}
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	200000d8 	.word	0x200000d8

08007b80 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	220a      	movs	r2, #10
 8007b8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007b8e:	4b03      	ldr	r3, [pc, #12]	; (8007b9c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bc80      	pop	{r7}
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	2000000c 	.word	0x2000000c

08007ba0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007baa:	2302      	movs	r3, #2
 8007bac:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d005      	beq.n	8007bc0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bc80      	pop	{r7}
 8007bca:	4770      	bx	lr

08007bcc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b087      	sub	sp, #28
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007be0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007bea:	88fa      	ldrh	r2, [r7, #6]
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	371c      	adds	r7, #28
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bc80      	pop	{r7}
 8007bfc:	4770      	bx	lr

08007bfe <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b085      	sub	sp, #20
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c0e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bc80      	pop	{r7}
 8007c22:	4770      	bx	lr

08007c24 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d01c      	beq.n	8007c78 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d115      	bne.n	8007c74 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	2181      	movs	r1, #129	; 0x81
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f001 fd15 	bl	800969a <USBD_LL_Transmit>

      return USBD_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	e002      	b.n	8007c7a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e000      	b.n	8007c7a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007c78:	2302      	movs	r3, #2
  }
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b084      	sub	sp, #16
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c90:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d017      	beq.n	8007ccc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	7c1b      	ldrb	r3, [r3, #16]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d109      	bne.n	8007cb8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007caa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cae:	2101      	movs	r1, #1
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f001 fd15 	bl	80096e0 <USBD_LL_PrepareReceive>
 8007cb6:	e007      	b.n	8007cc8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cbe:	2340      	movs	r3, #64	; 0x40
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f001 fd0c 	bl	80096e0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	e000      	b.n	8007cce <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007ccc:	2302      	movs	r3, #2
  }
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b084      	sub	sp, #16
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	60f8      	str	r0, [r7, #12]
 8007cde:	60b9      	str	r1, [r7, #8]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d101      	bne.n	8007cee <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007cea:	2302      	movs	r3, #2
 8007cec:	e01a      	b.n	8007d24 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d003      	beq.n	8007d00 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d003      	beq.n	8007d0e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	68ba      	ldr	r2, [r7, #8]
 8007d0a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	79fa      	ldrb	r2, [r7, #7]
 8007d1a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f001 fb79 	bl	8009414 <USBD_LL_Init>

  return USBD_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d006      	beq.n	8007d4e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	73fb      	strb	r3, [r7, #15]
 8007d4c:	e001      	b.n	8007d52 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007d4e:	2302      	movs	r3, #2
 8007d50:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3714      	adds	r7, #20
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bc80      	pop	{r7}
 8007d5c:	4770      	bx	lr

08007d5e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b082      	sub	sp, #8
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f001 fbae 	bl	80094c8 <USBD_LL_Start>

  return USBD_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3708      	adds	r7, #8
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007d76:	b480      	push	{r7}
 8007d78:	b083      	sub	sp, #12
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bc80      	pop	{r7}
 8007d88:	4770      	bx	lr

08007d8a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b084      	sub	sp, #16
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	460b      	mov	r3, r1
 8007d94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007d96:	2302      	movs	r3, #2
 8007d98:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00c      	beq.n	8007dbe <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	78fa      	ldrb	r2, [r7, #3]
 8007dae:	4611      	mov	r1, r2
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	4798      	blx	r3
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	78fa      	ldrb	r2, [r7, #3]
 8007dde:	4611      	mov	r1, r2
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	4798      	blx	r3

  return USBD_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b082      	sub	sp, #8
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	4618      	mov	r0, r3
 8007e02:	f000 fed8 	bl	8008bb6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007e14:	461a      	mov	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007e22:	f003 031f 	and.w	r3, r3, #31
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d016      	beq.n	8007e58 <USBD_LL_SetupStage+0x6a>
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d81c      	bhi.n	8007e68 <USBD_LL_SetupStage+0x7a>
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d002      	beq.n	8007e38 <USBD_LL_SetupStage+0x4a>
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d008      	beq.n	8007e48 <USBD_LL_SetupStage+0x5a>
 8007e36:	e017      	b.n	8007e68 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e3e:	4619      	mov	r1, r3
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f9cb 	bl	80081dc <USBD_StdDevReq>
      break;
 8007e46:	e01a      	b.n	8007e7e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fa2d 	bl	80082b0 <USBD_StdItfReq>
      break;
 8007e56:	e012      	b.n	8007e7e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e5e:	4619      	mov	r1, r3
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fa6d 	bl	8008340 <USBD_StdEPReq>
      break;
 8007e66:	e00a      	b.n	8007e7e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007e6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f001 fb86 	bl	8009588 <USBD_LL_StallEP>
      break;
 8007e7c:	bf00      	nop
  }

  return USBD_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	460b      	mov	r3, r1
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007e96:	7afb      	ldrb	r3, [r7, #11]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d14b      	bne.n	8007f34 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ea2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007eaa:	2b03      	cmp	r3, #3
 8007eac:	d134      	bne.n	8007f18 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	68da      	ldr	r2, [r3, #12]
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d919      	bls.n	8007eee <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	68da      	ldr	r2, [r3, #12]
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	1ad2      	subs	r2, r2, r3
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	68da      	ldr	r2, [r3, #12]
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d203      	bcs.n	8007edc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	e002      	b.n	8007ee2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	6879      	ldr	r1, [r7, #4]
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f000 ff57 	bl	8008d9a <USBD_CtlContinueRx>
 8007eec:	e038      	b.n	8007f60 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00a      	beq.n	8007f10 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	d105      	bne.n	8007f10 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f000 ff54 	bl	8008dbe <USBD_CtlSendStatus>
 8007f16:	e023      	b.n	8007f60 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f1e:	2b05      	cmp	r3, #5
 8007f20:	d11e      	bne.n	8007f60 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f001 fb2b 	bl	8009588 <USBD_LL_StallEP>
 8007f32:	e015      	b.n	8007f60 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00d      	beq.n	8007f5c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007f46:	2b03      	cmp	r3, #3
 8007f48:	d108      	bne.n	8007f5c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	7afa      	ldrb	r2, [r7, #11]
 8007f54:	4611      	mov	r1, r2
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	4798      	blx	r3
 8007f5a:	e001      	b.n	8007f60 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	e000      	b.n	8007f62 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3718      	adds	r7, #24
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b086      	sub	sp, #24
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	60f8      	str	r0, [r7, #12]
 8007f72:	460b      	mov	r3, r1
 8007f74:	607a      	str	r2, [r7, #4]
 8007f76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007f78:	7afb      	ldrb	r3, [r7, #11]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d17f      	bne.n	800807e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	3314      	adds	r3, #20
 8007f82:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d15c      	bne.n	8008048 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	68da      	ldr	r2, [r3, #12]
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d915      	bls.n	8007fc6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	68da      	ldr	r2, [r3, #12]
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	1ad2      	subs	r2, r2, r3
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	461a      	mov	r2, r3
 8007fb0:	6879      	ldr	r1, [r7, #4]
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f000 fec1 	bl	8008d3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fb8:	2300      	movs	r3, #0
 8007fba:	2200      	movs	r2, #0
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f001 fb8e 	bl	80096e0 <USBD_LL_PrepareReceive>
 8007fc4:	e04e      	b.n	8008064 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	6912      	ldr	r2, [r2, #16]
 8007fce:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fd2:	fb01 f202 	mul.w	r2, r1, r2
 8007fd6:	1a9b      	subs	r3, r3, r2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d11c      	bne.n	8008016 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	689a      	ldr	r2, [r3, #8]
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d316      	bcc.n	8008016 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	689a      	ldr	r2, [r3, #8]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d20f      	bcs.n	8008016 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 fe9d 	bl	8008d3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008008:	2300      	movs	r3, #0
 800800a:	2200      	movs	r2, #0
 800800c:	2100      	movs	r1, #0
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f001 fb66 	bl	80096e0 <USBD_LL_PrepareReceive>
 8008014:	e026      	b.n	8008064 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00a      	beq.n	8008038 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008028:	2b03      	cmp	r3, #3
 800802a:	d105      	bne.n	8008038 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008038:	2180      	movs	r1, #128	; 0x80
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	f001 faa4 	bl	8009588 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f000 fecf 	bl	8008de4 <USBD_CtlReceiveStatus>
 8008046:	e00d      	b.n	8008064 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800804e:	2b04      	cmp	r3, #4
 8008050:	d004      	beq.n	800805c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008058:	2b00      	cmp	r3, #0
 800805a:	d103      	bne.n	8008064 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800805c:	2180      	movs	r1, #128	; 0x80
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f001 fa92 	bl	8009588 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800806a:	2b01      	cmp	r3, #1
 800806c:	d11d      	bne.n	80080aa <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f7ff fe81 	bl	8007d76 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800807c:	e015      	b.n	80080aa <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008084:	695b      	ldr	r3, [r3, #20]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00d      	beq.n	80080a6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008090:	2b03      	cmp	r3, #3
 8008092:	d108      	bne.n	80080a6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	7afa      	ldrb	r2, [r7, #11]
 800809e:	4611      	mov	r1, r2
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	4798      	blx	r3
 80080a4:	e001      	b.n	80080aa <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80080a6:	2302      	movs	r3, #2
 80080a8:	e000      	b.n	80080ac <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3718      	adds	r7, #24
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080bc:	2340      	movs	r3, #64	; 0x40
 80080be:	2200      	movs	r2, #0
 80080c0:	2100      	movs	r1, #0
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f001 fa1b 	bl	80094fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2240      	movs	r2, #64	; 0x40
 80080d4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080d8:	2340      	movs	r3, #64	; 0x40
 80080da:	2200      	movs	r2, #0
 80080dc:	2180      	movs	r1, #128	; 0x80
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f001 fa0d 	bl	80094fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2240      	movs	r2, #64	; 0x40
 80080ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008114:	2b00      	cmp	r3, #0
 8008116:	d009      	beq.n	800812c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	6852      	ldr	r2, [r2, #4]
 8008124:	b2d2      	uxtb	r2, r2
 8008126:	4611      	mov	r1, r2
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	4798      	blx	r3
  }

  return USBD_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008136:	b480      	push	{r7}
 8008138:	b083      	sub	sp, #12
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	460b      	mov	r3, r1
 8008140:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	78fa      	ldrb	r2, [r7, #3]
 8008146:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	370c      	adds	r7, #12
 800814e:	46bd      	mov	sp, r7
 8008150:	bc80      	pop	{r7}
 8008152:	4770      	bx	lr

08008154 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2204      	movs	r2, #4
 800816c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	370c      	adds	r7, #12
 8008176:	46bd      	mov	sp, r7
 8008178:	bc80      	pop	{r7}
 800817a:	4770      	bx	lr

0800817c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800818a:	2b04      	cmp	r3, #4
 800818c:	d105      	bne.n	800819a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bc80      	pop	{r7}
 80081a4:	4770      	bx	lr

080081a6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b082      	sub	sp, #8
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	d10b      	bne.n	80081d0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d005      	beq.n	80081d0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ca:	69db      	ldr	r3, [r3, #28]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
	...

080081dc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081f2:	2b40      	cmp	r3, #64	; 0x40
 80081f4:	d005      	beq.n	8008202 <USBD_StdDevReq+0x26>
 80081f6:	2b40      	cmp	r3, #64	; 0x40
 80081f8:	d84f      	bhi.n	800829a <USBD_StdDevReq+0xbe>
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d009      	beq.n	8008212 <USBD_StdDevReq+0x36>
 80081fe:	2b20      	cmp	r3, #32
 8008200:	d14b      	bne.n	800829a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	6839      	ldr	r1, [r7, #0]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	4798      	blx	r3
      break;
 8008210:	e048      	b.n	80082a4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	785b      	ldrb	r3, [r3, #1]
 8008216:	2b09      	cmp	r3, #9
 8008218:	d839      	bhi.n	800828e <USBD_StdDevReq+0xb2>
 800821a:	a201      	add	r2, pc, #4	; (adr r2, 8008220 <USBD_StdDevReq+0x44>)
 800821c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008220:	08008271 	.word	0x08008271
 8008224:	08008285 	.word	0x08008285
 8008228:	0800828f 	.word	0x0800828f
 800822c:	0800827b 	.word	0x0800827b
 8008230:	0800828f 	.word	0x0800828f
 8008234:	08008253 	.word	0x08008253
 8008238:	08008249 	.word	0x08008249
 800823c:	0800828f 	.word	0x0800828f
 8008240:	08008267 	.word	0x08008267
 8008244:	0800825d 	.word	0x0800825d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f9dc 	bl	8008608 <USBD_GetDescriptor>
          break;
 8008250:	e022      	b.n	8008298 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fb3f 	bl	80088d8 <USBD_SetAddress>
          break;
 800825a:	e01d      	b.n	8008298 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fb7e 	bl	8008960 <USBD_SetConfig>
          break;
 8008264:	e018      	b.n	8008298 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008266:	6839      	ldr	r1, [r7, #0]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fc07 	bl	8008a7c <USBD_GetConfig>
          break;
 800826e:	e013      	b.n	8008298 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008270:	6839      	ldr	r1, [r7, #0]
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fc37 	bl	8008ae6 <USBD_GetStatus>
          break;
 8008278:	e00e      	b.n	8008298 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800827a:	6839      	ldr	r1, [r7, #0]
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fc65 	bl	8008b4c <USBD_SetFeature>
          break;
 8008282:	e009      	b.n	8008298 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fc74 	bl	8008b74 <USBD_ClrFeature>
          break;
 800828c:	e004      	b.n	8008298 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fccc 	bl	8008c2e <USBD_CtlError>
          break;
 8008296:	bf00      	nop
      }
      break;
 8008298:	e004      	b.n	80082a4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800829a:	6839      	ldr	r1, [r7, #0]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fcc6 	bl	8008c2e <USBD_CtlError>
      break;
 80082a2:	bf00      	nop
  }

  return ret;
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop

080082b0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082c6:	2b40      	cmp	r3, #64	; 0x40
 80082c8:	d005      	beq.n	80082d6 <USBD_StdItfReq+0x26>
 80082ca:	2b40      	cmp	r3, #64	; 0x40
 80082cc:	d82e      	bhi.n	800832c <USBD_StdItfReq+0x7c>
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d001      	beq.n	80082d6 <USBD_StdItfReq+0x26>
 80082d2:	2b20      	cmp	r3, #32
 80082d4:	d12a      	bne.n	800832c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082dc:	3b01      	subs	r3, #1
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d81d      	bhi.n	800831e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	889b      	ldrh	r3, [r3, #4]
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d813      	bhi.n	8008314 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	6839      	ldr	r1, [r7, #0]
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	4798      	blx	r3
 80082fa:	4603      	mov	r3, r0
 80082fc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	88db      	ldrh	r3, [r3, #6]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d110      	bne.n	8008328 <USBD_StdItfReq+0x78>
 8008306:	7bfb      	ldrb	r3, [r7, #15]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10d      	bne.n	8008328 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fd56 	bl	8008dbe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008312:	e009      	b.n	8008328 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fc89 	bl	8008c2e <USBD_CtlError>
          break;
 800831c:	e004      	b.n	8008328 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fc84 	bl	8008c2e <USBD_CtlError>
          break;
 8008326:	e000      	b.n	800832a <USBD_StdItfReq+0x7a>
          break;
 8008328:	bf00      	nop
      }
      break;
 800832a:	e004      	b.n	8008336 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fc7d 	bl	8008c2e <USBD_CtlError>
      break;
 8008334:	bf00      	nop
  }

  return USBD_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	889b      	ldrh	r3, [r3, #4]
 8008352:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800835c:	2b40      	cmp	r3, #64	; 0x40
 800835e:	d007      	beq.n	8008370 <USBD_StdEPReq+0x30>
 8008360:	2b40      	cmp	r3, #64	; 0x40
 8008362:	f200 8146 	bhi.w	80085f2 <USBD_StdEPReq+0x2b2>
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00a      	beq.n	8008380 <USBD_StdEPReq+0x40>
 800836a:	2b20      	cmp	r3, #32
 800836c:	f040 8141 	bne.w	80085f2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	4798      	blx	r3
      break;
 800837e:	e13d      	b.n	80085fc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008388:	2b20      	cmp	r3, #32
 800838a:	d10a      	bne.n	80083a2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	4798      	blx	r3
 800839a:	4603      	mov	r3, r0
 800839c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800839e:	7bfb      	ldrb	r3, [r7, #15]
 80083a0:	e12d      	b.n	80085fe <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	785b      	ldrb	r3, [r3, #1]
 80083a6:	2b03      	cmp	r3, #3
 80083a8:	d007      	beq.n	80083ba <USBD_StdEPReq+0x7a>
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	f300 811b 	bgt.w	80085e6 <USBD_StdEPReq+0x2a6>
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d072      	beq.n	800849a <USBD_StdEPReq+0x15a>
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d03a      	beq.n	800842e <USBD_StdEPReq+0xee>
 80083b8:	e115      	b.n	80085e6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d002      	beq.n	80083ca <USBD_StdEPReq+0x8a>
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d015      	beq.n	80083f4 <USBD_StdEPReq+0xb4>
 80083c8:	e02b      	b.n	8008422 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00c      	beq.n	80083ea <USBD_StdEPReq+0xaa>
 80083d0:	7bbb      	ldrb	r3, [r7, #14]
 80083d2:	2b80      	cmp	r3, #128	; 0x80
 80083d4:	d009      	beq.n	80083ea <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80083d6:	7bbb      	ldrb	r3, [r7, #14]
 80083d8:	4619      	mov	r1, r3
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f001 f8d4 	bl	8009588 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80083e0:	2180      	movs	r1, #128	; 0x80
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f001 f8d0 	bl	8009588 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083e8:	e020      	b.n	800842c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fc1e 	bl	8008c2e <USBD_CtlError>
              break;
 80083f2:	e01b      	b.n	800842c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	885b      	ldrh	r3, [r3, #2]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10e      	bne.n	800841a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80083fc:	7bbb      	ldrb	r3, [r7, #14]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00b      	beq.n	800841a <USBD_StdEPReq+0xda>
 8008402:	7bbb      	ldrb	r3, [r7, #14]
 8008404:	2b80      	cmp	r3, #128	; 0x80
 8008406:	d008      	beq.n	800841a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	88db      	ldrh	r3, [r3, #6]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d104      	bne.n	800841a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008410:	7bbb      	ldrb	r3, [r7, #14]
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f001 f8b7 	bl	8009588 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fccf 	bl	8008dbe <USBD_CtlSendStatus>

              break;
 8008420:	e004      	b.n	800842c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fc02 	bl	8008c2e <USBD_CtlError>
              break;
 800842a:	bf00      	nop
          }
          break;
 800842c:	e0e0      	b.n	80085f0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008434:	2b02      	cmp	r3, #2
 8008436:	d002      	beq.n	800843e <USBD_StdEPReq+0xfe>
 8008438:	2b03      	cmp	r3, #3
 800843a:	d015      	beq.n	8008468 <USBD_StdEPReq+0x128>
 800843c:	e026      	b.n	800848c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800843e:	7bbb      	ldrb	r3, [r7, #14]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00c      	beq.n	800845e <USBD_StdEPReq+0x11e>
 8008444:	7bbb      	ldrb	r3, [r7, #14]
 8008446:	2b80      	cmp	r3, #128	; 0x80
 8008448:	d009      	beq.n	800845e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800844a:	7bbb      	ldrb	r3, [r7, #14]
 800844c:	4619      	mov	r1, r3
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f001 f89a 	bl	8009588 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008454:	2180      	movs	r1, #128	; 0x80
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f001 f896 	bl	8009588 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800845c:	e01c      	b.n	8008498 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fbe4 	bl	8008c2e <USBD_CtlError>
              break;
 8008466:	e017      	b.n	8008498 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	885b      	ldrh	r3, [r3, #2]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d112      	bne.n	8008496 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008470:	7bbb      	ldrb	r3, [r7, #14]
 8008472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008476:	2b00      	cmp	r3, #0
 8008478:	d004      	beq.n	8008484 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	4619      	mov	r1, r3
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f001 f8a1 	bl	80095c6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 fc9a 	bl	8008dbe <USBD_CtlSendStatus>
              }
              break;
 800848a:	e004      	b.n	8008496 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fbcd 	bl	8008c2e <USBD_CtlError>
              break;
 8008494:	e000      	b.n	8008498 <USBD_StdEPReq+0x158>
              break;
 8008496:	bf00      	nop
          }
          break;
 8008498:	e0aa      	b.n	80085f0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d002      	beq.n	80084aa <USBD_StdEPReq+0x16a>
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	d032      	beq.n	800850e <USBD_StdEPReq+0x1ce>
 80084a8:	e097      	b.n	80085da <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084aa:	7bbb      	ldrb	r3, [r7, #14]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d007      	beq.n	80084c0 <USBD_StdEPReq+0x180>
 80084b0:	7bbb      	ldrb	r3, [r7, #14]
 80084b2:	2b80      	cmp	r3, #128	; 0x80
 80084b4:	d004      	beq.n	80084c0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fbb8 	bl	8008c2e <USBD_CtlError>
                break;
 80084be:	e091      	b.n	80085e4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	da0b      	bge.n	80084e0 <USBD_StdEPReq+0x1a0>
 80084c8:	7bbb      	ldrb	r3, [r7, #14]
 80084ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084ce:	4613      	mov	r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4413      	add	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	3310      	adds	r3, #16
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	4413      	add	r3, r2
 80084dc:	3304      	adds	r3, #4
 80084de:	e00b      	b.n	80084f8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084e0:	7bbb      	ldrb	r3, [r7, #14]
 80084e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084e6:	4613      	mov	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4413      	add	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	4413      	add	r3, r2
 80084f6:	3304      	adds	r3, #4
 80084f8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	2200      	movs	r2, #0
 80084fe:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2202      	movs	r2, #2
 8008504:	4619      	mov	r1, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fbfb 	bl	8008d02 <USBD_CtlSendData>
              break;
 800850c:	e06a      	b.n	80085e4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800850e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008512:	2b00      	cmp	r3, #0
 8008514:	da11      	bge.n	800853a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008516:	7bbb      	ldrb	r3, [r7, #14]
 8008518:	f003 020f 	and.w	r2, r3, #15
 800851c:	6879      	ldr	r1, [r7, #4]
 800851e:	4613      	mov	r3, r2
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	4413      	add	r3, r2
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	440b      	add	r3, r1
 8008528:	3318      	adds	r3, #24
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d117      	bne.n	8008560 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fb7b 	bl	8008c2e <USBD_CtlError>
                  break;
 8008538:	e054      	b.n	80085e4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800853a:	7bbb      	ldrb	r3, [r7, #14]
 800853c:	f003 020f 	and.w	r2, r3, #15
 8008540:	6879      	ldr	r1, [r7, #4]
 8008542:	4613      	mov	r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	4413      	add	r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	440b      	add	r3, r1
 800854c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d104      	bne.n	8008560 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fb68 	bl	8008c2e <USBD_CtlError>
                  break;
 800855e:	e041      	b.n	80085e4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008560:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008564:	2b00      	cmp	r3, #0
 8008566:	da0b      	bge.n	8008580 <USBD_StdEPReq+0x240>
 8008568:	7bbb      	ldrb	r3, [r7, #14]
 800856a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800856e:	4613      	mov	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4413      	add	r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	3310      	adds	r3, #16
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	4413      	add	r3, r2
 800857c:	3304      	adds	r3, #4
 800857e:	e00b      	b.n	8008598 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008580:	7bbb      	ldrb	r3, [r7, #14]
 8008582:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008586:	4613      	mov	r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4413      	add	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	4413      	add	r3, r2
 8008596:	3304      	adds	r3, #4
 8008598:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800859a:	7bbb      	ldrb	r3, [r7, #14]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d002      	beq.n	80085a6 <USBD_StdEPReq+0x266>
 80085a0:	7bbb      	ldrb	r3, [r7, #14]
 80085a2:	2b80      	cmp	r3, #128	; 0x80
 80085a4:	d103      	bne.n	80085ae <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	2200      	movs	r2, #0
 80085aa:	601a      	str	r2, [r3, #0]
 80085ac:	e00e      	b.n	80085cc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80085ae:	7bbb      	ldrb	r3, [r7, #14]
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f001 f826 	bl	8009604 <USBD_LL_IsStallEP>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d003      	beq.n	80085c6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	2201      	movs	r2, #1
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	e002      	b.n	80085cc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	2200      	movs	r2, #0
 80085ca:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	2202      	movs	r2, #2
 80085d0:	4619      	mov	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 fb95 	bl	8008d02 <USBD_CtlSendData>
              break;
 80085d8:	e004      	b.n	80085e4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80085da:	6839      	ldr	r1, [r7, #0]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fb26 	bl	8008c2e <USBD_CtlError>
              break;
 80085e2:	bf00      	nop
          }
          break;
 80085e4:	e004      	b.n	80085f0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80085e6:	6839      	ldr	r1, [r7, #0]
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fb20 	bl	8008c2e <USBD_CtlError>
          break;
 80085ee:	bf00      	nop
      }
      break;
 80085f0:	e004      	b.n	80085fc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80085f2:	6839      	ldr	r1, [r7, #0]
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fb1a 	bl	8008c2e <USBD_CtlError>
      break;
 80085fa:	bf00      	nop
  }

  return ret;
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
	...

08008608 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008612:	2300      	movs	r3, #0
 8008614:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008616:	2300      	movs	r3, #0
 8008618:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800861a:	2300      	movs	r3, #0
 800861c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	885b      	ldrh	r3, [r3, #2]
 8008622:	0a1b      	lsrs	r3, r3, #8
 8008624:	b29b      	uxth	r3, r3
 8008626:	3b01      	subs	r3, #1
 8008628:	2b06      	cmp	r3, #6
 800862a:	f200 8128 	bhi.w	800887e <USBD_GetDescriptor+0x276>
 800862e:	a201      	add	r2, pc, #4	; (adr r2, 8008634 <USBD_GetDescriptor+0x2c>)
 8008630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008634:	08008651 	.word	0x08008651
 8008638:	08008669 	.word	0x08008669
 800863c:	080086a9 	.word	0x080086a9
 8008640:	0800887f 	.word	0x0800887f
 8008644:	0800887f 	.word	0x0800887f
 8008648:	0800881f 	.word	0x0800881f
 800864c:	0800884b 	.word	0x0800884b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	7c12      	ldrb	r2, [r2, #16]
 800865c:	f107 0108 	add.w	r1, r7, #8
 8008660:	4610      	mov	r0, r2
 8008662:	4798      	blx	r3
 8008664:	60f8      	str	r0, [r7, #12]
      break;
 8008666:	e112      	b.n	800888e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	7c1b      	ldrb	r3, [r3, #16]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10d      	bne.n	800868c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008678:	f107 0208 	add.w	r2, r7, #8
 800867c:	4610      	mov	r0, r2
 800867e:	4798      	blx	r3
 8008680:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	3301      	adds	r3, #1
 8008686:	2202      	movs	r2, #2
 8008688:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800868a:	e100      	b.n	800888e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008694:	f107 0208 	add.w	r2, r7, #8
 8008698:	4610      	mov	r0, r2
 800869a:	4798      	blx	r3
 800869c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3301      	adds	r3, #1
 80086a2:	2202      	movs	r2, #2
 80086a4:	701a      	strb	r2, [r3, #0]
      break;
 80086a6:	e0f2      	b.n	800888e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	885b      	ldrh	r3, [r3, #2]
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b05      	cmp	r3, #5
 80086b0:	f200 80ac 	bhi.w	800880c <USBD_GetDescriptor+0x204>
 80086b4:	a201      	add	r2, pc, #4	; (adr r2, 80086bc <USBD_GetDescriptor+0xb4>)
 80086b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ba:	bf00      	nop
 80086bc:	080086d5 	.word	0x080086d5
 80086c0:	08008709 	.word	0x08008709
 80086c4:	0800873d 	.word	0x0800873d
 80086c8:	08008771 	.word	0x08008771
 80086cc:	080087a5 	.word	0x080087a5
 80086d0:	080087d9 	.word	0x080087d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00b      	beq.n	80086f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	7c12      	ldrb	r2, [r2, #16]
 80086ec:	f107 0108 	add.w	r1, r7, #8
 80086f0:	4610      	mov	r0, r2
 80086f2:	4798      	blx	r3
 80086f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086f6:	e091      	b.n	800881c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fa97 	bl	8008c2e <USBD_CtlError>
            err++;
 8008700:	7afb      	ldrb	r3, [r7, #11]
 8008702:	3301      	adds	r3, #1
 8008704:	72fb      	strb	r3, [r7, #11]
          break;
 8008706:	e089      	b.n	800881c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00b      	beq.n	800872c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	7c12      	ldrb	r2, [r2, #16]
 8008720:	f107 0108 	add.w	r1, r7, #8
 8008724:	4610      	mov	r0, r2
 8008726:	4798      	blx	r3
 8008728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800872a:	e077      	b.n	800881c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fa7d 	bl	8008c2e <USBD_CtlError>
            err++;
 8008734:	7afb      	ldrb	r3, [r7, #11]
 8008736:	3301      	adds	r3, #1
 8008738:	72fb      	strb	r3, [r7, #11]
          break;
 800873a:	e06f      	b.n	800881c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00b      	beq.n	8008760 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	7c12      	ldrb	r2, [r2, #16]
 8008754:	f107 0108 	add.w	r1, r7, #8
 8008758:	4610      	mov	r0, r2
 800875a:	4798      	blx	r3
 800875c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800875e:	e05d      	b.n	800881c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fa63 	bl	8008c2e <USBD_CtlError>
            err++;
 8008768:	7afb      	ldrb	r3, [r7, #11]
 800876a:	3301      	adds	r3, #1
 800876c:	72fb      	strb	r3, [r7, #11]
          break;
 800876e:	e055      	b.n	800881c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00b      	beq.n	8008794 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	7c12      	ldrb	r2, [r2, #16]
 8008788:	f107 0108 	add.w	r1, r7, #8
 800878c:	4610      	mov	r0, r2
 800878e:	4798      	blx	r3
 8008790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008792:	e043      	b.n	800881c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 fa49 	bl	8008c2e <USBD_CtlError>
            err++;
 800879c:	7afb      	ldrb	r3, [r7, #11]
 800879e:	3301      	adds	r3, #1
 80087a0:	72fb      	strb	r3, [r7, #11]
          break;
 80087a2:	e03b      	b.n	800881c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087aa:	695b      	ldr	r3, [r3, #20]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00b      	beq.n	80087c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087b6:	695b      	ldr	r3, [r3, #20]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	7c12      	ldrb	r2, [r2, #16]
 80087bc:	f107 0108 	add.w	r1, r7, #8
 80087c0:	4610      	mov	r0, r2
 80087c2:	4798      	blx	r3
 80087c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087c6:	e029      	b.n	800881c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087c8:	6839      	ldr	r1, [r7, #0]
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fa2f 	bl	8008c2e <USBD_CtlError>
            err++;
 80087d0:	7afb      	ldrb	r3, [r7, #11]
 80087d2:	3301      	adds	r3, #1
 80087d4:	72fb      	strb	r3, [r7, #11]
          break;
 80087d6:	e021      	b.n	800881c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087de:	699b      	ldr	r3, [r3, #24]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00b      	beq.n	80087fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	7c12      	ldrb	r2, [r2, #16]
 80087f0:	f107 0108 	add.w	r1, r7, #8
 80087f4:	4610      	mov	r0, r2
 80087f6:	4798      	blx	r3
 80087f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087fa:	e00f      	b.n	800881c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087fc:	6839      	ldr	r1, [r7, #0]
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 fa15 	bl	8008c2e <USBD_CtlError>
            err++;
 8008804:	7afb      	ldrb	r3, [r7, #11]
 8008806:	3301      	adds	r3, #1
 8008808:	72fb      	strb	r3, [r7, #11]
          break;
 800880a:	e007      	b.n	800881c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800880c:	6839      	ldr	r1, [r7, #0]
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fa0d 	bl	8008c2e <USBD_CtlError>
          err++;
 8008814:	7afb      	ldrb	r3, [r7, #11]
 8008816:	3301      	adds	r3, #1
 8008818:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800881a:	e038      	b.n	800888e <USBD_GetDescriptor+0x286>
 800881c:	e037      	b.n	800888e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	7c1b      	ldrb	r3, [r3, #16]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d109      	bne.n	800883a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800882c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800882e:	f107 0208 	add.w	r2, r7, #8
 8008832:	4610      	mov	r0, r2
 8008834:	4798      	blx	r3
 8008836:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008838:	e029      	b.n	800888e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800883a:	6839      	ldr	r1, [r7, #0]
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 f9f6 	bl	8008c2e <USBD_CtlError>
        err++;
 8008842:	7afb      	ldrb	r3, [r7, #11]
 8008844:	3301      	adds	r3, #1
 8008846:	72fb      	strb	r3, [r7, #11]
      break;
 8008848:	e021      	b.n	800888e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	7c1b      	ldrb	r3, [r3, #16]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10d      	bne.n	800886e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885a:	f107 0208 	add.w	r2, r7, #8
 800885e:	4610      	mov	r0, r2
 8008860:	4798      	blx	r3
 8008862:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	3301      	adds	r3, #1
 8008868:	2207      	movs	r2, #7
 800886a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800886c:	e00f      	b.n	800888e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f9dc 	bl	8008c2e <USBD_CtlError>
        err++;
 8008876:	7afb      	ldrb	r3, [r7, #11]
 8008878:	3301      	adds	r3, #1
 800887a:	72fb      	strb	r3, [r7, #11]
      break;
 800887c:	e007      	b.n	800888e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f9d4 	bl	8008c2e <USBD_CtlError>
      err++;
 8008886:	7afb      	ldrb	r3, [r7, #11]
 8008888:	3301      	adds	r3, #1
 800888a:	72fb      	strb	r3, [r7, #11]
      break;
 800888c:	bf00      	nop
  }

  if (err != 0U)
 800888e:	7afb      	ldrb	r3, [r7, #11]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d11c      	bne.n	80088ce <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008894:	893b      	ldrh	r3, [r7, #8]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d011      	beq.n	80088be <USBD_GetDescriptor+0x2b6>
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	88db      	ldrh	r3, [r3, #6]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00d      	beq.n	80088be <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	88da      	ldrh	r2, [r3, #6]
 80088a6:	893b      	ldrh	r3, [r7, #8]
 80088a8:	4293      	cmp	r3, r2
 80088aa:	bf28      	it	cs
 80088ac:	4613      	movcs	r3, r2
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80088b2:	893b      	ldrh	r3, [r7, #8]
 80088b4:	461a      	mov	r2, r3
 80088b6:	68f9      	ldr	r1, [r7, #12]
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 fa22 	bl	8008d02 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	88db      	ldrh	r3, [r3, #6]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d104      	bne.n	80088d0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fa79 	bl	8008dbe <USBD_CtlSendStatus>
 80088cc:	e000      	b.n	80088d0 <USBD_GetDescriptor+0x2c8>
    return;
 80088ce:	bf00      	nop
    }
  }
}
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop

080088d8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	889b      	ldrh	r3, [r3, #4]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d130      	bne.n	800894c <USBD_SetAddress+0x74>
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	88db      	ldrh	r3, [r3, #6]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d12c      	bne.n	800894c <USBD_SetAddress+0x74>
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	885b      	ldrh	r3, [r3, #2]
 80088f6:	2b7f      	cmp	r3, #127	; 0x7f
 80088f8:	d828      	bhi.n	800894c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	885b      	ldrh	r3, [r3, #2]
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008904:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800890c:	2b03      	cmp	r3, #3
 800890e:	d104      	bne.n	800891a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f98b 	bl	8008c2e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008918:	e01d      	b.n	8008956 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	7bfa      	ldrb	r2, [r7, #15]
 800891e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008922:	7bfb      	ldrb	r3, [r7, #15]
 8008924:	4619      	mov	r1, r3
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fe98 	bl	800965c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fa46 	bl	8008dbe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008932:	7bfb      	ldrb	r3, [r7, #15]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d004      	beq.n	8008942 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008940:	e009      	b.n	8008956 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2201      	movs	r2, #1
 8008946:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800894a:	e004      	b.n	8008956 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f96d 	bl	8008c2e <USBD_CtlError>
  }
}
 8008954:	bf00      	nop
 8008956:	bf00      	nop
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
	...

08008960 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	885b      	ldrh	r3, [r3, #2]
 800896e:	b2da      	uxtb	r2, r3
 8008970:	4b41      	ldr	r3, [pc, #260]	; (8008a78 <USBD_SetConfig+0x118>)
 8008972:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008974:	4b40      	ldr	r3, [pc, #256]	; (8008a78 <USBD_SetConfig+0x118>)
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d904      	bls.n	8008986 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f955 	bl	8008c2e <USBD_CtlError>
 8008984:	e075      	b.n	8008a72 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800898c:	2b02      	cmp	r3, #2
 800898e:	d002      	beq.n	8008996 <USBD_SetConfig+0x36>
 8008990:	2b03      	cmp	r3, #3
 8008992:	d023      	beq.n	80089dc <USBD_SetConfig+0x7c>
 8008994:	e062      	b.n	8008a5c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008996:	4b38      	ldr	r3, [pc, #224]	; (8008a78 <USBD_SetConfig+0x118>)
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d01a      	beq.n	80089d4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800899e:	4b36      	ldr	r3, [pc, #216]	; (8008a78 <USBD_SetConfig+0x118>)
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	461a      	mov	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2203      	movs	r2, #3
 80089ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80089b0:	4b31      	ldr	r3, [pc, #196]	; (8008a78 <USBD_SetConfig+0x118>)
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	4619      	mov	r1, r3
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f7ff f9e7 	bl	8007d8a <USBD_SetClassConfig>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d104      	bne.n	80089cc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f932 	bl	8008c2e <USBD_CtlError>
            return;
 80089ca:	e052      	b.n	8008a72 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 f9f6 	bl	8008dbe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80089d2:	e04e      	b.n	8008a72 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f9f2 	bl	8008dbe <USBD_CtlSendStatus>
        break;
 80089da:	e04a      	b.n	8008a72 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80089dc:	4b26      	ldr	r3, [pc, #152]	; (8008a78 <USBD_SetConfig+0x118>)
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d112      	bne.n	8008a0a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2202      	movs	r2, #2
 80089e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80089ec:	4b22      	ldr	r3, [pc, #136]	; (8008a78 <USBD_SetConfig+0x118>)
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	461a      	mov	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80089f6:	4b20      	ldr	r3, [pc, #128]	; (8008a78 <USBD_SetConfig+0x118>)
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	4619      	mov	r1, r3
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f7ff f9e3 	bl	8007dc8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f9db 	bl	8008dbe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008a08:	e033      	b.n	8008a72 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008a0a:	4b1b      	ldr	r3, [pc, #108]	; (8008a78 <USBD_SetConfig+0x118>)
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	461a      	mov	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d01d      	beq.n	8008a54 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	4619      	mov	r1, r3
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f7ff f9d1 	bl	8007dc8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008a26:	4b14      	ldr	r3, [pc, #80]	; (8008a78 <USBD_SetConfig+0x118>)
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008a30:	4b11      	ldr	r3, [pc, #68]	; (8008a78 <USBD_SetConfig+0x118>)
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	4619      	mov	r1, r3
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f7ff f9a7 	bl	8007d8a <USBD_SetClassConfig>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d104      	bne.n	8008a4c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008a42:	6839      	ldr	r1, [r7, #0]
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f8f2 	bl	8008c2e <USBD_CtlError>
            return;
 8008a4a:	e012      	b.n	8008a72 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 f9b6 	bl	8008dbe <USBD_CtlSendStatus>
        break;
 8008a52:	e00e      	b.n	8008a72 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f9b2 	bl	8008dbe <USBD_CtlSendStatus>
        break;
 8008a5a:	e00a      	b.n	8008a72 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f8e5 	bl	8008c2e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008a64:	4b04      	ldr	r3, [pc, #16]	; (8008a78 <USBD_SetConfig+0x118>)
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	4619      	mov	r1, r3
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f7ff f9ac 	bl	8007dc8 <USBD_ClrClassConfig>
        break;
 8008a70:	bf00      	nop
    }
  }
}
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	2000028c 	.word	0x2000028c

08008a7c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	88db      	ldrh	r3, [r3, #6]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d004      	beq.n	8008a98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f8cc 	bl	8008c2e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008a96:	e022      	b.n	8008ade <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	dc02      	bgt.n	8008aa8 <USBD_GetConfig+0x2c>
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	dc03      	bgt.n	8008aae <USBD_GetConfig+0x32>
 8008aa6:	e015      	b.n	8008ad4 <USBD_GetConfig+0x58>
 8008aa8:	2b03      	cmp	r3, #3
 8008aaa:	d00b      	beq.n	8008ac4 <USBD_GetConfig+0x48>
 8008aac:	e012      	b.n	8008ad4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	3308      	adds	r3, #8
 8008ab8:	2201      	movs	r2, #1
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f920 	bl	8008d02 <USBD_CtlSendData>
        break;
 8008ac2:	e00c      	b.n	8008ade <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	3304      	adds	r3, #4
 8008ac8:	2201      	movs	r2, #1
 8008aca:	4619      	mov	r1, r3
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f918 	bl	8008d02 <USBD_CtlSendData>
        break;
 8008ad2:	e004      	b.n	8008ade <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f8a9 	bl	8008c2e <USBD_CtlError>
        break;
 8008adc:	bf00      	nop
}
 8008ade:	bf00      	nop
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b082      	sub	sp, #8
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008af6:	3b01      	subs	r3, #1
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	d81e      	bhi.n	8008b3a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	88db      	ldrh	r3, [r3, #6]
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d004      	beq.n	8008b0e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008b04:	6839      	ldr	r1, [r7, #0]
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f891 	bl	8008c2e <USBD_CtlError>
        break;
 8008b0c:	e01a      	b.n	8008b44 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2201      	movs	r2, #1
 8008b12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d005      	beq.n	8008b2a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	f043 0202 	orr.w	r2, r3, #2
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	330c      	adds	r3, #12
 8008b2e:	2202      	movs	r2, #2
 8008b30:	4619      	mov	r1, r3
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 f8e5 	bl	8008d02 <USBD_CtlSendData>
      break;
 8008b38:	e004      	b.n	8008b44 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 f876 	bl	8008c2e <USBD_CtlError>
      break;
 8008b42:	bf00      	nop
  }
}
 8008b44:	bf00      	nop
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	885b      	ldrh	r3, [r3, #2]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d106      	bne.n	8008b6c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f929 	bl	8008dbe <USBD_CtlSendStatus>
  }
}
 8008b6c:	bf00      	nop
 8008b6e:	3708      	adds	r7, #8
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b84:	3b01      	subs	r3, #1
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	d80b      	bhi.n	8008ba2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	885b      	ldrh	r3, [r3, #2]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d10c      	bne.n	8008bac <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f90f 	bl	8008dbe <USBD_CtlSendStatus>
      }
      break;
 8008ba0:	e004      	b.n	8008bac <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f842 	bl	8008c2e <USBD_CtlError>
      break;
 8008baa:	e000      	b.n	8008bae <USBD_ClrFeature+0x3a>
      break;
 8008bac:	bf00      	nop
  }
}
 8008bae:	bf00      	nop
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b083      	sub	sp, #12
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	781a      	ldrb	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	785a      	ldrb	r2, [r3, #1]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	3302      	adds	r3, #2
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	3303      	adds	r3, #3
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	021b      	lsls	r3, r3, #8
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	4413      	add	r3, r2
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	3304      	adds	r3, #4
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	3305      	adds	r3, #5
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	021b      	lsls	r3, r3, #8
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	4413      	add	r3, r2
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	3306      	adds	r3, #6
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	3307      	adds	r3, #7
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	021b      	lsls	r3, r3, #8
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	4413      	add	r3, r2
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	80da      	strh	r2, [r3, #6]

}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bc80      	pop	{r7}
 8008c2c:	4770      	bx	lr

08008c2e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b082      	sub	sp, #8
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008c38:	2180      	movs	r1, #128	; 0x80
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fca4 	bl	8009588 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008c40:	2100      	movs	r1, #0
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fca0 	bl	8009588 <USBD_LL_StallEP>
}
 8008c48:	bf00      	nop
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d032      	beq.n	8008ccc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f000 f834 	bl	8008cd4 <USBD_GetLen>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	3301      	adds	r3, #1
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	005b      	lsls	r3, r3, #1
 8008c74:	b29a      	uxth	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008c7a:	7dfb      	ldrb	r3, [r7, #23]
 8008c7c:	1c5a      	adds	r2, r3, #1
 8008c7e:	75fa      	strb	r2, [r7, #23]
 8008c80:	461a      	mov	r2, r3
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	4413      	add	r3, r2
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	7812      	ldrb	r2, [r2, #0]
 8008c8a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008c8c:	7dfb      	ldrb	r3, [r7, #23]
 8008c8e:	1c5a      	adds	r2, r3, #1
 8008c90:	75fa      	strb	r2, [r7, #23]
 8008c92:	461a      	mov	r2, r3
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	4413      	add	r3, r2
 8008c98:	2203      	movs	r2, #3
 8008c9a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008c9c:	e012      	b.n	8008cc4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	1c5a      	adds	r2, r3, #1
 8008ca2:	60fa      	str	r2, [r7, #12]
 8008ca4:	7dfa      	ldrb	r2, [r7, #23]
 8008ca6:	1c51      	adds	r1, r2, #1
 8008ca8:	75f9      	strb	r1, [r7, #23]
 8008caa:	4611      	mov	r1, r2
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	440a      	add	r2, r1
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008cb4:	7dfb      	ldrb	r3, [r7, #23]
 8008cb6:	1c5a      	adds	r2, r3, #1
 8008cb8:	75fa      	strb	r2, [r7, #23]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1e8      	bne.n	8008c9e <USBD_GetString+0x4e>
    }
  }
}
 8008ccc:	bf00      	nop
 8008cce:	3718      	adds	r7, #24
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008ce0:	e005      	b.n	8008cee <USBD_GetLen+0x1a>
  {
    len++;
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	3301      	adds	r3, #1
 8008cec:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1f5      	bne.n	8008ce2 <USBD_GetLen+0xe>
  }

  return len;
 8008cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bc80      	pop	{r7}
 8008d00:	4770      	bx	lr

08008d02 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b084      	sub	sp, #16
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	60f8      	str	r0, [r7, #12]
 8008d0a:	60b9      	str	r1, [r7, #8]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2202      	movs	r2, #2
 8008d14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008d18:	88fa      	ldrh	r2, [r7, #6]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008d1e:	88fa      	ldrh	r2, [r7, #6]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d24:	88fb      	ldrh	r3, [r7, #6]
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	2100      	movs	r1, #0
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f000 fcb5 	bl	800969a <USBD_LL_Transmit>

  return USBD_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b084      	sub	sp, #16
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	60f8      	str	r0, [r7, #12]
 8008d42:	60b9      	str	r1, [r7, #8]
 8008d44:	4613      	mov	r3, r2
 8008d46:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d48:	88fb      	ldrh	r3, [r7, #6]
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	f000 fca3 	bl	800969a <USBD_LL_Transmit>

  return USBD_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b084      	sub	sp, #16
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	60f8      	str	r0, [r7, #12]
 8008d66:	60b9      	str	r1, [r7, #8]
 8008d68:	4613      	mov	r3, r2
 8008d6a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2203      	movs	r2, #3
 8008d70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008d74:	88fa      	ldrh	r2, [r7, #6]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008d7c:	88fa      	ldrh	r2, [r7, #6]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d84:	88fb      	ldrh	r3, [r7, #6]
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	2100      	movs	r1, #0
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f000 fca8 	bl	80096e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b084      	sub	sp, #16
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	60f8      	str	r0, [r7, #12]
 8008da2:	60b9      	str	r1, [r7, #8]
 8008da4:	4613      	mov	r3, r2
 8008da6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008da8:	88fb      	ldrh	r3, [r7, #6]
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	2100      	movs	r1, #0
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f000 fc96 	bl	80096e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b082      	sub	sp, #8
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2204      	movs	r2, #4
 8008dca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008dce:	2300      	movs	r3, #0
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fc60 	bl	800969a <USBD_LL_Transmit>

  return USBD_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2205      	movs	r2, #5
 8008df0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008df4:	2300      	movs	r3, #0
 8008df6:	2200      	movs	r2, #0
 8008df8:	2100      	movs	r1, #0
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fc70 	bl	80096e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
	...

08008e0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008e10:	2200      	movs	r2, #0
 8008e12:	4912      	ldr	r1, [pc, #72]	; (8008e5c <MX_USB_DEVICE_Init+0x50>)
 8008e14:	4812      	ldr	r0, [pc, #72]	; (8008e60 <MX_USB_DEVICE_Init+0x54>)
 8008e16:	f7fe ff5e 	bl	8007cd6 <USBD_Init>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d001      	beq.n	8008e24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008e20:	f7f7 fb64 	bl	80004ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008e24:	490f      	ldr	r1, [pc, #60]	; (8008e64 <MX_USB_DEVICE_Init+0x58>)
 8008e26:	480e      	ldr	r0, [pc, #56]	; (8008e60 <MX_USB_DEVICE_Init+0x54>)
 8008e28:	f7fe ff80 	bl	8007d2c <USBD_RegisterClass>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d001      	beq.n	8008e36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008e32:	f7f7 fb5b 	bl	80004ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008e36:	490c      	ldr	r1, [pc, #48]	; (8008e68 <MX_USB_DEVICE_Init+0x5c>)
 8008e38:	4809      	ldr	r0, [pc, #36]	; (8008e60 <MX_USB_DEVICE_Init+0x54>)
 8008e3a:	f7fe feb1 	bl	8007ba0 <USBD_CDC_RegisterInterface>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d001      	beq.n	8008e48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008e44:	f7f7 fb52 	bl	80004ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008e48:	4805      	ldr	r0, [pc, #20]	; (8008e60 <MX_USB_DEVICE_Init+0x54>)
 8008e4a:	f7fe ff88 	bl	8007d5e <USBD_Start>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008e54:	f7f7 fb4a 	bl	80004ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008e58:	bf00      	nop
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	2000012c 	.word	0x2000012c
 8008e60:	20000290 	.word	0x20000290
 8008e64:	20000018 	.word	0x20000018
 8008e68:	2000011c 	.word	0x2000011c

08008e6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008e70:	2200      	movs	r2, #0
 8008e72:	4905      	ldr	r1, [pc, #20]	; (8008e88 <CDC_Init_FS+0x1c>)
 8008e74:	4805      	ldr	r0, [pc, #20]	; (8008e8c <CDC_Init_FS+0x20>)
 8008e76:	f7fe fea9 	bl	8007bcc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008e7a:	4905      	ldr	r1, [pc, #20]	; (8008e90 <CDC_Init_FS+0x24>)
 8008e7c:	4803      	ldr	r0, [pc, #12]	; (8008e8c <CDC_Init_FS+0x20>)
 8008e7e:	f7fe febe 	bl	8007bfe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008e82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	20000954 	.word	0x20000954
 8008e8c:	20000290 	.word	0x20000290
 8008e90:	20000554 	.word	0x20000554

08008e94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008e94:	b480      	push	{r7}
 8008e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008e98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bc80      	pop	{r7}
 8008ea0:	4770      	bx	lr
	...

08008ea4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	4603      	mov	r3, r0
 8008eac:	6039      	str	r1, [r7, #0]
 8008eae:	71fb      	strb	r3, [r7, #7]
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008eb4:	79fb      	ldrb	r3, [r7, #7]
 8008eb6:	2b23      	cmp	r3, #35	; 0x23
 8008eb8:	d84a      	bhi.n	8008f50 <CDC_Control_FS+0xac>
 8008eba:	a201      	add	r2, pc, #4	; (adr r2, 8008ec0 <CDC_Control_FS+0x1c>)
 8008ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec0:	08008f51 	.word	0x08008f51
 8008ec4:	08008f51 	.word	0x08008f51
 8008ec8:	08008f51 	.word	0x08008f51
 8008ecc:	08008f51 	.word	0x08008f51
 8008ed0:	08008f51 	.word	0x08008f51
 8008ed4:	08008f51 	.word	0x08008f51
 8008ed8:	08008f51 	.word	0x08008f51
 8008edc:	08008f51 	.word	0x08008f51
 8008ee0:	08008f51 	.word	0x08008f51
 8008ee4:	08008f51 	.word	0x08008f51
 8008ee8:	08008f51 	.word	0x08008f51
 8008eec:	08008f51 	.word	0x08008f51
 8008ef0:	08008f51 	.word	0x08008f51
 8008ef4:	08008f51 	.word	0x08008f51
 8008ef8:	08008f51 	.word	0x08008f51
 8008efc:	08008f51 	.word	0x08008f51
 8008f00:	08008f51 	.word	0x08008f51
 8008f04:	08008f51 	.word	0x08008f51
 8008f08:	08008f51 	.word	0x08008f51
 8008f0c:	08008f51 	.word	0x08008f51
 8008f10:	08008f51 	.word	0x08008f51
 8008f14:	08008f51 	.word	0x08008f51
 8008f18:	08008f51 	.word	0x08008f51
 8008f1c:	08008f51 	.word	0x08008f51
 8008f20:	08008f51 	.word	0x08008f51
 8008f24:	08008f51 	.word	0x08008f51
 8008f28:	08008f51 	.word	0x08008f51
 8008f2c:	08008f51 	.word	0x08008f51
 8008f30:	08008f51 	.word	0x08008f51
 8008f34:	08008f51 	.word	0x08008f51
 8008f38:	08008f51 	.word	0x08008f51
 8008f3c:	08008f51 	.word	0x08008f51
 8008f40:	08008f51 	.word	0x08008f51
 8008f44:	08008f51 	.word	0x08008f51
 8008f48:	08008f51 	.word	0x08008f51
 8008f4c:	08008f51 	.word	0x08008f51
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008f50:	bf00      	nop
  }

  return (USBD_OK);
 8008f52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bc80      	pop	{r7}
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop

08008f60 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008f6a:	6879      	ldr	r1, [r7, #4]
 8008f6c:	482b      	ldr	r0, [pc, #172]	; (800901c <CDC_Receive_FS+0xbc>)
 8008f6e:	f7fe fe46 	bl	8007bfe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008f72:	482a      	ldr	r0, [pc, #168]	; (800901c <CDC_Receive_FS+0xbc>)
 8008f74:	f7fe fe85 	bl	8007c82 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	733b      	strb	r3, [r7, #12]
  memset(buffer, '\0', 64);
 8008f7e:	2240      	movs	r2, #64	; 0x40
 8008f80:	2100      	movs	r1, #0
 8008f82:	4827      	ldr	r0, [pc, #156]	; (8009020 <CDC_Receive_FS+0xc0>)
 8008f84:	f000 fcba 	bl	80098fc <memset>
  memcpy(buffer, Buf, len);
 8008f88:	7b3b      	ldrb	r3, [r7, #12]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	6879      	ldr	r1, [r7, #4]
 8008f8e:	4824      	ldr	r0, [pc, #144]	; (8009020 <CDC_Receive_FS+0xc0>)
 8008f90:	f000 fce6 	bl	8009960 <memcpy>
  char temp_val[4];
  uint8_t j = 0, k = 0;
 8008f94:	2300      	movs	r3, #0
 8008f96:	73fb      	strb	r3, [r7, #15]
 8008f98:	2300      	movs	r3, #0
 8008f9a:	73bb      	strb	r3, [r7, #14]

      for (uint8_t i = 0; i < 42; i++) {
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	737b      	strb	r3, [r7, #13]
 8008fa0:	e02e      	b.n	8009000 <CDC_Receive_FS+0xa0>
          if ((buffer[i] == ';') && (k < 10)) {
 8008fa2:	7b7b      	ldrb	r3, [r7, #13]
 8008fa4:	4a1e      	ldr	r2, [pc, #120]	; (8009020 <CDC_Receive_FS+0xc0>)
 8008fa6:	5cd3      	ldrb	r3, [r2, r3]
 8008fa8:	2b3b      	cmp	r3, #59	; 0x3b
 8008faa:	d118      	bne.n	8008fde <CDC_Receive_FS+0x7e>
 8008fac:	7bbb      	ldrb	r3, [r7, #14]
 8008fae:	2b09      	cmp	r3, #9
 8008fb0:	d815      	bhi.n	8008fde <CDC_Receive_FS+0x7e>
              temp_val[j] = '\0'; // Null karakterle sonlandır
 8008fb2:	7bfb      	ldrb	r3, [r7, #15]
 8008fb4:	3310      	adds	r3, #16
 8008fb6:	443b      	add	r3, r7
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f803 2c08 	strb.w	r2, [r3, #-8]
              rx_data[k] = atoi(temp_val);
 8008fbe:	f107 0308 	add.w	r3, r7, #8
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f000 fc0e 	bl	80097e4 <atoi>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	7bbb      	ldrb	r3, [r7, #14]
 8008fcc:	b2d1      	uxtb	r1, r2
 8008fce:	4a15      	ldr	r2, [pc, #84]	; (8009024 <CDC_Receive_FS+0xc4>)
 8008fd0:	54d1      	strb	r1, [r2, r3]
              k++;
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	73bb      	strb	r3, [r7, #14]
              j = 0;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	73fb      	strb	r3, [r7, #15]
 8008fdc:	e00d      	b.n	8008ffa <CDC_Receive_FS+0x9a>
          }
          else if (j < 3) { // Diziyi taşmadan veri eklemek için boyut kontrolü yapın
 8008fde:	7bfb      	ldrb	r3, [r7, #15]
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d80a      	bhi.n	8008ffa <CDC_Receive_FS+0x9a>
              temp_val[j] = buffer[i];
 8008fe4:	7b7a      	ldrb	r2, [r7, #13]
 8008fe6:	7bfb      	ldrb	r3, [r7, #15]
 8008fe8:	490d      	ldr	r1, [pc, #52]	; (8009020 <CDC_Receive_FS+0xc0>)
 8008fea:	5c8a      	ldrb	r2, [r1, r2]
 8008fec:	3310      	adds	r3, #16
 8008fee:	443b      	add	r3, r7
 8008ff0:	f803 2c08 	strb.w	r2, [r3, #-8]
              j++;
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	73fb      	strb	r3, [r7, #15]
      for (uint8_t i = 0; i < 42; i++) {
 8008ffa:	7b7b      	ldrb	r3, [r7, #13]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	737b      	strb	r3, [r7, #13]
 8009000:	7b7b      	ldrb	r3, [r7, #13]
 8009002:	2b29      	cmp	r3, #41	; 0x29
 8009004:	d9cd      	bls.n	8008fa2 <CDC_Receive_FS+0x42>
          }

      }
  memset(Buf, '\0', len);
 8009006:	7b3b      	ldrb	r3, [r7, #12]
 8009008:	461a      	mov	r2, r3
 800900a:	2100      	movs	r1, #0
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 fc75 	bl	80098fc <memset>


  return (USBD_OK);
 8009012:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	20000290 	.word	0x20000290
 8009020:	200001e8 	.word	0x200001e8
 8009024:	20000228 	.word	0x20000228

08009028 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	460b      	mov	r3, r1
 8009032:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009034:	2300      	movs	r3, #0
 8009036:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009038:	4b0d      	ldr	r3, [pc, #52]	; (8009070 <CDC_Transmit_FS+0x48>)
 800903a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800903e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009046:	2b00      	cmp	r3, #0
 8009048:	d001      	beq.n	800904e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800904a:	2301      	movs	r3, #1
 800904c:	e00b      	b.n	8009066 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800904e:	887b      	ldrh	r3, [r7, #2]
 8009050:	461a      	mov	r2, r3
 8009052:	6879      	ldr	r1, [r7, #4]
 8009054:	4806      	ldr	r0, [pc, #24]	; (8009070 <CDC_Transmit_FS+0x48>)
 8009056:	f7fe fdb9 	bl	8007bcc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800905a:	4805      	ldr	r0, [pc, #20]	; (8009070 <CDC_Transmit_FS+0x48>)
 800905c:	f7fe fde2 	bl	8007c24 <USBD_CDC_TransmitPacket>
 8009060:	4603      	mov	r3, r0
 8009062:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009064:	7bfb      	ldrb	r3, [r7, #15]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	20000290 	.word	0x20000290

08009074 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	4603      	mov	r3, r0
 800907c:	6039      	str	r1, [r7, #0]
 800907e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	2212      	movs	r2, #18
 8009084:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009086:	4b03      	ldr	r3, [pc, #12]	; (8009094 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009088:	4618      	mov	r0, r3
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	bc80      	pop	{r7}
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	20000148 	.word	0x20000148

08009098 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	4603      	mov	r3, r0
 80090a0:	6039      	str	r1, [r7, #0]
 80090a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	2204      	movs	r2, #4
 80090a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80090aa:	4b03      	ldr	r3, [pc, #12]	; (80090b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bc80      	pop	{r7}
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	2000015c 	.word	0x2000015c

080090bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	4603      	mov	r3, r0
 80090c4:	6039      	str	r1, [r7, #0]
 80090c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090c8:	79fb      	ldrb	r3, [r7, #7]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d105      	bne.n	80090da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090ce:	683a      	ldr	r2, [r7, #0]
 80090d0:	4907      	ldr	r1, [pc, #28]	; (80090f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80090d2:	4808      	ldr	r0, [pc, #32]	; (80090f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80090d4:	f7ff fdbc 	bl	8008c50 <USBD_GetString>
 80090d8:	e004      	b.n	80090e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090da:	683a      	ldr	r2, [r7, #0]
 80090dc:	4904      	ldr	r1, [pc, #16]	; (80090f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80090de:	4805      	ldr	r0, [pc, #20]	; (80090f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80090e0:	f7ff fdb6 	bl	8008c50 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090e4:	4b02      	ldr	r3, [pc, #8]	; (80090f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	20000d54 	.word	0x20000d54
 80090f4:	08009994 	.word	0x08009994

080090f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	4603      	mov	r3, r0
 8009100:	6039      	str	r1, [r7, #0]
 8009102:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009104:	683a      	ldr	r2, [r7, #0]
 8009106:	4904      	ldr	r1, [pc, #16]	; (8009118 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009108:	4804      	ldr	r0, [pc, #16]	; (800911c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800910a:	f7ff fda1 	bl	8008c50 <USBD_GetString>
  return USBD_StrDesc;
 800910e:	4b02      	ldr	r3, [pc, #8]	; (8009118 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009110:	4618      	mov	r0, r3
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	20000d54 	.word	0x20000d54
 800911c:	080099a8 	.word	0x080099a8

08009120 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	4603      	mov	r3, r0
 8009128:	6039      	str	r1, [r7, #0]
 800912a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	221a      	movs	r2, #26
 8009130:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009132:	f000 f843 	bl	80091bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009136:	4b02      	ldr	r3, [pc, #8]	; (8009140 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009138:	4618      	mov	r0, r3
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	20000160 	.word	0x20000160

08009144 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	4603      	mov	r3, r0
 800914c:	6039      	str	r1, [r7, #0]
 800914e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009150:	79fb      	ldrb	r3, [r7, #7]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d105      	bne.n	8009162 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	4907      	ldr	r1, [pc, #28]	; (8009178 <USBD_FS_ConfigStrDescriptor+0x34>)
 800915a:	4808      	ldr	r0, [pc, #32]	; (800917c <USBD_FS_ConfigStrDescriptor+0x38>)
 800915c:	f7ff fd78 	bl	8008c50 <USBD_GetString>
 8009160:	e004      	b.n	800916c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	4904      	ldr	r1, [pc, #16]	; (8009178 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009166:	4805      	ldr	r0, [pc, #20]	; (800917c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009168:	f7ff fd72 	bl	8008c50 <USBD_GetString>
  }
  return USBD_StrDesc;
 800916c:	4b02      	ldr	r3, [pc, #8]	; (8009178 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800916e:	4618      	mov	r0, r3
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	20000d54 	.word	0x20000d54
 800917c:	080099bc 	.word	0x080099bc

08009180 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	4603      	mov	r3, r0
 8009188:	6039      	str	r1, [r7, #0]
 800918a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800918c:	79fb      	ldrb	r3, [r7, #7]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d105      	bne.n	800919e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009192:	683a      	ldr	r2, [r7, #0]
 8009194:	4907      	ldr	r1, [pc, #28]	; (80091b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009196:	4808      	ldr	r0, [pc, #32]	; (80091b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009198:	f7ff fd5a 	bl	8008c50 <USBD_GetString>
 800919c:	e004      	b.n	80091a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	4904      	ldr	r1, [pc, #16]	; (80091b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80091a2:	4805      	ldr	r0, [pc, #20]	; (80091b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80091a4:	f7ff fd54 	bl	8008c50 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091a8:	4b02      	ldr	r3, [pc, #8]	; (80091b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	20000d54 	.word	0x20000d54
 80091b8:	080099c8 	.word	0x080099c8

080091bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80091c2:	4b0f      	ldr	r3, [pc, #60]	; (8009200 <Get_SerialNum+0x44>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80091c8:	4b0e      	ldr	r3, [pc, #56]	; (8009204 <Get_SerialNum+0x48>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80091ce:	4b0e      	ldr	r3, [pc, #56]	; (8009208 <Get_SerialNum+0x4c>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4413      	add	r3, r2
 80091da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d009      	beq.n	80091f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80091e2:	2208      	movs	r2, #8
 80091e4:	4909      	ldr	r1, [pc, #36]	; (800920c <Get_SerialNum+0x50>)
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f000 f814 	bl	8009214 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80091ec:	2204      	movs	r2, #4
 80091ee:	4908      	ldr	r1, [pc, #32]	; (8009210 <Get_SerialNum+0x54>)
 80091f0:	68b8      	ldr	r0, [r7, #8]
 80091f2:	f000 f80f 	bl	8009214 <IntToUnicode>
  }
}
 80091f6:	bf00      	nop
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	1ffff7e8 	.word	0x1ffff7e8
 8009204:	1ffff7ec 	.word	0x1ffff7ec
 8009208:	1ffff7f0 	.word	0x1ffff7f0
 800920c:	20000162 	.word	0x20000162
 8009210:	20000172 	.word	0x20000172

08009214 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009214:	b480      	push	{r7}
 8009216:	b087      	sub	sp, #28
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	4613      	mov	r3, r2
 8009220:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009222:	2300      	movs	r3, #0
 8009224:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009226:	2300      	movs	r3, #0
 8009228:	75fb      	strb	r3, [r7, #23]
 800922a:	e027      	b.n	800927c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	0f1b      	lsrs	r3, r3, #28
 8009230:	2b09      	cmp	r3, #9
 8009232:	d80b      	bhi.n	800924c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	0f1b      	lsrs	r3, r3, #28
 8009238:	b2da      	uxtb	r2, r3
 800923a:	7dfb      	ldrb	r3, [r7, #23]
 800923c:	005b      	lsls	r3, r3, #1
 800923e:	4619      	mov	r1, r3
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	440b      	add	r3, r1
 8009244:	3230      	adds	r2, #48	; 0x30
 8009246:	b2d2      	uxtb	r2, r2
 8009248:	701a      	strb	r2, [r3, #0]
 800924a:	e00a      	b.n	8009262 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	0f1b      	lsrs	r3, r3, #28
 8009250:	b2da      	uxtb	r2, r3
 8009252:	7dfb      	ldrb	r3, [r7, #23]
 8009254:	005b      	lsls	r3, r3, #1
 8009256:	4619      	mov	r1, r3
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	440b      	add	r3, r1
 800925c:	3237      	adds	r2, #55	; 0x37
 800925e:	b2d2      	uxtb	r2, r2
 8009260:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	011b      	lsls	r3, r3, #4
 8009266:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009268:	7dfb      	ldrb	r3, [r7, #23]
 800926a:	005b      	lsls	r3, r3, #1
 800926c:	3301      	adds	r3, #1
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	4413      	add	r3, r2
 8009272:	2200      	movs	r2, #0
 8009274:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009276:	7dfb      	ldrb	r3, [r7, #23]
 8009278:	3301      	adds	r3, #1
 800927a:	75fb      	strb	r3, [r7, #23]
 800927c:	7dfa      	ldrb	r2, [r7, #23]
 800927e:	79fb      	ldrb	r3, [r7, #7]
 8009280:	429a      	cmp	r2, r3
 8009282:	d3d3      	bcc.n	800922c <IntToUnicode+0x18>
  }
}
 8009284:	bf00      	nop
 8009286:	bf00      	nop
 8009288:	371c      	adds	r7, #28
 800928a:	46bd      	mov	sp, r7
 800928c:	bc80      	pop	{r7}
 800928e:	4770      	bx	lr

08009290 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a0d      	ldr	r2, [pc, #52]	; (80092d4 <HAL_PCD_MspInit+0x44>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d113      	bne.n	80092ca <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80092a2:	4b0d      	ldr	r3, [pc, #52]	; (80092d8 <HAL_PCD_MspInit+0x48>)
 80092a4:	69db      	ldr	r3, [r3, #28]
 80092a6:	4a0c      	ldr	r2, [pc, #48]	; (80092d8 <HAL_PCD_MspInit+0x48>)
 80092a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80092ac:	61d3      	str	r3, [r2, #28]
 80092ae:	4b0a      	ldr	r3, [pc, #40]	; (80092d8 <HAL_PCD_MspInit+0x48>)
 80092b0:	69db      	ldr	r3, [r3, #28]
 80092b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092b6:	60fb      	str	r3, [r7, #12]
 80092b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80092ba:	2200      	movs	r2, #0
 80092bc:	2100      	movs	r1, #0
 80092be:	2014      	movs	r0, #20
 80092c0:	f7f7 fb69 	bl	8000996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80092c4:	2014      	movs	r0, #20
 80092c6:	f7f7 fb82 	bl	80009ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80092ca:	bf00      	nop
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	40005c00 	.word	0x40005c00
 80092d8:	40021000 	.word	0x40021000

080092dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80092f0:	4619      	mov	r1, r3
 80092f2:	4610      	mov	r0, r2
 80092f4:	f7fe fd7b 	bl	8007dee <USBD_LL_SetupStage>
}
 80092f8:	bf00      	nop
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	460b      	mov	r3, r1
 800930a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8009312:	78fa      	ldrb	r2, [r7, #3]
 8009314:	6879      	ldr	r1, [r7, #4]
 8009316:	4613      	mov	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4413      	add	r3, r2
 800931c:	00db      	lsls	r3, r3, #3
 800931e:	440b      	add	r3, r1
 8009320:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	78fb      	ldrb	r3, [r7, #3]
 8009328:	4619      	mov	r1, r3
 800932a:	f7fe fdad 	bl	8007e88 <USBD_LL_DataOutStage>
}
 800932e:	bf00      	nop
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b082      	sub	sp, #8
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	460b      	mov	r3, r1
 8009340:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8009348:	78fa      	ldrb	r2, [r7, #3]
 800934a:	6879      	ldr	r1, [r7, #4]
 800934c:	4613      	mov	r3, r2
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	4413      	add	r3, r2
 8009352:	00db      	lsls	r3, r3, #3
 8009354:	440b      	add	r3, r1
 8009356:	333c      	adds	r3, #60	; 0x3c
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	78fb      	ldrb	r3, [r7, #3]
 800935c:	4619      	mov	r1, r3
 800935e:	f7fe fe04 	bl	8007f6a <USBD_LL_DataInStage>
}
 8009362:	bf00      	nop
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b082      	sub	sp, #8
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009378:	4618      	mov	r0, r3
 800937a:	f7fe ff14 	bl	80081a6 <USBD_LL_SOF>
}
 800937e:	bf00      	nop
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b084      	sub	sp, #16
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800938e:	2301      	movs	r3, #1
 8009390:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	2b02      	cmp	r3, #2
 8009398:	d001      	beq.n	800939e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800939a:	f7f7 f8a7 	bl	80004ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80093a4:	7bfa      	ldrb	r2, [r7, #15]
 80093a6:	4611      	mov	r1, r2
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fe fec4 	bl	8008136 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7fe fe7d 	bl	80080b4 <USBD_LL_Reset>
}
 80093ba:	bf00      	nop
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
	...

080093c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fe febe 	bl	8008154 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d005      	beq.n	80093ec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093e0:	4b04      	ldr	r3, [pc, #16]	; (80093f4 <HAL_PCD_SuspendCallback+0x30>)
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	4a03      	ldr	r2, [pc, #12]	; (80093f4 <HAL_PCD_SuspendCallback+0x30>)
 80093e6:	f043 0306 	orr.w	r3, r3, #6
 80093ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093ec:	bf00      	nop
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	e000ed00 	.word	0xe000ed00

080093f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009406:	4618      	mov	r0, r3
 8009408:	f7fe feb8 	bl	800817c <USBD_LL_Resume>
}
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800941c:	4a28      	ldr	r2, [pc, #160]	; (80094c0 <USBD_LL_Init+0xac>)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a26      	ldr	r2, [pc, #152]	; (80094c0 <USBD_LL_Init+0xac>)
 8009428:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800942c:	4b24      	ldr	r3, [pc, #144]	; (80094c0 <USBD_LL_Init+0xac>)
 800942e:	4a25      	ldr	r2, [pc, #148]	; (80094c4 <USBD_LL_Init+0xb0>)
 8009430:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009432:	4b23      	ldr	r3, [pc, #140]	; (80094c0 <USBD_LL_Init+0xac>)
 8009434:	2208      	movs	r2, #8
 8009436:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009438:	4b21      	ldr	r3, [pc, #132]	; (80094c0 <USBD_LL_Init+0xac>)
 800943a:	2202      	movs	r2, #2
 800943c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800943e:	4b20      	ldr	r3, [pc, #128]	; (80094c0 <USBD_LL_Init+0xac>)
 8009440:	2200      	movs	r2, #0
 8009442:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009444:	4b1e      	ldr	r3, [pc, #120]	; (80094c0 <USBD_LL_Init+0xac>)
 8009446:	2200      	movs	r2, #0
 8009448:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800944a:	4b1d      	ldr	r3, [pc, #116]	; (80094c0 <USBD_LL_Init+0xac>)
 800944c:	2200      	movs	r2, #0
 800944e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009450:	481b      	ldr	r0, [pc, #108]	; (80094c0 <USBD_LL_Init+0xac>)
 8009452:	f7f9 fbaf 	bl	8002bb4 <HAL_PCD_Init>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d001      	beq.n	8009460 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800945c:	f7f7 f846 	bl	80004ec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009466:	2318      	movs	r3, #24
 8009468:	2200      	movs	r2, #0
 800946a:	2100      	movs	r1, #0
 800946c:	f7fb f8ce 	bl	800460c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009476:	2358      	movs	r3, #88	; 0x58
 8009478:	2200      	movs	r2, #0
 800947a:	2180      	movs	r1, #128	; 0x80
 800947c:	f7fb f8c6 	bl	800460c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009486:	23c0      	movs	r3, #192	; 0xc0
 8009488:	2200      	movs	r2, #0
 800948a:	2181      	movs	r1, #129	; 0x81
 800948c:	f7fb f8be 	bl	800460c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009496:	f44f 7388 	mov.w	r3, #272	; 0x110
 800949a:	2200      	movs	r2, #0
 800949c:	2101      	movs	r1, #1
 800949e:	f7fb f8b5 	bl	800460c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094ac:	2200      	movs	r2, #0
 80094ae:	2182      	movs	r1, #130	; 0x82
 80094b0:	f7fb f8ac 	bl	800460c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	20000f54 	.word	0x20000f54
 80094c4:	40005c00 	.word	0x40005c00

080094c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094d0:	2300      	movs	r3, #0
 80094d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094de:	4618      	mov	r0, r3
 80094e0:	f7f9 fc67 	bl	8002db2 <HAL_PCD_Start>
 80094e4:	4603      	mov	r3, r0
 80094e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094e8:	7bfb      	ldrb	r3, [r7, #15]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 f94e 	bl	800978c <USBD_Get_USB_Status>
 80094f0:	4603      	mov	r3, r0
 80094f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b084      	sub	sp, #16
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
 8009506:	4608      	mov	r0, r1
 8009508:	4611      	mov	r1, r2
 800950a:	461a      	mov	r2, r3
 800950c:	4603      	mov	r3, r0
 800950e:	70fb      	strb	r3, [r7, #3]
 8009510:	460b      	mov	r3, r1
 8009512:	70bb      	strb	r3, [r7, #2]
 8009514:	4613      	mov	r3, r2
 8009516:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800951c:	2300      	movs	r3, #0
 800951e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009526:	78bb      	ldrb	r3, [r7, #2]
 8009528:	883a      	ldrh	r2, [r7, #0]
 800952a:	78f9      	ldrb	r1, [r7, #3]
 800952c:	f7f9 fdbc 	bl	80030a8 <HAL_PCD_EP_Open>
 8009530:	4603      	mov	r3, r0
 8009532:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009534:	7bfb      	ldrb	r3, [r7, #15]
 8009536:	4618      	mov	r0, r3
 8009538:	f000 f928 	bl	800978c <USBD_Get_USB_Status>
 800953c:	4603      	mov	r3, r0
 800953e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009540:	7bbb      	ldrb	r3, [r7, #14]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b084      	sub	sp, #16
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	460b      	mov	r3, r1
 8009554:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009556:	2300      	movs	r3, #0
 8009558:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009564:	78fa      	ldrb	r2, [r7, #3]
 8009566:	4611      	mov	r1, r2
 8009568:	4618      	mov	r0, r3
 800956a:	f7f9 fdfa 	bl	8003162 <HAL_PCD_EP_Close>
 800956e:	4603      	mov	r3, r0
 8009570:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009572:	7bfb      	ldrb	r3, [r7, #15]
 8009574:	4618      	mov	r0, r3
 8009576:	f000 f909 	bl	800978c <USBD_Get_USB_Status>
 800957a:	4603      	mov	r3, r0
 800957c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800957e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	460b      	mov	r3, r1
 8009592:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009598:	2300      	movs	r3, #0
 800959a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095a2:	78fa      	ldrb	r2, [r7, #3]
 80095a4:	4611      	mov	r1, r2
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7f9 fea2 	bl	80032f0 <HAL_PCD_EP_SetStall>
 80095ac:	4603      	mov	r3, r0
 80095ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	4618      	mov	r0, r3
 80095b4:	f000 f8ea 	bl	800978c <USBD_Get_USB_Status>
 80095b8:	4603      	mov	r3, r0
 80095ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b084      	sub	sp, #16
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	460b      	mov	r3, r1
 80095d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095d2:	2300      	movs	r3, #0
 80095d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095d6:	2300      	movs	r3, #0
 80095d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095e0:	78fa      	ldrb	r2, [r7, #3]
 80095e2:	4611      	mov	r1, r2
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7f9 fee3 	bl	80033b0 <HAL_PCD_EP_ClrStall>
 80095ea:	4603      	mov	r3, r0
 80095ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095ee:	7bfb      	ldrb	r3, [r7, #15]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f000 f8cb 	bl	800978c <USBD_Get_USB_Status>
 80095f6:	4603      	mov	r3, r0
 80095f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	460b      	mov	r3, r1
 800960e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009616:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009618:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800961c:	2b00      	cmp	r3, #0
 800961e:	da0c      	bge.n	800963a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009620:	78fb      	ldrb	r3, [r7, #3]
 8009622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009626:	68f9      	ldr	r1, [r7, #12]
 8009628:	1c5a      	adds	r2, r3, #1
 800962a:	4613      	mov	r3, r2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4413      	add	r3, r2
 8009630:	00db      	lsls	r3, r3, #3
 8009632:	440b      	add	r3, r1
 8009634:	3302      	adds	r3, #2
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	e00b      	b.n	8009652 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800963a:	78fb      	ldrb	r3, [r7, #3]
 800963c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009640:	68f9      	ldr	r1, [r7, #12]
 8009642:	4613      	mov	r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	4413      	add	r3, r2
 8009648:	00db      	lsls	r3, r3, #3
 800964a:	440b      	add	r3, r1
 800964c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009650:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009652:	4618      	mov	r0, r3
 8009654:	3714      	adds	r7, #20
 8009656:	46bd      	mov	sp, r7
 8009658:	bc80      	pop	{r7}
 800965a:	4770      	bx	lr

0800965c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	460b      	mov	r3, r1
 8009666:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800966c:	2300      	movs	r3, #0
 800966e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009676:	78fa      	ldrb	r2, [r7, #3]
 8009678:	4611      	mov	r1, r2
 800967a:	4618      	mov	r0, r3
 800967c:	f7f9 fcef 	bl	800305e <HAL_PCD_SetAddress>
 8009680:	4603      	mov	r3, r0
 8009682:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009684:	7bfb      	ldrb	r3, [r7, #15]
 8009686:	4618      	mov	r0, r3
 8009688:	f000 f880 	bl	800978c <USBD_Get_USB_Status>
 800968c:	4603      	mov	r3, r0
 800968e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009690:	7bbb      	ldrb	r3, [r7, #14]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b086      	sub	sp, #24
 800969e:	af00      	add	r7, sp, #0
 80096a0:	60f8      	str	r0, [r7, #12]
 80096a2:	607a      	str	r2, [r7, #4]
 80096a4:	461a      	mov	r2, r3
 80096a6:	460b      	mov	r3, r1
 80096a8:	72fb      	strb	r3, [r7, #11]
 80096aa:	4613      	mov	r3, r2
 80096ac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096ae:	2300      	movs	r3, #0
 80096b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096b2:	2300      	movs	r3, #0
 80096b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096bc:	893b      	ldrh	r3, [r7, #8]
 80096be:	7af9      	ldrb	r1, [r7, #11]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	f7f9 fdde 	bl	8003282 <HAL_PCD_EP_Transmit>
 80096c6:	4603      	mov	r3, r0
 80096c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096ca:	7dfb      	ldrb	r3, [r7, #23]
 80096cc:	4618      	mov	r0, r3
 80096ce:	f000 f85d 	bl	800978c <USBD_Get_USB_Status>
 80096d2:	4603      	mov	r3, r0
 80096d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3718      	adds	r7, #24
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	607a      	str	r2, [r7, #4]
 80096ea:	461a      	mov	r2, r3
 80096ec:	460b      	mov	r3, r1
 80096ee:	72fb      	strb	r3, [r7, #11]
 80096f0:	4613      	mov	r3, r2
 80096f2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096f8:	2300      	movs	r3, #0
 80096fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009702:	893b      	ldrh	r3, [r7, #8]
 8009704:	7af9      	ldrb	r1, [r7, #11]
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	f7f9 fd73 	bl	80031f2 <HAL_PCD_EP_Receive>
 800970c:	4603      	mov	r3, r0
 800970e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009710:	7dfb      	ldrb	r3, [r7, #23]
 8009712:	4618      	mov	r0, r3
 8009714:	f000 f83a 	bl	800978c <USBD_Get_USB_Status>
 8009718:	4603      	mov	r3, r0
 800971a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800971c:	7dbb      	ldrb	r3, [r7, #22]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3718      	adds	r7, #24
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b082      	sub	sp, #8
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	460b      	mov	r3, r1
 8009730:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009738:	78fa      	ldrb	r2, [r7, #3]
 800973a:	4611      	mov	r1, r2
 800973c:	4618      	mov	r0, r3
 800973e:	f7f9 fd89 	bl	8003254 <HAL_PCD_EP_GetRxCount>
 8009742:	4603      	mov	r3, r0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009754:	4b02      	ldr	r3, [pc, #8]	; (8009760 <USBD_static_malloc+0x14>)
}
 8009756:	4618      	mov	r0, r3
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	bc80      	pop	{r7}
 800975e:	4770      	bx	lr
 8009760:	20001244 	.word	0x20001244

08009764 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]

}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	bc80      	pop	{r7}
 8009774:	4770      	bx	lr

08009776 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009776:	b480      	push	{r7}
 8009778:	b083      	sub	sp, #12
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
 800977e:	460b      	mov	r3, r1
 8009780:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009782:	bf00      	nop
 8009784:	370c      	adds	r7, #12
 8009786:	46bd      	mov	sp, r7
 8009788:	bc80      	pop	{r7}
 800978a:	4770      	bx	lr

0800978c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800978c:	b480      	push	{r7}
 800978e:	b085      	sub	sp, #20
 8009790:	af00      	add	r7, sp, #0
 8009792:	4603      	mov	r3, r0
 8009794:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009796:	2300      	movs	r3, #0
 8009798:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800979a:	79fb      	ldrb	r3, [r7, #7]
 800979c:	2b03      	cmp	r3, #3
 800979e:	d817      	bhi.n	80097d0 <USBD_Get_USB_Status+0x44>
 80097a0:	a201      	add	r2, pc, #4	; (adr r2, 80097a8 <USBD_Get_USB_Status+0x1c>)
 80097a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a6:	bf00      	nop
 80097a8:	080097b9 	.word	0x080097b9
 80097ac:	080097bf 	.word	0x080097bf
 80097b0:	080097c5 	.word	0x080097c5
 80097b4:	080097cb 	.word	0x080097cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80097b8:	2300      	movs	r3, #0
 80097ba:	73fb      	strb	r3, [r7, #15]
    break;
 80097bc:	e00b      	b.n	80097d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097be:	2302      	movs	r3, #2
 80097c0:	73fb      	strb	r3, [r7, #15]
    break;
 80097c2:	e008      	b.n	80097d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80097c4:	2301      	movs	r3, #1
 80097c6:	73fb      	strb	r3, [r7, #15]
    break;
 80097c8:	e005      	b.n	80097d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80097ca:	2302      	movs	r3, #2
 80097cc:	73fb      	strb	r3, [r7, #15]
    break;
 80097ce:	e002      	b.n	80097d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80097d0:	2302      	movs	r3, #2
 80097d2:	73fb      	strb	r3, [r7, #15]
    break;
 80097d4:	bf00      	nop
  }
  return usb_status;
 80097d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3714      	adds	r7, #20
 80097dc:	46bd      	mov	sp, r7
 80097de:	bc80      	pop	{r7}
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop

080097e4 <atoi>:
 80097e4:	220a      	movs	r2, #10
 80097e6:	2100      	movs	r1, #0
 80097e8:	f000 b87e 	b.w	80098e8 <strtol>

080097ec <_strtol_l.constprop.0>:
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097f2:	4686      	mov	lr, r0
 80097f4:	4690      	mov	r8, r2
 80097f6:	d001      	beq.n	80097fc <_strtol_l.constprop.0+0x10>
 80097f8:	2b24      	cmp	r3, #36	; 0x24
 80097fa:	d906      	bls.n	800980a <_strtol_l.constprop.0+0x1e>
 80097fc:	f000 f886 	bl	800990c <__errno>
 8009800:	2316      	movs	r3, #22
 8009802:	6003      	str	r3, [r0, #0]
 8009804:	2000      	movs	r0, #0
 8009806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800980a:	460d      	mov	r5, r1
 800980c:	4835      	ldr	r0, [pc, #212]	; (80098e4 <_strtol_l.constprop.0+0xf8>)
 800980e:	462a      	mov	r2, r5
 8009810:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009814:	5d06      	ldrb	r6, [r0, r4]
 8009816:	f016 0608 	ands.w	r6, r6, #8
 800981a:	d1f8      	bne.n	800980e <_strtol_l.constprop.0+0x22>
 800981c:	2c2d      	cmp	r4, #45	; 0x2d
 800981e:	d12e      	bne.n	800987e <_strtol_l.constprop.0+0x92>
 8009820:	2601      	movs	r6, #1
 8009822:	782c      	ldrb	r4, [r5, #0]
 8009824:	1c95      	adds	r5, r2, #2
 8009826:	2b00      	cmp	r3, #0
 8009828:	d057      	beq.n	80098da <_strtol_l.constprop.0+0xee>
 800982a:	2b10      	cmp	r3, #16
 800982c:	d109      	bne.n	8009842 <_strtol_l.constprop.0+0x56>
 800982e:	2c30      	cmp	r4, #48	; 0x30
 8009830:	d107      	bne.n	8009842 <_strtol_l.constprop.0+0x56>
 8009832:	782a      	ldrb	r2, [r5, #0]
 8009834:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009838:	2a58      	cmp	r2, #88	; 0x58
 800983a:	d149      	bne.n	80098d0 <_strtol_l.constprop.0+0xe4>
 800983c:	2310      	movs	r3, #16
 800983e:	786c      	ldrb	r4, [r5, #1]
 8009840:	3502      	adds	r5, #2
 8009842:	2200      	movs	r2, #0
 8009844:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8009848:	f10c 3cff 	add.w	ip, ip, #4294967295
 800984c:	fbbc f9f3 	udiv	r9, ip, r3
 8009850:	4610      	mov	r0, r2
 8009852:	fb03 ca19 	mls	sl, r3, r9, ip
 8009856:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800985a:	2f09      	cmp	r7, #9
 800985c:	d814      	bhi.n	8009888 <_strtol_l.constprop.0+0x9c>
 800985e:	463c      	mov	r4, r7
 8009860:	42a3      	cmp	r3, r4
 8009862:	dd20      	ble.n	80098a6 <_strtol_l.constprop.0+0xba>
 8009864:	1c57      	adds	r7, r2, #1
 8009866:	d007      	beq.n	8009878 <_strtol_l.constprop.0+0x8c>
 8009868:	4581      	cmp	r9, r0
 800986a:	d319      	bcc.n	80098a0 <_strtol_l.constprop.0+0xb4>
 800986c:	d101      	bne.n	8009872 <_strtol_l.constprop.0+0x86>
 800986e:	45a2      	cmp	sl, r4
 8009870:	db16      	blt.n	80098a0 <_strtol_l.constprop.0+0xb4>
 8009872:	2201      	movs	r2, #1
 8009874:	fb00 4003 	mla	r0, r0, r3, r4
 8009878:	f815 4b01 	ldrb.w	r4, [r5], #1
 800987c:	e7eb      	b.n	8009856 <_strtol_l.constprop.0+0x6a>
 800987e:	2c2b      	cmp	r4, #43	; 0x2b
 8009880:	bf04      	itt	eq
 8009882:	782c      	ldrbeq	r4, [r5, #0]
 8009884:	1c95      	addeq	r5, r2, #2
 8009886:	e7ce      	b.n	8009826 <_strtol_l.constprop.0+0x3a>
 8009888:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800988c:	2f19      	cmp	r7, #25
 800988e:	d801      	bhi.n	8009894 <_strtol_l.constprop.0+0xa8>
 8009890:	3c37      	subs	r4, #55	; 0x37
 8009892:	e7e5      	b.n	8009860 <_strtol_l.constprop.0+0x74>
 8009894:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009898:	2f19      	cmp	r7, #25
 800989a:	d804      	bhi.n	80098a6 <_strtol_l.constprop.0+0xba>
 800989c:	3c57      	subs	r4, #87	; 0x57
 800989e:	e7df      	b.n	8009860 <_strtol_l.constprop.0+0x74>
 80098a0:	f04f 32ff 	mov.w	r2, #4294967295
 80098a4:	e7e8      	b.n	8009878 <_strtol_l.constprop.0+0x8c>
 80098a6:	1c53      	adds	r3, r2, #1
 80098a8:	d108      	bne.n	80098bc <_strtol_l.constprop.0+0xd0>
 80098aa:	2322      	movs	r3, #34	; 0x22
 80098ac:	4660      	mov	r0, ip
 80098ae:	f8ce 3000 	str.w	r3, [lr]
 80098b2:	f1b8 0f00 	cmp.w	r8, #0
 80098b6:	d0a6      	beq.n	8009806 <_strtol_l.constprop.0+0x1a>
 80098b8:	1e69      	subs	r1, r5, #1
 80098ba:	e006      	b.n	80098ca <_strtol_l.constprop.0+0xde>
 80098bc:	b106      	cbz	r6, 80098c0 <_strtol_l.constprop.0+0xd4>
 80098be:	4240      	negs	r0, r0
 80098c0:	f1b8 0f00 	cmp.w	r8, #0
 80098c4:	d09f      	beq.n	8009806 <_strtol_l.constprop.0+0x1a>
 80098c6:	2a00      	cmp	r2, #0
 80098c8:	d1f6      	bne.n	80098b8 <_strtol_l.constprop.0+0xcc>
 80098ca:	f8c8 1000 	str.w	r1, [r8]
 80098ce:	e79a      	b.n	8009806 <_strtol_l.constprop.0+0x1a>
 80098d0:	2430      	movs	r4, #48	; 0x30
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d1b5      	bne.n	8009842 <_strtol_l.constprop.0+0x56>
 80098d6:	2308      	movs	r3, #8
 80098d8:	e7b3      	b.n	8009842 <_strtol_l.constprop.0+0x56>
 80098da:	2c30      	cmp	r4, #48	; 0x30
 80098dc:	d0a9      	beq.n	8009832 <_strtol_l.constprop.0+0x46>
 80098de:	230a      	movs	r3, #10
 80098e0:	e7af      	b.n	8009842 <_strtol_l.constprop.0+0x56>
 80098e2:	bf00      	nop
 80098e4:	08009a03 	.word	0x08009a03

080098e8 <strtol>:
 80098e8:	4613      	mov	r3, r2
 80098ea:	460a      	mov	r2, r1
 80098ec:	4601      	mov	r1, r0
 80098ee:	4802      	ldr	r0, [pc, #8]	; (80098f8 <strtol+0x10>)
 80098f0:	6800      	ldr	r0, [r0, #0]
 80098f2:	f7ff bf7b 	b.w	80097ec <_strtol_l.constprop.0>
 80098f6:	bf00      	nop
 80098f8:	200001c8 	.word	0x200001c8

080098fc <memset>:
 80098fc:	4603      	mov	r3, r0
 80098fe:	4402      	add	r2, r0
 8009900:	4293      	cmp	r3, r2
 8009902:	d100      	bne.n	8009906 <memset+0xa>
 8009904:	4770      	bx	lr
 8009906:	f803 1b01 	strb.w	r1, [r3], #1
 800990a:	e7f9      	b.n	8009900 <memset+0x4>

0800990c <__errno>:
 800990c:	4b01      	ldr	r3, [pc, #4]	; (8009914 <__errno+0x8>)
 800990e:	6818      	ldr	r0, [r3, #0]
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	200001c8 	.word	0x200001c8

08009918 <__libc_init_array>:
 8009918:	b570      	push	{r4, r5, r6, lr}
 800991a:	2600      	movs	r6, #0
 800991c:	4d0c      	ldr	r5, [pc, #48]	; (8009950 <__libc_init_array+0x38>)
 800991e:	4c0d      	ldr	r4, [pc, #52]	; (8009954 <__libc_init_array+0x3c>)
 8009920:	1b64      	subs	r4, r4, r5
 8009922:	10a4      	asrs	r4, r4, #2
 8009924:	42a6      	cmp	r6, r4
 8009926:	d109      	bne.n	800993c <__libc_init_array+0x24>
 8009928:	f000 f828 	bl	800997c <_init>
 800992c:	2600      	movs	r6, #0
 800992e:	4d0a      	ldr	r5, [pc, #40]	; (8009958 <__libc_init_array+0x40>)
 8009930:	4c0a      	ldr	r4, [pc, #40]	; (800995c <__libc_init_array+0x44>)
 8009932:	1b64      	subs	r4, r4, r5
 8009934:	10a4      	asrs	r4, r4, #2
 8009936:	42a6      	cmp	r6, r4
 8009938:	d105      	bne.n	8009946 <__libc_init_array+0x2e>
 800993a:	bd70      	pop	{r4, r5, r6, pc}
 800993c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009940:	4798      	blx	r3
 8009942:	3601      	adds	r6, #1
 8009944:	e7ee      	b.n	8009924 <__libc_init_array+0xc>
 8009946:	f855 3b04 	ldr.w	r3, [r5], #4
 800994a:	4798      	blx	r3
 800994c:	3601      	adds	r6, #1
 800994e:	e7f2      	b.n	8009936 <__libc_init_array+0x1e>
 8009950:	08009b04 	.word	0x08009b04
 8009954:	08009b04 	.word	0x08009b04
 8009958:	08009b04 	.word	0x08009b04
 800995c:	08009b08 	.word	0x08009b08

08009960 <memcpy>:
 8009960:	440a      	add	r2, r1
 8009962:	4291      	cmp	r1, r2
 8009964:	f100 33ff 	add.w	r3, r0, #4294967295
 8009968:	d100      	bne.n	800996c <memcpy+0xc>
 800996a:	4770      	bx	lr
 800996c:	b510      	push	{r4, lr}
 800996e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009972:	4291      	cmp	r1, r2
 8009974:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009978:	d1f9      	bne.n	800996e <memcpy+0xe>
 800997a:	bd10      	pop	{r4, pc}

0800997c <_init>:
 800997c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997e:	bf00      	nop
 8009980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009982:	bc08      	pop	{r3}
 8009984:	469e      	mov	lr, r3
 8009986:	4770      	bx	lr

08009988 <_fini>:
 8009988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998a:	bf00      	nop
 800998c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800998e:	bc08      	pop	{r3}
 8009990:	469e      	mov	lr, r3
 8009992:	4770      	bx	lr
